--
-- PostgreSQL database dump
--

-- Dumped from database version 9.2.9
-- Dumped by pg_dump version 9.4.0
-- Started on 2015-10-14 16:22:22

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 8 (class 2615 OID 11284863)
-- Name: alteracoes; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA alteracoes;


ALTER SCHEMA alteracoes OWNER TO postgres;

--
-- TOC entry 9 (class 2615 OID 11284864)
-- Name: dados_carga; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA dados_carga;


ALTER SCHEMA dados_carga OWNER TO postgres;

--
-- TOC entry 10 (class 2615 OID 11284865)
-- Name: dashboard; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA dashboard;


ALTER SCHEMA dashboard OWNER TO postgres;

--
-- TOC entry 57 (class 2615 OID 11596989)
-- Name: integracao; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA integracao;


ALTER SCHEMA integracao OWNER TO postgres;

--
-- TOC entry 591 (class 3079 OID 12648)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 6971 (class 0 OID 0)
-- Dependencies: 591
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 590 (class 3079 OID 11284866)
-- Name: adminpack; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog;


--
-- TOC entry 6972 (class 0 OID 0)
-- Dependencies: 590
-- Name: EXTENSION adminpack; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION adminpack IS 'administrative functions for PostgreSQL';


--
-- TOC entry 593 (class 3079 OID 11284875)
-- Name: hstore; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS hstore WITH SCHEMA public;


--
-- TOC entry 6973 (class 0 OID 0)
-- Dependencies: 593
-- Name: EXTENSION hstore; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION hstore IS 'data type for storing sets of (key, value) pairs';


--
-- TOC entry 592 (class 3079 OID 11284992)
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- TOC entry 6974 (class 0 OID 0)
-- Dependencies: 592
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


SET search_path = public, pg_catalog;

--
-- TOC entry 2027 (class 0 OID 0)
-- Name: box2d; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box2d;


--
-- TOC entry 678 (class 1255 OID 11285040)
-- Name: box2d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d_in(cstring) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_in';


ALTER FUNCTION public.box2d_in(cstring) OWNER TO postgres;

--
-- TOC entry 679 (class 1255 OID 11285041)
-- Name: box2d_out(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d_out(box2d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_out';


ALTER FUNCTION public.box2d_out(box2d) OWNER TO postgres;

--
-- TOC entry 2026 (class 1247 OID 11285039)
-- Name: box2d; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box2d (
    INTERNALLENGTH = 16,
    INPUT = box2d_in,
    OUTPUT = box2d_out,
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE box2d OWNER TO postgres;

--
-- TOC entry 6975 (class 0 OID 0)
-- Dependencies: 2026
-- Name: TYPE box2d; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE box2d IS 'postgis type: A box composed of x min, ymin, xmax, ymax. Often used to return the 2d enclosing box of a geometry.';


--
-- TOC entry 2031 (class 0 OID 0)
-- Name: box3d; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d;


--
-- TOC entry 680 (class 1255 OID 11285047)
-- Name: box3d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_in(cstring) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_in';


ALTER FUNCTION public.box3d_in(cstring) OWNER TO postgres;

--
-- TOC entry 681 (class 1255 OID 11285051)
-- Name: box3d_out(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_out(box3d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_out';


ALTER FUNCTION public.box3d_out(box3d) OWNER TO postgres;

--
-- TOC entry 2030 (class 1247 OID 11285046)
-- Name: box3d; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d (
    INTERNALLENGTH = 48,
    INPUT = box3d_in,
    OUTPUT = box3d_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE box3d OWNER TO postgres;

--
-- TOC entry 6976 (class 0 OID 0)
-- Dependencies: 2030
-- Name: TYPE box3d; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE box3d IS 'postgis type: A box composed of x min, ymin, zmin, xmax, ymax, zmax. Often used to return the 3d extent of a geometry or collection of geometries.';


--
-- TOC entry 2035 (class 0 OID 0)
-- Name: box3d_extent; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d_extent;


--
-- TOC entry 682 (class 1255 OID 11285066)
-- Name: box3d_extent_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_extent_in(cstring) RETURNS box3d_extent
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_in';


ALTER FUNCTION public.box3d_extent_in(cstring) OWNER TO postgres;

--
-- TOC entry 683 (class 1255 OID 11285067)
-- Name: box3d_extent_out(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_extent_out(box3d_extent) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_extent_out';


ALTER FUNCTION public.box3d_extent_out(box3d_extent) OWNER TO postgres;

--
-- TOC entry 2034 (class 1247 OID 11285056)
-- Name: box3d_extent; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE box3d_extent (
    INTERNALLENGTH = 48,
    INPUT = box3d_extent_in,
    OUTPUT = box3d_extent_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE box3d_extent OWNER TO postgres;

--
-- TOC entry 6977 (class 0 OID 0)
-- Dependencies: 2034
-- Name: TYPE box3d_extent; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE box3d_extent IS 'postgis type: A box composed of x min, ymin, zmin, xmax, ymax, zmax. Often used to return the extent of a geometry.';


--
-- TOC entry 2039 (class 0 OID 0)
-- Name: chip; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE chip;


--
-- TOC entry 684 (class 1255 OID 11285072)
-- Name: chip_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION chip_in(cstring) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_in';


ALTER FUNCTION public.chip_in(cstring) OWNER TO postgres;

--
-- TOC entry 685 (class 1255 OID 11285074)
-- Name: chip_out(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION chip_out(chip) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_out';


ALTER FUNCTION public.chip_out(chip) OWNER TO postgres;

--
-- TOC entry 2038 (class 1247 OID 11285070)
-- Name: chip; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE chip (
    INTERNALLENGTH = variable,
    INPUT = chip_in,
    OUTPUT = chip_out,
    ALIGNMENT = double,
    STORAGE = extended
);


ALTER TYPE chip OWNER TO postgres;

--
-- TOC entry 2043 (class 0 OID 0)
-- Name: geography; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geography;


--
-- TOC entry 686 (class 1255 OID 11285087)
-- Name: geography_analyze(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_analyze(internal) RETURNS boolean
    LANGUAGE c STRICT
    AS '$libdir/postgis-1.5', 'geography_analyze';


ALTER FUNCTION public.geography_analyze(internal) OWNER TO postgres;

--
-- TOC entry 687 (class 1255 OID 11285119)
-- Name: geography_in(cstring, oid, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_in(cstring, oid, integer) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_in';


ALTER FUNCTION public.geography_in(cstring, oid, integer) OWNER TO postgres;

--
-- TOC entry 688 (class 1255 OID 11285120)
-- Name: geography_out(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_out(geography) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_out';


ALTER FUNCTION public.geography_out(geography) OWNER TO postgres;

--
-- TOC entry 689 (class 1255 OID 11285128)
-- Name: geography_typmod_in(cstring[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_in(cstring[]) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_typmod_in';


ALTER FUNCTION public.geography_typmod_in(cstring[]) OWNER TO postgres;

--
-- TOC entry 690 (class 1255 OID 11285129)
-- Name: geography_typmod_out(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_out(integer) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_typmod_out';


ALTER FUNCTION public.geography_typmod_out(integer) OWNER TO postgres;

--
-- TOC entry 2042 (class 1247 OID 11285086)
-- Name: geography; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geography (
    INTERNALLENGTH = variable,
    INPUT = geography_in,
    OUTPUT = geography_out,
    TYPMOD_IN = geography_typmod_in,
    TYPMOD_OUT = geography_typmod_out,
    ANALYZE = geography_analyze,
    ALIGNMENT = double,
    STORAGE = main
);


ALTER TYPE geography OWNER TO postgres;

--
-- TOC entry 6978 (class 0 OID 0)
-- Dependencies: 2042
-- Name: TYPE geography; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE geography IS 'postgis type: Ellipsoidal spatial data type.';


--
-- TOC entry 2047 (class 0 OID 0)
-- Name: geometry; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geometry;


--
-- TOC entry 691 (class 1255 OID 11285132)
-- Name: geometry_analyze(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_analyze(internal) RETURNS boolean
    LANGUAGE c STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_analyze';


ALTER FUNCTION public.geometry_analyze(internal) OWNER TO postgres;

--
-- TOC entry 692 (class 1255 OID 11285133)
-- Name: geometry_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_in(cstring) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_in';


ALTER FUNCTION public.geometry_in(cstring) OWNER TO postgres;

--
-- TOC entry 693 (class 1255 OID 11285134)
-- Name: geometry_out(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_out(geometry) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_out';


ALTER FUNCTION public.geometry_out(geometry) OWNER TO postgres;

--
-- TOC entry 694 (class 1255 OID 11285135)
-- Name: geometry_recv(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_recv(internal) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_recv';


ALTER FUNCTION public.geometry_recv(internal) OWNER TO postgres;

--
-- TOC entry 695 (class 1255 OID 11285136)
-- Name: geometry_send(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_send(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_send';


ALTER FUNCTION public.geometry_send(geometry) OWNER TO postgres;

--
-- TOC entry 2046 (class 1247 OID 11285131)
-- Name: geometry; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geometry (
    INTERNALLENGTH = variable,
    INPUT = geometry_in,
    OUTPUT = geometry_out,
    RECEIVE = geometry_recv,
    SEND = geometry_send,
    ANALYZE = geometry_analyze,
    DELIMITER = ':',
    ALIGNMENT = int4,
    STORAGE = main
);


ALTER TYPE geometry OWNER TO postgres;

--
-- TOC entry 6979 (class 0 OID 0)
-- Dependencies: 2046
-- Name: TYPE geometry; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE geometry IS 'postgis type: Planar spatial data type.';


--
-- TOC entry 2050 (class 1247 OID 11285140)
-- Name: geometry_dump; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE geometry_dump AS (
	path integer[],
	geom geometry
);


ALTER TYPE geometry_dump OWNER TO postgres;

--
-- TOC entry 6980 (class 0 OID 0)
-- Dependencies: 2050
-- Name: TYPE geometry_dump; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE geometry_dump IS 'postgis type: A spatial datatype with two fields - geom (holding a geometry object) and path[] (a 1-d array holding the position of the geometry within the dumped object.)';


--
-- TOC entry 2054 (class 0 OID 0)
-- Name: gidx; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE gidx;


--
-- TOC entry 696 (class 1255 OID 11285142)
-- Name: gidx_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gidx_in(cstring) RETURNS gidx
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'gidx_in';


ALTER FUNCTION public.gidx_in(cstring) OWNER TO postgres;

--
-- TOC entry 697 (class 1255 OID 11285143)
-- Name: gidx_out(gidx); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gidx_out(gidx) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'gidx_out';


ALTER FUNCTION public.gidx_out(gidx) OWNER TO postgres;

--
-- TOC entry 2053 (class 1247 OID 11285141)
-- Name: gidx; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE gidx (
    INTERNALLENGTH = variable,
    INPUT = gidx_in,
    OUTPUT = gidx_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE gidx OWNER TO postgres;

--
-- TOC entry 2058 (class 0 OID 0)
-- Name: intbig_gkey; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE intbig_gkey;


--
-- TOC entry 698 (class 1255 OID 11285146)
-- Name: _intbig_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _intbig_in(cstring) RETURNS intbig_gkey
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_intbig_in';


ALTER FUNCTION public._intbig_in(cstring) OWNER TO postgres;

--
-- TOC entry 699 (class 1255 OID 11285147)
-- Name: _intbig_out(intbig_gkey); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _intbig_out(intbig_gkey) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_intbig_out';


ALTER FUNCTION public._intbig_out(intbig_gkey) OWNER TO postgres;

--
-- TOC entry 2057 (class 1247 OID 11285145)
-- Name: intbig_gkey; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE intbig_gkey (
    INTERNALLENGTH = variable,
    INPUT = _intbig_in,
    OUTPUT = _intbig_out,
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE intbig_gkey OWNER TO postgres;

--
-- TOC entry 2062 (class 0 OID 0)
-- Name: pgis_abs; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE pgis_abs;


--
-- TOC entry 700 (class 1255 OID 11285150)
-- Name: pgis_abs_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_abs_in(cstring) RETURNS pgis_abs
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'pgis_abs_in';


ALTER FUNCTION public.pgis_abs_in(cstring) OWNER TO postgres;

--
-- TOC entry 701 (class 1255 OID 11285151)
-- Name: pgis_abs_out(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_abs_out(pgis_abs) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'pgis_abs_out';


ALTER FUNCTION public.pgis_abs_out(pgis_abs) OWNER TO postgres;

--
-- TOC entry 2061 (class 1247 OID 11285149)
-- Name: pgis_abs; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE pgis_abs (
    INTERNALLENGTH = 8,
    INPUT = pgis_abs_in,
    OUTPUT = pgis_abs_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE pgis_abs OWNER TO postgres;

--
-- TOC entry 2066 (class 0 OID 0)
-- Name: query_int; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE query_int;


--
-- TOC entry 702 (class 1255 OID 11285154)
-- Name: bqarr_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bqarr_in(cstring) RETURNS query_int
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'bqarr_in';


ALTER FUNCTION public.bqarr_in(cstring) OWNER TO postgres;

--
-- TOC entry 703 (class 1255 OID 11285155)
-- Name: bqarr_out(query_int); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bqarr_out(query_int) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'bqarr_out';


ALTER FUNCTION public.bqarr_out(query_int) OWNER TO postgres;

--
-- TOC entry 2065 (class 1247 OID 11285153)
-- Name: query_int; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE query_int (
    INTERNALLENGTH = variable,
    INPUT = bqarr_in,
    OUTPUT = bqarr_out,
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE query_int OWNER TO postgres;

--
-- TOC entry 2070 (class 0 OID 0)
-- Name: spheroid; Type: SHELL TYPE; Schema: public; Owner: postgres
--

CREATE TYPE spheroid;


--
-- TOC entry 704 (class 1255 OID 11285158)
-- Name: spheroid_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION spheroid_in(cstring) RETURNS spheroid
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ellipsoid_in';


ALTER FUNCTION public.spheroid_in(cstring) OWNER TO postgres;

--
-- TOC entry 705 (class 1255 OID 11285159)
-- Name: spheroid_out(spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION spheroid_out(spheroid) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ellipsoid_out';


ALTER FUNCTION public.spheroid_out(spheroid) OWNER TO postgres;

--
-- TOC entry 2069 (class 1247 OID 11285157)
-- Name: spheroid; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE spheroid (
    INTERNALLENGTH = 65,
    INPUT = spheroid_in,
    OUTPUT = spheroid_out,
    ALIGNMENT = double,
    STORAGE = plain
);


ALTER TYPE spheroid OWNER TO postgres;

--
-- TOC entry 2073 (class 1247 OID 11285163)
-- Name: t_pos; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE t_pos AS (
	tbl character varying(10),
	codpos integer,
	dtahrincl timestamp with time zone,
	codtecrastr smallint,
	idequiprastr character varying(25),
	dtahrtecrastr timestamp with time zone,
	tpptoref smallint,
	codptoref integer,
	nomeptoref character varying(255),
	angulo numeric(5,1),
	dist numeric(5,2),
	dtahr timestamp with time zone,
	long numeric(15,13),
	lat numeric(15,13),
	veloc smallint,
	ignicao smallint
);


ALTER TYPE t_pos OWNER TO postgres;

--
-- TOC entry 2076 (class 1247 OID 11285166)
-- Name: tablefunc_crosstab_2; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE tablefunc_crosstab_2 AS (
	row_name text,
	category_1 text,
	category_2 text
);


ALTER TYPE tablefunc_crosstab_2 OWNER TO postgres;

--
-- TOC entry 2079 (class 1247 OID 11285169)
-- Name: tablefunc_crosstab_3; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE tablefunc_crosstab_3 AS (
	row_name text,
	category_1 text,
	category_2 text,
	category_3 text
);


ALTER TYPE tablefunc_crosstab_3 OWNER TO postgres;

--
-- TOC entry 2082 (class 1247 OID 11285172)
-- Name: tablefunc_crosstab_4; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE tablefunc_crosstab_4 AS (
	row_name text,
	category_1 text,
	category_2 text,
	category_3 text,
	category_4 text
);


ALTER TYPE tablefunc_crosstab_4 OWNER TO postgres;

--
-- TOC entry 2085 (class 1247 OID 11285175)
-- Name: valid_detail; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE valid_detail AS (
	valid boolean,
	reason character varying,
	location geometry
);


ALTER TYPE valid_detail OWNER TO postgres;

SET search_path = dados_carga, pg_catalog;

--
-- TOC entry 706 (class 1255 OID 11285176)
-- Name: f_addhistsitstatcarga(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_addhistsitstatcarga(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  vCodUsrStat INTEGER;
  vCodUsrSit INTEGER;
  
  vNew Carga;
  vOld Carga;

BEGIN
  vCodUsrStat := -1;
  vCodUsrSit := -1;

  vNew := populate_record(null::Carga, pNew);
  vOld := populate_record(null::Carga, pOld);

  IF pTgOp = 'INSERT' THEN
    vCodUsrStat := vNew.CodUsrStatCarga;
    IF vNew.CodSitCarga IS NOT NULL THEN
      vCodUsrSit := vNew.CodUsrSitCarga;
    END IF;
  ELSE
    IF COALESCE(vOld.CodStatCarga, 0) <> COALESCE(vNew.CodStatCarga, 0) THEN
      vCodUsrStat := vNew.CodUsrStatCarga;
    END IF;

    IF COALESCE(vOld.CodSitCarga, 0) <> COALESCE(vNew.CodSitCarga, 0) THEN
      vCodUsrSit := vNew.CodUsrSitCarga;
    END IF;

    IF vOld.DtaHrCancelado IS NULL AND vNew.DtaHrCancelado IS NOT NULL THEN
      UPDATE
        EmbarqueCarga
      SET
        DtaHrCancelado = vNew.DtaHrCancelado
      FROM
        Embarque
      WHERE -- só cancela no último embarque ativo p/manter histórico
        EmbarqueCarga.CodEmbarque = Embarque.CodEmbarque AND
                                    Embarque.DtaHrFim IS NULL AND
                                    Embarque.DtaHrCancelado IS NULL AND
                                    
        EmbarqueCarga.CodCarga = vOld.CodCarga;
    END IF;
  END IF;

  IF vCodUsrStat <> -1 THEN
    INSERT INTO 
      HistStatCarga 
    (
      CodUsrIncl, 
      CodCarga, 
      CodStatCarga, 
      StatCarga_Descr, 
      StatCarga_DefineFim,
      StatCarga_DefineInicio, 
      StatCarga_DefineSinistro,
      StatCarga_DefineCancelado, 
      StatCarga_DefineRedespacho
    )
      SELECT
        vCodUsrStat,
        vNew.CodCarga,
        vNew.CodStatCarga,
        StatCarga.Descr,
        StatCarga.DefineFim,
        StatCarga.DefineInicio,
        StatCarga.DefineSinistro,
        StatCarga.DefineCancelado,
        StatCarga.DefineRedespacho
      FROM
        StatCarga
      WHERE
        StatCarga.CodStatCarga = vNew.CodStatCarga;
  END IF;

  IF vCodUsrSit <> -1 THEN
    INSERT INTO 
      HistSitCarga
    (
      CodUsrIncl, 
      CodCarga,
      CodSitCarga, 
      SitCarga_Descr, 
      SitCarga_TiraAtraso,
      SitCarga_DefineAtraso 
    )
      SELECT
        vCodUsrSit,
        vNew.CodCarga,
        vNew.CodSitCarga,
        SitCarga.Descr,
        SitCarga.TiraAtraso,
        SitCarga.DefineAtraso
      FROM
        SitCarga
      WHERE
        SitCarga.CodSitCarga = vNew.CodSitCarga;
  END IF;
END
$$;


ALTER FUNCTION dados_carga.f_addhistsitstatcarga(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 707 (class 1255 OID 11285177)
-- Name: f_agendamentorealizado(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_agendamentorealizado(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
 declare
    vAgendamento integer := -1;

    vNew Carga;
    vOld Carga;

    STAT_SEM_AGENDAMENTO integer := -1;
    STAT_AGENDAMENTO_REALIZADO integer := 1;
    STAT_AGENDAMENTO_PENDENTE integer := 0;
 BEGIN
    vNew := populate_record(null::Carga, pNew);
    vOld := populate_record(null::Carga, pOld);

    IF pTgOp = 'UPDATE' AND (vNew.IsAgendamento,vNew.DtaHrAgendamento) IS DISTINCT FROM (vOld.IsAgendamento,vOld.DtaHrAgendamento) THEN
      IF vNew.IsAgendamento = FALSE THEN
        vAgendamento := STAT_SEM_AGENDAMENTO;
      ELSE
        IF vNew.DtaHrAgendamento IS NULL THEN
          vAgendamento := STAT_AGENDAMENTO_PENDENTE;
        ELSE
          vAgendamento := STAT_AGENDAMENTO_REALIZADO;
        END IF;
      END IF;

      -- atualizando o ultimo embarque
      IF vNew.CodUltEmbarque IS NOT NULL THEN
        PERFORM f_atualizaAgendamentoRealizado('EMBARQUE', vNew.CodUltEmbarque);
      END IF;

      -- atualizando programacoes de coleta
      EXECUTE 'SELECT DISTINCT ProgColeta.CodProgColeta, f_atualizaAgendamentoRealizado(''COLETA'', ProgColeta.CodProgColeta)
                FROM ProgColetaCarga, ProgColeta
               WHERE ProgColetaCarga.CodCarga = $1
                 AND ProgColeta.CodProgColeta = ProgColetaCarga.CodProgColeta
                 AND ProgColeta.DtaHrRecusa IS NULL
                 AND ProgColeta.DtaHrCancelado IS NULL
                 AND ProgColeta.CodEmbarque IS NULL'
        USING vNew.CodCarga;
    END IF;
  END;
$_$;


ALTER FUNCTION dados_carga.f_agendamentorealizado(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 708 (class 1255 OID 11285178)
-- Name: f_ajustadadosgeraiscarga(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_ajustadadosgeraiscarga(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$
DECLARE
  vCodUsrStat INTEGER;
  vStatDescr VARCHAR(20);
  vStatDefineFim BOOLEAN;
  vStatDefineInicio BOOLEAN;
  vStatDefineSinistro BOOLEAN;
  vStatDefineCancelado BOOLEAN;
  vStatDefineRedespacho BOOLEAN;

  vCodUsrSit INTEGER;
  vSitDescr VARCHAR(255);
  vSitTiraAtraso BOOLEAN;
  vSitDefineAtraso BOOLEAN;

  vCodRegistro BIGINT;
  
  vNew Carga;
  vOld Carga;

BEGIN
  vCodUsrStat := -1;
  vCodUsrSit := -1;

  vNew := populate_record(null::Carga, pNew);
  vOld := populate_record(null::Carga, pOld);

  -- -------------------------------------------------------------
  -- Atualiza os campos dtahrprevfimcoleta e dtahrprevfimentrega
  -- Alterado por hugo em 05/05/2011
  -- -------------------------------------------------------------
  vNew.DtaHrPrevFimColeta := COALESCE(vNew.DtaHrPrevColeta,NOW()) + CAST(COALESCE(vNew.TempoPrevColeta,0) || ' MINUTES' AS INTERVAL);
  vNew.DtaHrPrevFimEntrega := COALESCE(vNew.DtaHrPrevEntrega,NOW()) + CAST(COALESCE(vNew.TempoPrevEntrega,0) || ' MINUTES' AS INTERVAL);
  -- -------------------------------------------------------------

  IF pTgOp IN ('INSERT', 'UPDATE') THEN
    IF vNew.IsAgendamento THEN
      IF vNew.DtaHrAgendamento IS NULL THEN
        vNew.Agendamento_Realizado := 0;
      ELSE
        vNew.Agendamento_Realizado := 1;
      END IF;
    ELSE
      vNew.Agendamento_Realizado := -1;
    END IF;

    -- se nao estiver em um grupo, é principal
    IF vNew.CodCargaGrupo IS NULL THEN
      vNew.Principal = TRUE;
    END IF;
  END IF;

  -- se estiver inserindo
  IF pTgOp = 'INSERT' THEN
    IF vNew.CodUsrStatCarga IS NULL THEN
      vNew.CodUsrStatCarga := vNew.CodUsrIncl;
    END IF;
    
    vCodUsrStat := vNew.CodUsrStatCarga;
            
    IF vNew.CodSitCarga IS NOT NULL THEN
      IF vNew.CodUsrSitCarga IS NULL THEN
        vNew.CodUsrSitCarga := vNew.CodUsrIncl;
      END IF;

      vCodUsrSit := vNew.CodUsrSitCarga;
    END IF;
    
  -- se estiver atualizando
  ELSE
    IF COALESCE(vOld.CodStatCarga, 0) <> COALESCE(vNew.CodStatCarga, 0) THEN
      IF vNew.CodUsrStatCarga IS NULL THEN
        vNew.CodUsrStatCarga := vNew.CodUsrAlter;
      END IF;
      
      vCodUsrStat := vNew.CodUsrStatCarga;

      IF vCodUsrStat IS NULL THEN
        vCodUsrStat := -1;
      END IF;
      
      -- 20/08/2013 - se colocar uma carga TNF para reprogramar (cancelou embarque/oferta)
      -- cancelamos a carga (OS 708)
      IF vNew.CodStatCarga = 9 AND vNew.CodCargaOrigem IS NOT NULL THEN
        vNew.CodStatCarga := 8;
        vNew.Id := vNew.Id || '-CANC TNF';
        vNew.CodEmpJanela := null;
        vNew.CodCargaGrupo := null;
        vNew.Principal := false;

        -- 15/10/2014 - Hugo
        -- quando for uma carga gerada automagicamente de tnf e for cancelada,
        -- voltamos o destino para a carga pai
        -- 23/12/2014 - Normet
        -- tambem trocamos o ID, retiramos do DS e removemos do grupo
        UPDATE Carga
           SET EmpDest_Id = NULL,
               CodEmpDest = vNew.CodEmpDest,
               CodStatCarga = 9     
         WHERE Carga.CodCarga = vNew.CodCargaOrigem;
      END IF;
      
    END IF;

    IF COALESCE(vNew.CodSitCarga, -1) > -1 THEN
      IF vNew.CodUsrSitCarga IS NULL THEN
        vNew.CodUsrSitCarga := vNew.CodUsrAlter;
      END IF;

      vCodUsrSit := vNew.CodUsrSitCarga;
                
      IF vCodUsrSit IS NULL THEN
        vCodUsrSit := -1;
      END IF;
      
    END IF;
      
    IF vNew.CodUsrAlter IS NOT NULL AND vNew.DtaHrAlter IS NULL THEN
      vNew.DtaHrAlter := Now();
    END IF;
  END IF;
  
  -- se mudou o status, tambem atualizamos os campos relacionados
  IF vCodUsrStat <> -1 THEN
    SELECT
      StatCarga.Descr,
      StatCarga.DefineFim,
      StatCarga.DefineInicio,
      StatCarga.DefineSinistro,
      StatCarga.DefineCancelado,
      StatCarga.DefineRedespacho
    INTO
      vStatDescr,
      vStatDefineFim,
      vStatDefineInicio,
      vStatDefineSinistro,
      vStatDefineCancelado,
      vStatDefineRedespacho
    FROM
      StatCarga
    WHERE
      StatCarga.CodStatCarga = vNew.CodStatCarga;

    vNew.DescrStatCarga := vStatDescr;

    IF vNew.DtaHrStatCarga IS NULL THEN
      vNew.DtaHrStatCarga := Now();
    END IF;

    IF vStatDefineFim AND vNew.DtaHrFim IS NULL THEN
      vNew.DtaHrFim := Now();
    END IF;

    IF vStatDefineInicio AND vNew.DtaHrIni IS NULL THEN
      vNew.DtaHrIni := Now();
    END IF;

    IF vStatDefineSinistro AND vNew.DtaHrSinistrado IS NULL THEN
      vNew.DtaHrSinistrado := Now();
    END IF;

    IF vStatDefineCancelado AND vNew.DtaHrCancelado IS NULL THEN
      vNew.DtaHrCancelado := Now();
      IF vNew.CodEmpJanela IS NOT NULL THEN
        vNew.CodEmpJanela := NULL;
      END IF;
    END IF;

    IF vStatDefineRedespacho AND vNew.DtaHrAgRedespacho IS NULL THEN
      vNew.DtaHrAgRedespacho := Now();
    END IF;
  END IF;

  -- se mudou a situacao, tambem atualizamos os dados relacionados
  IF vCodUsrSit <> -1 THEN
    SELECT
      SitCarga.Descr,
      SitCarga.TiraAtraso,
      SitCarga.DefineAtraso
    INTO
      vSitDescr,
      vSitTiraAtraso,
      vSitDefineAtraso
    FROM
      SitCarga
    WHERE
      SitCarga.CodSitCarga = vNew.CodSitCarga;

    vNew.DescrSitCarga := vSitDescr;

    IF vNew.DtaHrSitCarga IS NULL THEN
      vNew.DtaHrSitCarga := Now();
    END IF;

    IF vSitTiraAtraso THEN
      vNew.DtaHrNaoAtrasado := Now();
    END IF;

    IF vSitDefineAtraso THEN
      vNew.DtaHrAtrasado := Now();
      vNew.DtaHrNaoAtrasado := NULL;
    END IF;
  END IF;

  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodEmpEmbar, 0) <> COALESCE(vNew.CodEmpEmbar, 0) THEN
    -- HUGO 31/05/2011
    -- ALTERADO PARA NAO CONSIDERAR O EMPEMBAR_ID
    SELECT
      Emp.CodEmp,
      Emp.Id,
      Emp.Nome
    INTO
      vNew.CodEmpEmbar,
      vNew.EmpEmbar_Id,
      vNew.EmpEmbar_Nome
    FROM
      Emp
    WHERE
      Emp.CodEmp = vNew.CodEmpEmbar;
  END IF;

  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodEmpTra, 0) <> COALESCE(vNew.CodEmpTra, 0) THEN

    -- HUGO 31/05/2011
    -- ALTERADO PARA NAO CONSIDERAR O EMPTRA_ID
    SELECT
      Emp.CodEmp,
      Emp.Id,
      Emp.Nome
    INTO
      vNew.CodEmpTra,
      vNew.EmpTra_Id,
      vNew.EmpTra_Nome
    FROM
      Emp
    WHERE
      Emp.CodEmp = vNew.CodEmpTra;
  END IF;

  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodTpOper, 0) <> COALESCE(vNew.CodTpOper, 0) THEN
    SELECT
      TpOper.Descr,
      TpOper.TemRedespacho
    INTO
      vNew.TpOper_Descr,
      vNew.TpOper_Redespacho
    FROM
      TpOper
    WHERE
      TpOper.CodTpOper = vNew.CodTpOper;
  END IF;

  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodTpCarga, 0) <> COALESCE(vNew.CodTpCarga, 0) THEN

    -- HUGO 31/05/2011
    -- ALTERADO PARA NAO CONSIDERAR O TPCARGA_ID
    SELECT
      TpCarga.CodTpCarga,
      TpCarga.Id,
      TpCarga.Descr,
      TpCarga.TempLimiteMinimo,
      TpCarga.TempLimiteMaximo
    INTO
      vNew.CodTpCarga,
      vNew.TpCarga_Id,
      vNew.TpCarga_Descr,
      vNew.TpCarga_TempMinima,
      vNew.TpCarga_TempMaxima
    FROM
      TpCarga
    WHERE
      TpCarga.CodTpCarga = vNew.CodTpCarga;
  END IF;

  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodEmpOrig, 0) <> COALESCE(vNew.CodEmpOrig, 0) THEN
    -- HUGO 31/05/2011
    -- ALTERADO PARA NAO CONSIDERAR O EMPORIG_ID
    SELECT
      Emp.CodEmp,
      Emp.Id,
      Emp.Nome,
      EmpEndereco.Logradouro,
      EmpEndereco.Bairro,
      EmpEndereco.CEP,
      EmpEndereco.CodCidUF,
      (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = EmpEndereco.CodCidUF),
      EmpEndereco.Pos_Area
    INTO
      vNew.CodEmpOrig,
      vNew.EmpOrig_Id,
      vNew.EmpOrig_Nome,
      vNew.EmpOrig_Logradouro,
      vNew.EmpOrig_Bairro,
      vNew.EmpOrig_CEP,
      vNew.EmpOrig_CodCidUF,
      vNew.EmpOrig_NomeCidUF,
      vNew.EmpOrig_Pos_Area
    FROM
      Emp, EmpEndereco
    WHERE
      Emp.CodEmp = vNew.CodEmpOrig
      AND EmpEndereco.CodEmp = Emp.CodEmp
      AND EmpEndereco.Padrao = TRUE;
  END IF;

  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodEmpDest, 0) <> COALESCE(vNew.CodEmpDest, 0) THEN
    -- HUGO 31/05/2011
    -- ALTERADO PARA NAO CONSIDERAR O EMPDEST_ID
    SELECT
      Emp.CodEmp,
      Emp.Id,
      Emp.Nome
    INTO
      vNew.CodEmpDest,
      vNew.EmpDest_Id,
      vNew.EmpDest_Nome
    FROM
      Emp
    WHERE
      Emp.CodEmp = vNew.CodEmpDest;
  END IF;
  
  -- -------------------------------------------------------------------------
  -- atualizando os dados do ponto de TNF
  -- -------------------------------------------------------------------------
  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodEmpTNF, 0) <> COALESCE(vNew.CodEmpTNF, 0) THEN
    SELECT 
      Emp.Nome
      , Emp.Id
      , Emp.Logradouro
      , Emp.Bairro
      , Emp.Cep
      , Emp.CodCidUf
      , CidUf.Nome
      , Emp.Pos_long
      , Emp.Pos_lat
      , Emp.Pos_Area
    INTO
      vNew.EmpTNF_Nome
      , vNew.EmpTNF_Id
      , vNew.EmpTNF_Logradouro
      , vNew.EmpTNF_Bairro
      , vNew.EmpTNF_Cep
      , vNew.EmpTNF_CodCidUf
      , vNew.EmpTNF_NomeCidUf
      , vNew.EmpTNF_Pos_Long
      , vNew.EmpTNF_Pos_Lat
      , vNew.EmpTNF_Pos_Area
    FROM
      Emp, CidUf
    WHERE
      Emp.CodCidUf = CidUf.CodCidUf
      AND Emp.CodEmp = vNew.CodEmpTNF;
  END IF;
  
  -- Se trocou o endereco de entrega
  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodEnderecoDest, 0) <> COALESCE(vNew.CodEnderecoDest, 0) THEN
    SELECT
      EmpEndereco.Logradouro,
      EmpEndereco.Bairro,
      EmpEndereco.CEP,
      EmpEndereco.CodCidUF,
      (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = EmpEndereco.CodCidUF),
      EmpEndereco.Pos_Area
    INTO
      vNew.EmpDest_Logradouro,
      vNew.EmpDest_Bairro,
      vNew.EmpDest_CEP,
      vNew.EmpDest_CodCidUF,
      vNew.EmpDest_NomeCidUF,
      vNew.EmpDest_Pos_Area
    FROM
      EmpEndereco
    WHERE
      EmpEndereco.CodEmpEndereco = vNew.CodEnderecoDest;
  END IF;

  IF pTgOp = 'INSERT' OR COALESCE(vOld.CodMoeda, 0) <> COALESCE(vNew.CodMoeda, 0) THEN
    SELECT
      Moeda.Sigla
    INTO
      vNew.Moeda_Sigla
    FROM
      Moeda
    WHERE
      Moeda.CodMoeda = vNew.CodMoeda;
  END IF;

  RETURN HSTORE(vNew);
END
$$;


ALTER FUNCTION dados_carga.f_ajustadadosgeraiscarga(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 709 (class 1255 OID 11285180)
-- Name: f_ajustapendenciascarga(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_ajustapendenciascarga(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$
DECLARE
  vPendencias TEXT[] := '{}';
  vPrazo INTEGER;
  vPendenciasDs BOOLEAN := FALSE;

  vNew Carga;
  vOld Carga;
BEGIN
  vNew := populate_record(null::Carga, pNew);
  vOld := populate_record(null::Carga, pOld);

  -- QUANDO TIRAR DO DS, LIMPA AS DATAS
  IF pTgOp = 'UPDATE' AND vOld.CodEmpJanela IS NOT NULL AND vNew.CodEmpJanela IS NULL THEN
    vNew.DtaHrPrevColeta := NULL;
    vNew.DtaHrPrevFimColeta := NULL;
    vNew.DtaHrPrevEntrega := NULL;
    vNew.DtaHrPrevFimEntrega := NULL;
  END IF;

/*  
  IF pTgOp = 'UPDATE' AND 
    NOT ((vNew.CodTpCarga,vNew.DtaHrPrevColeta,vNew.DtaHrPrevEntrega,vNew.CodTpOper,vNew.CodEmpEmbar,vNew.CodEmpOrig,vNew.CodEnderecoOrig,vNew.CodEmpDest,vNew.CodEnderecoDest,vNew.TempoPrevColeta,vNew.TempoPrevEntrega)
    IS DISTINCT FROM (vOld.CodTpCarga,vOld.DtaHrPrevColeta,vOld.DtaHrPrevEntrega,vOld.CodTpOper,vOld.CodEmpEmbar,vOld.CodEmpOrig,vOld.CodEnderecoOrig,vOld.CodEmpDest,vOld.CodEnderecoDest,vOld.TempoPrevColeta,vOld.TempoPrevEntrega)) THEN
    RETURN NEW;
  END IF;
  */
  
  IF vNew.CodTpCarga IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Tipo de carga não informado');
  END IF;
  IF vNew.DtaHrPrevColeta IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Data de coleta não informada');
  END IF;
  IF vNew.DtaHrPrevEntrega IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Data de entrega não informada');
  END IF;
  
  IF vNew.CodTpOper IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Tipo de operação não informado');
    vPendenciasDs := TRUE;
  END IF;
  IF vNew.CodEmpEmbar IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Empresa embarcadora não informada');
    vPendenciasDs := TRUE;
  END IF;
  IF vNew.CodEmpOrig IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Empresa de origem não informada');
    vPendenciasDs := TRUE;
  END IF;
  IF vNew.CodEnderecoOrig IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Endereço de origem não informada');
    vPendenciasDs := TRUE;
  END IF;
  IF vNew.CodEmpDest IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Empresa de destino não informada');
    vPendenciasDs := TRUE;
  END IF;
  IF vNew.CodEnderecoDest IS NULL THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Endereço de destino não informada');
    vPendenciasDs := TRUE;
  END IF;
  
  IF COALESCE(vNew.TempoPrevColeta,0) = 0 THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Tempo de coleta não informado');
    vPendenciasDs := TRUE;
  END IF;
  
  IF COALESCE(vNew.TempoPrevEntrega,0) = 0 THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Tempo de entrega não informado');
    vPendenciasDs := TRUE;
  END IF;

  IF COALESCE(vNew.CodTpPalete,0) = 0 THEN
    vPendencias := ARRAY_APPEND(vPendencias, 'Tipo de paletização não informado');
    vPendenciasDs := TRUE;
  END IF;

  IF vNew.CodEmpOrig IS NOT NULL AND vNew.CodEnderecoDest IS NOT NULL AND vNew.CodTpOper IS NOT NULL THEN
    IF (pTgOp = 'INSERT' OR (vNew.CodEmpOrig,vNew.CodEnderecoDest,vNew.CodTpOper) IS DISTINCT FROM (vOld.CodEmpOrig,vOld.CodEnderecoDest,vOld.CodTpOper)) THEN
      SELECT p.Prazo 
      INTO vPrazo
      FROM PrazoTransito p
      JOIN Emp e ON e.codemp = vNew.CodEmpOrig AND p.CodCidUfOrig = e.codciduf
      JOIN EmpEndereco ed ON p.CodCidUfDest = ed.CodCidUf AND ed.CodEmpEndereco = vNew.CodEnderecoDest
      JOIN TpOper tp ON tp.CodTpOper = vNew.CodTpOper AND tp.TipoPrazoTransito = p.Tipo
      WHERE p.Ativo;

      IF COALESCE(vPrazo,-1) = -1 THEN
        vPendencias := ARRAY_APPEND(vPendencias, 'Nenhum prazo de transito encontrado entre a origem e destino informados');
        vPendenciasDs := TRUE;
      END IF;
    END IF;
  ELSE 
    vPendencias := ARRAY_APPEND(vPendencias, 'Não será possível calcular o prazo de transito por que o cadastro está incompleto');
    vPendenciasDs := TRUE;
  END IF;

  IF ARRAY_LENGTH(vPendencias,1) > 0 THEN
    vNew.TemPendencias := TRUE;
  ELSE
    vNew.TemPendencias := FALSE;
  END IF;

  vNew.Pendencias := vPendencias;
  vNew.TemPendenciasDs := vPendenciasDs;

  RETURN HSTORE(vNew);
END; $$;


ALTER FUNCTION dados_carga.f_ajustapendenciascarga(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 710 (class 1255 OID 11285181)
-- Name: f_ajustapesods(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_ajustapesods(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$
DECLARE
  vRec RECORD;
  vNew Carga;
  vOld Carga;

BEGIN
  vNew := populate_record(null::Carga, pNew);
  vOld := populate_record(null::Carga, pOld);

  IF pTgOp = 'INSERT' OR (pTgOp = 'UPDATE' AND (vNew.CodTpOper,vNew.CodEnderecoOrig,vNew.CodStatCarga,vNew.Peso) IS DISTINCT FROM (vOld.CodTpOper,vOld.CodEnderecoOrig,vOld.CodStatCarga,vOld.Peso)) THEN
    vNew.PesoDs := f_calculaPesoDs(vNew.Peso,vNew.CodStatCarga,vNew.CodEnderecoOrig,vNew.CodTpOper);
  END IF;
  
  RETURN HSTORE(vNew);
END;
$$;


ALTER FUNCTION dados_carga.f_ajustapesods(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 711 (class 1255 OID 11285182)
-- Name: f_ajustasituacaocarga(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_ajustasituacaocarga(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$
DECLARE
  vNew Carga;
BEGIN
  vNew := populate_record(null::Carga, pNew);
  IF vNew.CodSitCarga IS NULL THEN
    vNew.CodSitCarga := 2;
  END IF;
  
  RETURN HSTORE(vNew);
END;
$$;


ALTER FUNCTION dados_carga.f_ajustasituacaocarga(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 712 (class 1255 OID 11285183)
-- Name: f_atualizagrupocarga(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_atualizagrupocarga(pnew public.hstore, pold public.hstore, vtgop character varying) RETURNS public.hstore
    LANGUAGE plpgsql
    AS $$

DECLARE
  vNew Carga;
  vOld Carga;
  vCodGrupo integer;

BEGIN
  vNew := populate_record(null::Carga, pNew);
  vOld := populate_record(null::Carga, pOld);

  IF vNew.CodCargaGrupo IS DISTINCT FROM vOld.CodCargaGrupo THEN
    vCodGrupo := COALESCE(vNew.CodCargaGrupo, vOld.CodCargaGrupo);

    IF vCodGrupo IS NOT NULL THEN
      IF vNew.CodCargaGrupo IS NULL THEN
        UPDATE CargaGrupo
           SET Cargas = f_removeElements(CargaGrupo.Cargas::bigint[], ARRAY[vNew.CodCarga])
         WHERE CargaGrupo.CodCargaGrupo = vCodGrupo;

      ELSE
        --raise exception '%', vCodGrupo;
        UPDATE CargaGrupo
           SET Cargas = ARRAY_APPEND(CargaGrupo.Cargas::bigint[], vNew.CodCarga)
         WHERE CargaGrupo.CodCargaGrupo = vCodGrupo;
      END IF;
    END IF;
  END IF;

  RETURN HSTORE(vNew);
END;
$$;


ALTER FUNCTION dados_carga.f_atualizagrupocarga(pnew public.hstore, pold public.hstore, vtgop character varying) OWNER TO postgres;

--
-- TOC entry 713 (class 1255 OID 11285184)
-- Name: f_atualizajanelaselecionada(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_atualizajanelaselecionada(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  vCodJanelaNew INTEGER;
  vCodJanelaOld INTEGER;
  vDtaHrColetaNew TIMESTAMP WITH TIME ZONE;
  vDtaHrColetaOld TIMESTAMP WITH TIME ZONE;
  vDtaAux TIMESTAMP WITH TIME ZONE;
  vTotPesoDs FLOAT;
  vTotPesoReal FLOAT;
  vTotGrupos INT;
  vNew Carga;
  vOld Carga;
begin
  vNew := populate_record(null::Carga, pNew);
  vOld := populate_record(null::Carga, pOld);

  IF pTgOp = 'INSERT' AND vNew.CodEmpJanela IS NOT NULL THEN
    vCodJanelaNew := vNew.CodEmpJanela;
    vDtaHrColetaNew := vNew.DtaHrPrevColeta;

  ELSIF pTgOp = 'UPDATE' THEN
    IF (vNew.CodEmpJanela,vNew.Peso,vNew.PesoDs) IS DISTINCT FROM (vOld.CodEmpJanela,vOld.Peso,vOld.PesoDs) THEN
      vCodJanelaNew := vNew.CodEmpJanela;
      vCodJanelaOld := vOld.CodEmpJanela;
      vDtaHrColetaNew := vNew.DtaHrPrevColeta;
      vDtaHrColetaOld := vOld.DtaHrPrevColeta;
    END IF;

  ELSIF pTgOp = 'DELETE' THEN
    IF vOld.CodEmpJanela IS NOT NULL THEN
      vCodJanelaOld := vOld.CodEmpJanela;
      vDtaHrColetaOld := vOld.DtaHrPrevColeta;
    END IF;
  END IF;

  IF vCodJanelaNew IS NOT NULL THEN
    EXECUTE 'CREATE TEMP TABLE tmp_cargasSelecao AS
      SELECT UNNEST(cargas) AS codcarga
      FROM EmpJanela
      WHERE CodEmpJanela = ' || vCodJanelaNew || '
      UNION
      SELECT ' || vNew.CodCarga || ' AS codcarga
      ORDER BY 1 ASC';
      
    SELECT
      SUM(COALESCE(peso,0)),
      SUM(COALESCE(pesods,0)),
      SUM(CASE WHEN Carga.Principal THEN 1 ELSE 0 END)
    INTO 
      vTotPesoReal,
      vTotPesoDs,
      vTotGrupos
    FROM
      Carga
    WHERE Carga.CodCarga IN (SELECT codcarga FROM tmp_cargasSelecao);
      
    UPDATE EmpJanela
    SET cargas = (SELECT ARRAY_AGG(codcarga) FROM tmp_cargasSelecao),
        TotPesoCalc = vTotPesoDs,
        TotPesoReal = vTotPesoReal,
        TotGrupos = vTotGrupos
    WHERE EmpJanela.CodEmpJanela = vCodJanelaNew;

    DROP TABLE tmp_cargasSelecao;
  END IF;

  IF vCodJanelaOld IS NOT NULL AND vCodJanelaOld IS DISTINCT FROM vCodJanelaNew THEN
    EXECUTE 'CREATE TEMP TABLE tmp_cargasSelecao AS
      SELECT UNNEST(cargas) AS codcarga
      FROM EmpJanela
      WHERE CodEmpJanela = ' || vCodJanelaOld || '
      ORDER BY 1 ASC';

    DELETE FROM tmp_cargasSelecao WHERE codcarga = vOld.CodCarga;

    SELECT
      SUM(COALESCE(peso,0)),
      SUM(COALESCE(pesods,0)),
      SUM(CASE WHEN Carga.Principal THEN 1 ELSE 0 END)
    INTO 
      vTotPesoReal,
      vTotPesoDs,
      vTotGrupos
    FROM
      Carga
    WHERE Carga.CodCarga IN (SELECT codcarga FROM tmp_cargasSelecao);
      
    UPDATE EmpJanela
    SET cargas = COALESCE((SELECT ARRAY_AGG(codcarga) FROM tmp_cargasSelecao),'{}'),
        TotPesoCalc = COALESCE(vTotPesoDs,0),
        TotPesoReal = COALESCE(vTotPesoReal,0),
        TotGrupos = COALESCE(vTotGrupos,0)
    WHERE EmpJanela.CodEmpJanela = vCodJanelaOld;

    DROP TABLE tmp_cargasSelecao;
  END IF;
END
$$;


ALTER FUNCTION dados_carga.f_atualizajanelaselecionada(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 714 (class 1255 OID 11285185)
-- Name: f_atualizarpainelcontrolecarga(public.hstore, public.hstore, character varying); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION f_atualizarpainelcontrolecarga(pnew public.hstore, pold public.hstore, ptgop character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  vNew Carga;
  vOld Carga;
BEGIN
  vNew := populate_record(null::Carga, pNew);
  vOld := populate_record(null::Carga, pOld);

  IF pTgOp = 'INSERT' THEN
    PERFORM f_atualizaPainelCarga(vNew,1);
    
  ELSEIF pTgOp = 'UPDATE' 
      AND (vNew.CodSitCarga,vNew.CodStatCarga,vNew.Peso,vNew.CodEmpEmbar,vNew.CodEmpTra,vNew.NumPalete,vNew.Vol,vNew.CodUltEmbarque) 
      IS DISTINCT FROM (vOld.CodSitCarga,vOld.CodStatCarga,vOld.Peso,vOld.CodEmpEmbar,vOld.CodEmpTra,vOld.NumPalete,vOld.Vol,vOld.CodUltEmbarque)
    THEN
    
    PERFORM f_atualizaPainelCarga(vOld,2);
    PERFORM f_atualizaPainelCarga(vNew,1);
  ELSEIF pTgOp = 'DELETE' THEN
    PERFORM f_atualizaPainelCarga(vOld,2);
  END IF;

END; $$;


ALTER FUNCTION dados_carga.f_atualizarpainelcontrolecarga(pnew public.hstore, pold public.hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 715 (class 1255 OID 11285186)
-- Name: tf_after_iud_carga_child(); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION tf_after_iud_carga_child() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

BEGIN
  IF TG_OP = 'INSERT' THEN
    PERFORM dados_carga.f_addHistSitStatCarga(HSTORE(NEW), null, TG_OP);
    PERFORM dados_carga.f_atualizaJanelaSelecionada(HSTORE(NEW), null, TG_OP);
    PERFORM dados_carga.f_atualizarPainelControleCarga(HSTORE(NEW), null, TG_OP);
    PERFORM dados_carga.f_atualizaGrupoCarga(HSTORE(NEW), NULL, TG_OP);

    PERFORM f_gerarLogAlteracoes('carga', 'codcarga', null, HSTORE(NEW), TG_OP);
  END IF;

  IF TG_OP = 'UPDATE' THEN
    PERFORM dados_carga.f_addHistSitStatCarga(HSTORE(NEW), HSTORE(OLD), TG_OP);
    PERFORM dados_carga.f_agendamentoRealizado(HSTORE(NEW), HSTORE(OLD), TG_OP);
    PERFORM dados_carga.f_atualizaJanelaSelecionada(HSTORE(NEW), HSTORE(OLD), TG_OP);
    PERFORM dados_carga.f_atualizarPainelControleCarga(HSTORE(NEW), HSTORE(OLD), TG_OP);
    PERFORM dados_carga.f_atualizaGrupoCarga(HSTORE(NEW), HSTORE(OLD), TG_OP);

    PERFORM f_gerarLogAlteracoes('carga', 'codcarga', HSTORE(OLD), HSTORE(NEW), TG_OP);
  END IF;

  IF TG_OP = 'DELETE' THEN
    PERFORM dados_carga.f_atualizarPainelControleCarga(null, HSTORE(OLD), TG_OP);
    PERFORM f_gerarLogAlteracoes('carga', 'codcarga', HSTORE(OLD), null, TG_OP);
    
    RETURN OLD;
  END IF;
  
  RETURN NEW;
END;

$$;


ALTER FUNCTION dados_carga.tf_after_iud_carga_child() OWNER TO postgres;

--
-- TOC entry 716 (class 1255 OID 11285187)
-- Name: tf_before_iud_carga_child(); Type: FUNCTION; Schema: dados_carga; Owner: postgres
--

CREATE FUNCTION tf_before_iud_carga_child() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE
  
BEGIN
  IF TG_OP = 'INSERT' THEN
    NEW := NEW #= dados_carga.f_ajustaSituacaoCarga(HSTORE(NEW), null, TG_OP);
    NEW := NEW #= dados_carga.f_ajustaDadosGeraisCarga(HSTORE(NEW), null, TG_OP);
    NEW := NEW #= dados_carga.f_ajustaPendenciasCarga(HSTORE(NEW), null, TG_OP);
    NEW := NEW #= dados_carga.f_ajustaPesoDs(HSTORE(NEW), null, TG_OP);
  END IF;

  IF TG_OP = 'UPDATE' THEN
    NEW := NEW #= dados_carga.f_ajustaDadosGeraisCarga(HSTORE(NEW), HSTORE(OLD), TG_OP);
    NEW := NEW #= dados_carga.f_ajustaPendenciasCarga(HSTORE(NEW), HSTORE(OLD), TG_OP);
    NEW := NEW #= dados_carga.f_ajustaPesoDs(HSTORE(NEW), HSTORE(OLD), TG_OP);
  END IF;

  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  END IF;
  
  RETURN NEW;
END;

$$;


ALTER FUNCTION dados_carga.tf_before_iud_carga_child() OWNER TO postgres;

SET search_path = dashboard, pg_catalog;

--
-- TOC entry 717 (class 1255 OID 11285188)
-- Name: f_atualiza_fontedadosaux(character varying); Type: FUNCTION; Schema: dashboard; Owner: postgres
--

CREATE FUNCTION f_atualiza_fontedadosaux(pnome character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  vSQL TEXT;
  vDtaHr TIMESTAMPTZ;
  vIntervalo INT4;
  vTable_Name VARCHAR;
BEGIN
  pNome := LOWER(pNome);

  SELECT DtaHrUltUpd, Intervalo 
    INTO vDtaHr, vIntervalo 
    FROM Dashboard.FonteDadosAux 
   WHERE Nome = pNome 
     FOR UPDATE;

  IF vDtaHr IS NULL THEN
    RAISE EXCEPTION 'Não foi localizado um registro para %', pNome 
    USING HINT = 'Verifique os registros disponíveis na tabela dados_dashboard';
  END IF;

  vTable_Name := 'fontedadosaux_' || pNome;

  IF EXTRACT(EPOCH FROM CURRENT_TIMESTAMP - vDtaHr) > COALESCE(vIntervalo, 60) THEN
    IF EXISTS (SELECT 1 FROM Information_Schema.Tables WHERE Table_Schema = 'dashboard' AND Table_Name = vTable_Name) THEN
      EXECUTE 'DROP TABLE dashboard.' || vTable_Name;
    END IF;

    SELECT SQL INTO vSQL FROM Dashboard.FonteDadosAux WHERE Nome = pNome;
    EXECUTE 'CREATE TABLE dashboard.' || vTable_Name || ' AS ' || vSQL;

    UPDATE Dashboard.FonteDadosAux SET DtaHrUltUpd = CURRENT_TIMESTAMP WHERE Nome = pNome;
  END IF;

  RETURN vTable_Name;
END $$;


ALTER FUNCTION dashboard.f_atualiza_fontedadosaux(pnome character varying) OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- TOC entry 1682 (class 1255 OID 11285189)
-- Name: _int_contained(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _int_contained(integer[], integer[]) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_int_contained';


ALTER FUNCTION public._int_contained(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 6981 (class 0 OID 0)
-- Dependencies: 1682
-- Name: FUNCTION _int_contained(integer[], integer[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION _int_contained(integer[], integer[]) IS 'contained in';


--
-- TOC entry 718 (class 1255 OID 11285190)
-- Name: _int_contains(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _int_contains(integer[], integer[]) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_int_contains';


ALTER FUNCTION public._int_contains(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 6982 (class 0 OID 0)
-- Dependencies: 718
-- Name: FUNCTION _int_contains(integer[], integer[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION _int_contains(integer[], integer[]) IS 'contains';


--
-- TOC entry 719 (class 1255 OID 11285191)
-- Name: _int_different(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _int_different(integer[], integer[]) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_int_different';


ALTER FUNCTION public._int_different(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 6983 (class 0 OID 0)
-- Dependencies: 719
-- Name: FUNCTION _int_different(integer[], integer[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION _int_different(integer[], integer[]) IS 'different';


--
-- TOC entry 720 (class 1255 OID 11285192)
-- Name: _int_inter(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _int_inter(integer[], integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_int_inter';


ALTER FUNCTION public._int_inter(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 721 (class 1255 OID 11285193)
-- Name: _int_overlap(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _int_overlap(integer[], integer[]) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_int_overlap';


ALTER FUNCTION public._int_overlap(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 6984 (class 0 OID 0)
-- Dependencies: 721
-- Name: FUNCTION _int_overlap(integer[], integer[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION _int_overlap(integer[], integer[]) IS 'overlaps';


--
-- TOC entry 722 (class 1255 OID 11285194)
-- Name: _int_same(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _int_same(integer[], integer[]) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_int_same';


ALTER FUNCTION public._int_same(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 6985 (class 0 OID 0)
-- Dependencies: 722
-- Name: FUNCTION _int_same(integer[], integer[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION _int_same(integer[], integer[]) IS 'same as';


--
-- TOC entry 723 (class 1255 OID 11285195)
-- Name: _int_union(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _int_union(integer[], integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', '_int_union';


ALTER FUNCTION public._int_union(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 724 (class 1255 OID 11285196)
-- Name: _st_asgeojson(integer, geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgeojson(integer, geography, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_as_geojson';


ALTER FUNCTION public._st_asgeojson(integer, geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 725 (class 1255 OID 11285197)
-- Name: _st_asgeojson(integer, geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgeojson(integer, geometry, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asGeoJson';


ALTER FUNCTION public._st_asgeojson(integer, geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 726 (class 1255 OID 11285198)
-- Name: _st_asgml(integer, geography, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgml(integer, geography, integer, integer, text) RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'geography_as_gml';


ALTER FUNCTION public._st_asgml(integer, geography, integer, integer, text) OWNER TO postgres;

--
-- TOC entry 727 (class 1255 OID 11285199)
-- Name: _st_asgml(integer, geometry, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_asgml(integer, geometry, integer, integer, text) RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'LWGEOM_asGML';


ALTER FUNCTION public._st_asgml(integer, geometry, integer, integer, text) OWNER TO postgres;

--
-- TOC entry 728 (class 1255 OID 11285200)
-- Name: _st_askml(integer, geography, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_askml(integer, geography, integer, text) RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'geography_as_kml';


ALTER FUNCTION public._st_askml(integer, geography, integer, text) OWNER TO postgres;

--
-- TOC entry 729 (class 1255 OID 11285201)
-- Name: _st_askml(integer, geometry, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_askml(integer, geometry, integer, text) RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'LWGEOM_asKML';


ALTER FUNCTION public._st_askml(integer, geometry, integer, text) OWNER TO postgres;

--
-- TOC entry 730 (class 1255 OID 11285202)
-- Name: _st_bestsrid(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_bestsrid(geography) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_BestSRID($1,$1)$_$;


ALTER FUNCTION public._st_bestsrid(geography) OWNER TO postgres;

--
-- TOC entry 731 (class 1255 OID 11285203)
-- Name: _st_bestsrid(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_bestsrid(geography, geography) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_bestsrid';


ALTER FUNCTION public._st_bestsrid(geography, geography) OWNER TO postgres;

--
-- TOC entry 732 (class 1255 OID 11285204)
-- Name: _st_buffer(geometry, double precision, cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_buffer(geometry, double precision, cstring) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'buffer';


ALTER FUNCTION public._st_buffer(geometry, double precision, cstring) OWNER TO postgres;

--
-- TOC entry 733 (class 1255 OID 11285205)
-- Name: _st_contains(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_contains(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'contains';


ALTER FUNCTION public._st_contains(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 734 (class 1255 OID 11285206)
-- Name: _st_containsproperly(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_containsproperly(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'containsproperly';


ALTER FUNCTION public._st_containsproperly(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 735 (class 1255 OID 11285207)
-- Name: _st_coveredby(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_coveredby(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'coveredby';


ALTER FUNCTION public._st_coveredby(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 736 (class 1255 OID 11285208)
-- Name: _st_covers(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_covers(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'geography_covers';


ALTER FUNCTION public._st_covers(geography, geography) OWNER TO postgres;

--
-- TOC entry 737 (class 1255 OID 11285209)
-- Name: _st_covers(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_covers(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'covers';


ALTER FUNCTION public._st_covers(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 738 (class 1255 OID 11285210)
-- Name: _st_crosses(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_crosses(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'crosses';


ALTER FUNCTION public._st_crosses(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 739 (class 1255 OID 11285211)
-- Name: _st_dfullywithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dfullywithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dfullywithin';


ALTER FUNCTION public._st_dfullywithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 740 (class 1255 OID 11285212)
-- Name: _st_distance(geography, geography, double precision, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_distance(geography, geography, double precision, boolean) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'geography_distance';


ALTER FUNCTION public._st_distance(geography, geography, double precision, boolean) OWNER TO postgres;

--
-- TOC entry 741 (class 1255 OID 11285213)
-- Name: _st_dumppoints(geometry, integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) RETURNS SETOF geometry_dump
    LANGUAGE plpgsql
    AS $$
DECLARE
  tmp geometry_dump;
  tmp2 geometry_dump;
  nb_points integer;
  nb_geom integer;
  i integer;
  j integer;
  g geometry;
  typ text;
  
BEGIN
  
  RAISE DEBUG '%,%', cur_path, ST_GeometryType(the_geom);

  -- Special case (MULTI* OR GEOMETRYCOLLECTION) : iterate and return the DumpPoints of the geometries
  SELECT ST_GeometryType(the_geom) INTO typ;

  -- Dont we have an ST_isMulti ?
  IF (typ like 'ST_Multi%' OR typ = 'ST_GeometryCollection') THEN
    
    i = 1;
    FOR tmp2 IN SELECT (ST_Dump(the_geom)).* LOOP

      FOR tmp IN SELECT * FROM _ST_DumpPoints(tmp2.geom, cur_path || tmp2.path) LOOP
	    RETURN NEXT tmp;
      END LOOP;
      i = i + 1;
      
    END LOOP;

    RETURN;
  END IF;
  

  -- Special case (POLYGON) : return the points of the rings of a polygon
  IF (ST_GeometryType(the_geom) = 'ST_Polygon') THEN

    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    j := ST_NumInteriorRings(the_geom);
    FOR i IN 1..j LOOP
        FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_InteriorRingN(the_geom, i), cur_path || ARRAY[i+1]) LOOP
          RETURN NEXT tmp;
        END LOOP;
    END LOOP;
    
    RETURN;
  END IF;

    
  -- Special case (POINT) : return the point
  IF (ST_GeometryType(the_geom) = 'ST_Point') THEN

    tmp.path = cur_path || ARRAY[1];
    tmp.geom = the_geom;

    RETURN NEXT tmp;
    RETURN;

  END IF;


  -- Use ST_NumPoints rather than ST_NPoints to have a NULL value if the_geom isn't
  -- a LINESTRING or CIRCULARSTRING.
  SELECT ST_NumPoints(the_geom) INTO nb_points;

  -- This should never happen
  IF (nb_points IS NULL) THEN
    RAISE EXCEPTION 'Unexpected error while dumping geometry %', ST_AsText(the_geom);
  END IF;

  FOR i IN 1..nb_points LOOP
    tmp.path = cur_path || ARRAY[i];
    tmp.geom := ST_PointN(the_geom, i);
    RETURN NEXT tmp;
  END LOOP;
   
END
$$;


ALTER FUNCTION public._st_dumppoints(the_geom geometry, cur_path integer[]) OWNER TO postgres;

--
-- TOC entry 742 (class 1255 OID 11285214)
-- Name: _st_dwithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dwithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_dwithin';


ALTER FUNCTION public._st_dwithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 743 (class 1255 OID 11285215)
-- Name: _st_dwithin(geography, geography, double precision, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_dwithin(geography, geography, double precision, boolean) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'geography_dwithin';


ALTER FUNCTION public._st_dwithin(geography, geography, double precision, boolean) OWNER TO postgres;

--
-- TOC entry 744 (class 1255 OID 11285216)
-- Name: _st_equals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_equals(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'geomequals';


ALTER FUNCTION public._st_equals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 745 (class 1255 OID 11285217)
-- Name: _st_expand(geography, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_expand(geography, double precision) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_expand';


ALTER FUNCTION public._st_expand(geography, double precision) OWNER TO postgres;

--
-- TOC entry 746 (class 1255 OID 11285218)
-- Name: _st_intersects(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_intersects(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'intersects';


ALTER FUNCTION public._st_intersects(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 747 (class 1255 OID 11285219)
-- Name: _st_linecrossingdirection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_linecrossingdirection(geometry, geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'ST_LineCrossingDirection';


ALTER FUNCTION public._st_linecrossingdirection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 748 (class 1255 OID 11285220)
-- Name: _st_longestline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_longestline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_longestline2d';


ALTER FUNCTION public._st_longestline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 749 (class 1255 OID 11285221)
-- Name: _st_maxdistance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_maxdistance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_maxdistance2d_linestring';


ALTER FUNCTION public._st_maxdistance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 750 (class 1255 OID 11285222)
-- Name: _st_orderingequals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_orderingequals(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_same';


ALTER FUNCTION public._st_orderingequals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 751 (class 1255 OID 11285223)
-- Name: _st_overlaps(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_overlaps(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'overlaps';


ALTER FUNCTION public._st_overlaps(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 752 (class 1255 OID 11285224)
-- Name: _st_pointoutside(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_pointoutside(geography) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_point_outside';


ALTER FUNCTION public._st_pointoutside(geography) OWNER TO postgres;

--
-- TOC entry 753 (class 1255 OID 11285225)
-- Name: _st_touches(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_touches(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'touches';


ALTER FUNCTION public._st_touches(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 754 (class 1255 OID 11285226)
-- Name: _st_within(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION _st_within(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'within';


ALTER FUNCTION public._st_within(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 755 (class 1255 OID 11285227)
-- Name: addauth(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addauth(text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
$_$;


ALTER FUNCTION public.addauth(text) OWNER TO postgres;

--
-- TOC entry 6986 (class 0 OID 0)
-- Dependencies: 755
-- Name: FUNCTION addauth(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addauth(text) IS 'args: auth_token - Add an authorization token to be used in current transaction.';


--
-- TOC entry 756 (class 1255 OID 11285228)
-- Name: addbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_addBBOX';


ALTER FUNCTION public.addbbox(geometry) OWNER TO postgres;

--
-- TOC entry 757 (class 1255 OID 11285229)
-- Name: addgeometrycolumn(character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 6987 (class 0 OID 0)
-- Dependencies: 757
-- Name: FUNCTION addgeometrycolumn(character varying, character varying, integer, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addgeometrycolumn(character varying, character varying, integer, character varying, integer) IS 'args: table_name, column_name, srid, type, dimension - Adds a geometry column to an existing table of attributes.';


--
-- TOC entry 758 (class 1255 OID 11285230)
-- Name: addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 6988 (class 0 OID 0)
-- Dependencies: 758
-- Name: FUNCTION addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) IS 'args: schema_name, table_name, column_name, srid, type, dimension - Adds a geometry column to an existing table of attributes.';


--
-- TOC entry 763 (class 1255 OID 11285234)
-- Name: addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	new_type alias for $6;
	new_dim alias for $7;
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;

BEGIN

	-- Verify geometry type
	IF ( NOT ( (new_type = 'GEOMETRY') OR
			   (new_type = 'GEOMETRYCOLLECTION') OR
			   (new_type = 'POINT') OR
			   (new_type = 'MULTIPOINT') OR
			   (new_type = 'POLYGON') OR
			   (new_type = 'MULTIPOLYGON') OR
			   (new_type = 'LINESTRING') OR
			   (new_type = 'MULTILINESTRING') OR
			   (new_type = 'GEOMETRYCOLLECTIONM') OR
			   (new_type = 'POINTM') OR
			   (new_type = 'MULTIPOINTM') OR
			   (new_type = 'POLYGONM') OR
			   (new_type = 'MULTIPOLYGONM') OR
			   (new_type = 'LINESTRINGM') OR
			   (new_type = 'MULTILINESTRINGM') OR
			   (new_type = 'CIRCULARSTRING') OR
			   (new_type = 'CIRCULARSTRINGM') OR
			   (new_type = 'COMPOUNDCURVE') OR
			   (new_type = 'COMPOUNDCURVEM') OR
			   (new_type = 'CURVEPOLYGON') OR
			   (new_type = 'CURVEPOLYGONM') OR
			   (new_type = 'MULTICURVE') OR
			   (new_type = 'MULTICURVEM') OR
			   (new_type = 'MULTISURFACE') OR
			   (new_type = 'MULTISURFACEM')) )
	THEN
		RAISE EXCEPTION 'Invalid type name - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM,
	or GEOMETRYCOLLECTIONM';
		RETURN 'fail';
	END IF;


	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <0) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;

	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;


	-- Verify SRID
	IF ( new_srid != -1 ) THEN
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumns() - invalid SRID';
			RETURN 'fail';
		END IF;
	END IF;


	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;

	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;

		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;


	-- Add geometry column to table
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD COLUMN ' || quote_ident(column_name) ||
		' geometry ';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Delete stale record in geometry_columns (if any)
	sql := 'DELETE FROM geometry_columns WHERE
		f_table_catalog = ' || quote_literal('') ||
		' AND f_table_schema = ' ||
		quote_literal(real_schema) ||
		' AND f_table_name = ' || quote_literal(table_name) ||
		' AND f_geometry_column = ' || quote_literal(column_name);
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add record in geometry_columns
	sql := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema,f_table_name,' ||
										  'f_geometry_column,coord_dimension,srid,type)' ||
		' VALUES (' ||
		quote_literal('') || ',' ||
		quote_literal(real_schema) || ',' ||
		quote_literal(table_name) || ',' ||
		quote_literal(column_name) || ',' ||
		new_dim::text || ',' ||
		new_srid::text || ',' ||
		quote_literal(new_type) || ')';
	RAISE DEBUG '%', sql;
	EXECUTE sql;


	-- Add table CHECKs
	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_srid_' || column_name)
		|| ' CHECK (ST_SRID(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	sql := 'ALTER TABLE ' ||
		quote_ident(real_schema) || '.' || quote_ident(table_name)
		|| ' ADD CONSTRAINT '
		|| quote_ident('enforce_dims_' || column_name)
		|| ' CHECK (ST_NDims(' || quote_ident(column_name) ||
		') = ' || new_dim::text || ')' ;
	RAISE DEBUG '%', sql;
	EXECUTE sql;

	IF ( NOT (new_type = 'GEOMETRY')) THEN
		sql := 'ALTER TABLE ' ||
			quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
			quote_ident('enforce_geotype_' || column_name) ||
			' CHECK (GeometryType(' ||
			quote_ident(column_name) || ')=' ||
			quote_literal(new_type) || ' OR (' ||
			quote_ident(column_name) || ') is null)';
		RAISE DEBUG '%', sql;
		EXECUTE sql;
	END IF;

	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$_$;


ALTER FUNCTION public.addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) OWNER TO postgres;

--
-- TOC entry 6989 (class 0 OID 0)
-- Dependencies: 763
-- Name: FUNCTION addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) IS 'args: catalog_name, schema_name, table_name, column_name, srid, type, dimension - Adds a geometry column to an existing table of attributes.';


--
-- TOC entry 764 (class 1255 OID 11285235)
-- Name: addpoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addpoint(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.addpoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 765 (class 1255 OID 11285236)
-- Name: addpoint(geometry, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION addpoint(geometry, geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.addpoint(geometry, geometry, integer) OWNER TO postgres;

--
-- TOC entry 766 (class 1255 OID 11285237)
-- Name: affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$_$;


ALTER FUNCTION public.affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 767 (class 1255 OID 11285238)
-- Name: affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_affine';


ALTER FUNCTION public.affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 768 (class 1255 OID 11285239)
-- Name: area(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION area(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.area(geometry) OWNER TO postgres;

--
-- TOC entry 769 (class 1255 OID 11285240)
-- Name: area2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION area2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.area2d(geometry) OWNER TO postgres;

--
-- TOC entry 770 (class 1255 OID 11285241)
-- Name: armor(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION armor(bytea) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_armor';


ALTER FUNCTION public.armor(bytea) OWNER TO postgres;

--
-- TOC entry 771 (class 1255 OID 11285242)
-- Name: asbinary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asbinary(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.asbinary(geometry) OWNER TO postgres;

--
-- TOC entry 772 (class 1255 OID 11285243)
-- Name: asbinary(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asbinary(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.asbinary(geometry, text) OWNER TO postgres;

--
-- TOC entry 773 (class 1255 OID 11285244)
-- Name: asewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asewkb(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.asewkb(geometry) OWNER TO postgres;

--
-- TOC entry 774 (class 1255 OID 11285245)
-- Name: asewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asewkb(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.asewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 775 (class 1255 OID 11285246)
-- Name: asewkt(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asewkt(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asEWKT';


ALTER FUNCTION public.asewkt(geometry) OWNER TO postgres;

--
-- TOC entry 776 (class 1255 OID 11285247)
-- Name: asgml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asgml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, 15, 0, null)$_$;


ALTER FUNCTION public.asgml(geometry) OWNER TO postgres;

--
-- TOC entry 777 (class 1255 OID 11285248)
-- Name: asgml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION asgml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, 0, null)$_$;


ALTER FUNCTION public.asgml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 778 (class 1255 OID 11285249)
-- Name: ashexewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ashexewkb(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.ashexewkb(geometry) OWNER TO postgres;

--
-- TOC entry 779 (class 1255 OID 11285250)
-- Name: ashexewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ashexewkb(geometry, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.ashexewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 780 (class 1255 OID 11285251)
-- Name: askml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION askml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, transform($1,4326), 15, null)$_$;


ALTER FUNCTION public.askml(geometry) OWNER TO postgres;

--
-- TOC entry 781 (class 1255 OID 11285252)
-- Name: askml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION askml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, transform($1,4326), $2, null)$_$;


ALTER FUNCTION public.askml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 782 (class 1255 OID 11285253)
-- Name: askml(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION askml(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, transform($2,4326), $3, null)$_$;


ALTER FUNCTION public.askml(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 783 (class 1255 OID 11285254)
-- Name: astext(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION astext(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asText';


ALTER FUNCTION public.astext(geometry) OWNER TO postgres;

--
-- TOC entry 784 (class 1255 OID 11285255)
-- Name: azimuth(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION azimuth(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_azimuth';


ALTER FUNCTION public.azimuth(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 785 (class 1255 OID 11285256)
-- Name: bdmpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bdmpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := multi(BuildArea(mline));

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.bdmpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 786 (class 1255 OID 11285257)
-- Name: bdpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bdpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.bdpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 787 (class 1255 OID 11285258)
-- Name: boolop(integer[], query_int); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boolop(integer[], query_int) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'boolop';


ALTER FUNCTION public.boolop(integer[], query_int) OWNER TO postgres;

--
-- TOC entry 6990 (class 0 OID 0)
-- Dependencies: 787
-- Name: FUNCTION boolop(integer[], query_int); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION boolop(integer[], query_int) IS 'boolean operation with array';


--
-- TOC entry 788 (class 1255 OID 11285259)
-- Name: boundary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boundary(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'boundary';


ALTER FUNCTION public.boundary(geometry) OWNER TO postgres;

--
-- TOC entry 759 (class 1255 OID 11285260)
-- Name: box(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box(box3d) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_BOX';


ALTER FUNCTION public.box(box3d) OWNER TO postgres;

--
-- TOC entry 760 (class 1255 OID 11285261)
-- Name: box(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box(geometry) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX';


ALTER FUNCTION public.box(geometry) OWNER TO postgres;

--
-- TOC entry 761 (class 1255 OID 11285262)
-- Name: box2d(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d(box3d) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.box2d(box3d) OWNER TO postgres;

--
-- TOC entry 762 (class 1255 OID 11285263)
-- Name: box2d(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d(box3d_extent) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.box2d(box3d_extent) OWNER TO postgres;

--
-- TOC entry 789 (class 1255 OID 11285264)
-- Name: box2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box2d(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.box2d(geometry) OWNER TO postgres;

--
-- TOC entry 6991 (class 0 OID 0)
-- Dependencies: 789
-- Name: FUNCTION box2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION box2d(geometry) IS 'args: geomA - Returns a BOX2D representing the maximum extents of the geometry.';


--
-- TOC entry 790 (class 1255 OID 11285265)
-- Name: box3d(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d(box2d) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_to_BOX3D';


ALTER FUNCTION public.box3d(box2d) OWNER TO postgres;

--
-- TOC entry 791 (class 1255 OID 11285266)
-- Name: box3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d(geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX3D';


ALTER FUNCTION public.box3d(geometry) OWNER TO postgres;

--
-- TOC entry 6992 (class 0 OID 0)
-- Dependencies: 791
-- Name: FUNCTION box3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION box3d(geometry) IS 'args: geomA - Returns a BOX3D representing the maximum extents of the geometry.';


--
-- TOC entry 792 (class 1255 OID 11285267)
-- Name: box3d_extent(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3d_extent(box3d_extent) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_extent_to_BOX3D';


ALTER FUNCTION public.box3d_extent(box3d_extent) OWNER TO postgres;

--
-- TOC entry 793 (class 1255 OID 11285268)
-- Name: box3dtobox(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION box3dtobox(box3d) RETURNS box
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT box($1)$_$;


ALTER FUNCTION public.box3dtobox(box3d) OWNER TO postgres;

--
-- TOC entry 794 (class 1255 OID 11285269)
-- Name: buffer(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION buffer(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'buffer';


ALTER FUNCTION public.buffer(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 795 (class 1255 OID 11285270)
-- Name: buffer(geometry, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION buffer(geometry, double precision, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_Buffer($1, $2, $3)$_$;


ALTER FUNCTION public.buffer(geometry, double precision, integer) OWNER TO postgres;

--
-- TOC entry 796 (class 1255 OID 11285271)
-- Name: buildarea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION buildarea(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_buildarea';


ALTER FUNCTION public.buildarea(geometry) OWNER TO postgres;

--
-- TOC entry 797 (class 1255 OID 11285272)
-- Name: bytea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION bytea(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_bytea';


ALTER FUNCTION public.bytea(geometry) OWNER TO postgres;

--
-- TOC entry 798 (class 1255 OID 11285273)
-- Name: centroid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION centroid(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'centroid';


ALTER FUNCTION public.centroid(geometry) OWNER TO postgres;

--
-- TOC entry 799 (class 1255 OID 11285274)
-- Name: checkauth(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauth(text, text) RETURNS integer
    LANGUAGE sql
    AS $_$ SELECT CheckAuth('', $1, $2) $_$;


ALTER FUNCTION public.checkauth(text, text) OWNER TO postgres;

--
-- TOC entry 6993 (class 0 OID 0)
-- Dependencies: 799
-- Name: FUNCTION checkauth(text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION checkauth(text, text) IS 'args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';


--
-- TOC entry 800 (class 1255 OID 11285275)
-- Name: checkauth(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauth(text, text, text) RETURNS integer
    LANGUAGE plpgsql
    AS $_$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';

	RETURN 0;
END;
$_$;


ALTER FUNCTION public.checkauth(text, text, text) OWNER TO postgres;

--
-- TOC entry 6994 (class 0 OID 0)
-- Dependencies: 800
-- Name: FUNCTION checkauth(text, text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION checkauth(text, text, text) IS 'args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.';


--
-- TOC entry 801 (class 1255 OID 11285276)
-- Name: checkauthtrigger(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION checkauthtrigger() RETURNS trigger
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'check_authorization';


ALTER FUNCTION public.checkauthtrigger() OWNER TO postgres;

--
-- TOC entry 802 (class 1255 OID 11285277)
-- Name: collect(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION collect(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'LWGEOM_collect';


ALTER FUNCTION public.collect(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 803 (class 1255 OID 11285278)
-- Name: combine_bbox(box2d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION combine_bbox(box2d, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_combine';


ALTER FUNCTION public.combine_bbox(box2d, geometry) OWNER TO postgres;

--
-- TOC entry 804 (class 1255 OID 11285279)
-- Name: combine_bbox(box3d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION combine_bbox(box3d, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.combine_bbox(box3d, geometry) OWNER TO postgres;

--
-- TOC entry 805 (class 1255 OID 11285280)
-- Name: combine_bbox(box3d_extent, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION combine_bbox(box3d_extent, geometry) RETURNS box3d_extent
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.combine_bbox(box3d_extent, geometry) OWNER TO postgres;

--
-- TOC entry 806 (class 1255 OID 11285281)
-- Name: compression(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION compression(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getCompression';


ALTER FUNCTION public.compression(chip) OWNER TO postgres;

--
-- TOC entry 807 (class 1255 OID 11285282)
-- Name: connectby(text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION connectby(text, text, text, text, integer) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text';


ALTER FUNCTION public.connectby(text, text, text, text, integer) OWNER TO postgres;

--
-- TOC entry 808 (class 1255 OID 11285283)
-- Name: connectby(text, text, text, text, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION connectby(text, text, text, text, integer, text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text';


ALTER FUNCTION public.connectby(text, text, text, text, integer, text) OWNER TO postgres;

--
-- TOC entry 809 (class 1255 OID 11285284)
-- Name: connectby(text, text, text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION connectby(text, text, text, text, text, integer) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text_serial';


ALTER FUNCTION public.connectby(text, text, text, text, text, integer) OWNER TO postgres;

--
-- TOC entry 810 (class 1255 OID 11285285)
-- Name: connectby(text, text, text, text, text, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION connectby(text, text, text, text, text, integer, text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'connectby_text_serial';


ALTER FUNCTION public.connectby(text, text, text, text, text, integer, text) OWNER TO postgres;

--
-- TOC entry 811 (class 1255 OID 11285286)
-- Name: contains(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION contains(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'contains';


ALTER FUNCTION public.contains(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 812 (class 1255 OID 11285287)
-- Name: convexhull(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION convexhull(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'convexhull';


ALTER FUNCTION public.convexhull(geometry) OWNER TO postgres;

--
-- TOC entry 813 (class 1255 OID 11285288)
-- Name: crosses(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosses(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'crosses';


ALTER FUNCTION public.crosses(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 814 (class 1255 OID 11285289)
-- Name: crosstab(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosstab(text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab';


ALTER FUNCTION public.crosstab(text) OWNER TO postgres;

--
-- TOC entry 815 (class 1255 OID 11285290)
-- Name: crosstab(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosstab(text, integer) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab';


ALTER FUNCTION public.crosstab(text, integer) OWNER TO postgres;

--
-- TOC entry 816 (class 1255 OID 11285291)
-- Name: crosstab(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosstab(text, text) RETURNS SETOF record
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab_hash';


ALTER FUNCTION public.crosstab(text, text) OWNER TO postgres;

--
-- TOC entry 817 (class 1255 OID 11285292)
-- Name: crosstab2(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosstab2(text) RETURNS SETOF tablefunc_crosstab_2
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab';


ALTER FUNCTION public.crosstab2(text) OWNER TO postgres;

--
-- TOC entry 818 (class 1255 OID 11285293)
-- Name: crosstab3(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosstab3(text) RETURNS SETOF tablefunc_crosstab_3
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab';


ALTER FUNCTION public.crosstab3(text) OWNER TO postgres;

--
-- TOC entry 819 (class 1255 OID 11285294)
-- Name: crosstab4(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crosstab4(text) RETURNS SETOF tablefunc_crosstab_4
    LANGUAGE c STABLE STRICT
    AS '$libdir/tablefunc', 'crosstab';


ALTER FUNCTION public.crosstab4(text) OWNER TO postgres;

--
-- TOC entry 820 (class 1255 OID 11285295)
-- Name: crypt(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION crypt(text, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_crypt';


ALTER FUNCTION public.crypt(text, text) OWNER TO postgres;

--
-- TOC entry 821 (class 1255 OID 11285296)
-- Name: datatype(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION datatype(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getDatatype';


ALTER FUNCTION public.datatype(chip) OWNER TO postgres;

--
-- TOC entry 822 (class 1255 OID 11285297)
-- Name: dearmor(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dearmor(text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_dearmor';


ALTER FUNCTION public.dearmor(text) OWNER TO postgres;

--
-- TOC entry 823 (class 1255 OID 11285298)
-- Name: decrypt(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION decrypt(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_decrypt';


ALTER FUNCTION public.decrypt(bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 824 (class 1255 OID 11285299)
-- Name: decrypt_iv(bytea, bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION decrypt_iv(bytea, bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_decrypt_iv';


ALTER FUNCTION public.decrypt_iv(bytea, bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 825 (class 1255 OID 11285300)
-- Name: difference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION difference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'difference';


ALTER FUNCTION public.difference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 826 (class 1255 OID 11285301)
-- Name: digest(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION digest(bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_digest';


ALTER FUNCTION public.digest(bytea, text) OWNER TO postgres;

--
-- TOC entry 827 (class 1255 OID 11285302)
-- Name: digest(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION digest(text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_digest';


ALTER FUNCTION public.digest(text, text) OWNER TO postgres;

--
-- TOC entry 828 (class 1255 OID 11285303)
-- Name: dimension(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dimension(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dimension';


ALTER FUNCTION public.dimension(geometry) OWNER TO postgres;

--
-- TOC entry 829 (class 1255 OID 11285304)
-- Name: disablelongtransactions(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disablelongtransactions() RETURNS text
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN 'Long transactions support disabled';
END;
$$;


ALTER FUNCTION public.disablelongtransactions() OWNER TO postgres;

--
-- TOC entry 6995 (class 0 OID 0)
-- Dependencies: 829
-- Name: FUNCTION disablelongtransactions(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION disablelongtransactions() IS 'Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.';


--
-- TOC entry 830 (class 1255 OID 11285305)
-- Name: disjoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION disjoint(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'disjoint';


ALTER FUNCTION public.disjoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 831 (class 1255 OID 11285306)
-- Name: distance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION distance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_mindistance2d';


ALTER FUNCTION public.distance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 832 (class 1255 OID 11285307)
-- Name: distance_sphere(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION distance_sphere(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_distance_sphere';


ALTER FUNCTION public.distance_sphere(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 833 (class 1255 OID 11285308)
-- Name: distance_spheroid(geometry, geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION distance_spheroid(geometry, geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_distance_ellipsoid';


ALTER FUNCTION public.distance_spheroid(geometry, geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 834 (class 1255 OID 11285309)
-- Name: dropbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dropBBOX';


ALTER FUNCTION public.dropbbox(geometry) OWNER TO postgres;

--
-- TOC entry 835 (class 1255 OID 11285310)
-- Name: dropgeometrycolumn(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying) OWNER TO postgres;

--
-- TOC entry 6996 (class 0 OID 0)
-- Dependencies: 835
-- Name: FUNCTION dropgeometrycolumn(character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrycolumn(character varying, character varying) IS 'args: table_name, column_name - Removes a geometry column from a spatial table.';


--
-- TOC entry 836 (class 1255 OID 11285311)
-- Name: dropgeometrycolumn(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 6997 (class 0 OID 0)
-- Dependencies: 836
-- Name: FUNCTION dropgeometrycolumn(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrycolumn(character varying, character varying, character varying) IS 'args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.';


--
-- TOC entry 837 (class 1255 OID 11285312)
-- Name: dropgeometrycolumn(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrycolumn(character varying, character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Remove ref from geometry_columns table
	EXECUTE 'delete from geometry_columns where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);

	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';

END;
$_$;


ALTER FUNCTION public.dropgeometrycolumn(character varying, character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 6998 (class 0 OID 0)
-- Dependencies: 837
-- Name: FUNCTION dropgeometrycolumn(character varying, character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrycolumn(character varying, character varying, character varying, character varying) IS 'args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.';


--
-- TOC entry 838 (class 1255 OID 11285313)
-- Name: dropgeometrytable(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying) RETURNS text
    LANGUAGE sql STRICT
    AS $_$ SELECT DropGeometryTable('','',$1) $_$;


ALTER FUNCTION public.dropgeometrytable(character varying) OWNER TO postgres;

--
-- TOC entry 6999 (class 0 OID 0)
-- Dependencies: 838
-- Name: FUNCTION dropgeometrytable(character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrytable(character varying) IS 'args: table_name - Drops a table and all its references in geometry_columns.';


--
-- TOC entry 839 (class 1255 OID 11285314)
-- Name: dropgeometrytable(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying, character varying) RETURNS text
    LANGUAGE sql STRICT
    AS $_$ SELECT DropGeometryTable('',$1,$2) $_$;


ALTER FUNCTION public.dropgeometrytable(character varying, character varying) OWNER TO postgres;

--
-- TOC entry 7000 (class 0 OID 0)
-- Dependencies: 839
-- Name: FUNCTION dropgeometrytable(character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrytable(character varying, character varying) IS 'args: schema_name, table_name - Drops a table and all its references in geometry_columns.';


--
-- TOC entry 840 (class 1255 OID 11285315)
-- Name: dropgeometrytable(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dropgeometrytable(character varying, character varying, character varying) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	real_schema name;

BEGIN

	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- Remove refs from geometry_columns table
	EXECUTE 'DELETE FROM geometry_columns WHERE ' ||
		'f_table_schema = ' || quote_literal(real_schema) ||
		' AND ' ||
		' f_table_name = ' || quote_literal(table_name);

	-- Remove table
	EXECUTE 'DROP TABLE '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name);

	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';

END;
$_$;


ALTER FUNCTION public.dropgeometrytable(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 7001 (class 0 OID 0)
-- Dependencies: 840
-- Name: FUNCTION dropgeometrytable(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION dropgeometrytable(character varying, character varying, character varying) IS 'args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.';


--
-- TOC entry 841 (class 1255 OID 11285316)
-- Name: dump(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dump(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dump';


ALTER FUNCTION public.dump(geometry) OWNER TO postgres;

--
-- TOC entry 842 (class 1255 OID 11285317)
-- Name: dumprings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION dumprings(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dump_rings';


ALTER FUNCTION public.dumprings(geometry) OWNER TO postgres;

--
-- TOC entry 843 (class 1255 OID 11285318)
-- Name: enablelongtransactions(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION enablelongtransactions() RETURNS text
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;

BEGIN

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;

	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;

	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;

	RETURN 'Long transactions support enabled';
END;
$$;


ALTER FUNCTION public.enablelongtransactions() OWNER TO postgres;

--
-- TOC entry 7002 (class 0 OID 0)
-- Dependencies: 843
-- Name: FUNCTION enablelongtransactions(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION enablelongtransactions() IS 'Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.';


--
-- TOC entry 844 (class 1255 OID 11285319)
-- Name: encrypt(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION encrypt(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_encrypt';


ALTER FUNCTION public.encrypt(bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 845 (class 1255 OID 11285320)
-- Name: encrypt_iv(bytea, bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION encrypt_iv(bytea, bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_encrypt_iv';


ALTER FUNCTION public.encrypt_iv(bytea, bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 846 (class 1255 OID 11285321)
-- Name: endpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION endpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_endpoint_linestring';


ALTER FUNCTION public.endpoint(geometry) OWNER TO postgres;

--
-- TOC entry 847 (class 1255 OID 11285322)
-- Name: envelope(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION envelope(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_envelope';


ALTER FUNCTION public.envelope(geometry) OWNER TO postgres;

--
-- TOC entry 848 (class 1255 OID 11285323)
-- Name: equals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION equals(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geomequals';


ALTER FUNCTION public.equals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 849 (class 1255 OID 11285324)
-- Name: estimated_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION estimated_extent(text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '$libdir/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.estimated_extent(text, text) OWNER TO postgres;

--
-- TOC entry 850 (class 1255 OID 11285325)
-- Name: estimated_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION estimated_extent(text, text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '$libdir/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.estimated_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 851 (class 1255 OID 11285326)
-- Name: expand(box2d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION expand(box2d, double precision) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_expand';


ALTER FUNCTION public.expand(box2d, double precision) OWNER TO postgres;

--
-- TOC entry 852 (class 1255 OID 11285327)
-- Name: expand(box3d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION expand(box3d, double precision) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_expand';


ALTER FUNCTION public.expand(box3d, double precision) OWNER TO postgres;

--
-- TOC entry 853 (class 1255 OID 11285328)
-- Name: expand(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION expand(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_expand';


ALTER FUNCTION public.expand(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 854 (class 1255 OID 11285329)
-- Name: exteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION exteriorring(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_exteriorring_polygon';


ALTER FUNCTION public.exteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 855 (class 1255 OID 11285330)
-- Name: f_agrupadopor(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_agrupadopor(pagrupadopor text) RETURNS text
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF SUBSTR(UPPER(pAgrupadoPor), 1, 1) = 'M' THEN -- MÊS
    RETURN 'MM/YYYY';
  ELSEIF SUBSTR(UPPER(pAgrupadoPor), 1, 1) = 'A' THEN -- ANO
    RETURN 'YYYY';
  ELSE
    RETURN 'DD/MM';
  END IF;
END ; $$;


ALTER FUNCTION public.f_agrupadopor(pagrupadopor text) OWNER TO postgres;

--
-- TOC entry 856 (class 1255 OID 11285331)
-- Name: f_ajustaperiodo(date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ajustaperiodo(pdtahrini date, pdtahrfim date) RETURNS TABLE(dtahrini date, dtahrfim date, changed boolean)
    LANGUAGE plpgsql
    AS $$
DECLARE
  vChanged BOOL;
  vDtaHrIni DATE;
  vDtaHrFim DATE;
  vMaxDtaHrFim DATE;
BEGIN
  vChanged := FALSE;

  IF (pDtaHrIni > pDtaHrFim) THEN
    vDtaHrIni := pDtaHrFim;
    vDtaHrFim := pDtaHrIni;
  ELSE
    vDtaHrIni := pDtaHrIni;
    vDtaHrFim := pDtaHrFim;
  END IF;

  vMaxDtaHrFim := vDtaHrIni + 45;

  IF (vDtaHrFim > vMaxDtaHrFim) THEN
    vChanged := TRUE;
    vDtaHrFim := vMaxDtaHrFim;
  END IF;

  RETURN QUERY SELECT vDtaHrIni, vDtaHrFim, vChanged;
END ; $$;


ALTER FUNCTION public.f_ajustaperiodo(pdtahrini date, pdtahrfim date) OWNER TO postgres;

--
-- TOC entry 857 (class 1255 OID 11285332)
-- Name: f_alvoembarquecarga(bigint, timestamp with time zone, numeric, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_alvoembarquecarga(pcodembarque bigint, pdtahr timestamp with time zone, plong numeric, plat numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	vCurRec RECORD;
	vContains BOOLEAN;
	
	vStatEmViagem INTEGER DEFAULT 2;
	vStatFinalizado INTEGER DEFAULT 3;
	vStatSinistrado INTEGER DEFAULT 4;
	vStatCancelado INTEGER DEFAULT 5;
	
	vStatCargaNaPlanta INTEGER DEFAULT 11;
	vStatCargaNoDestino INTEGER DEFAULT 18;
	
	vUsrIntegrador INTEGER DEFAULT 2;
	
	vTpOperCircuito INTEGER DEFAULT 18;
	
	vUsarRastreamento BOOLEAN DEFAULT TRUE;
	vCodTpOper INTEGER DEFAULT NULL;

	vEmp Emp;
BEGIN

	-- verificando se o tipo de operacao do embarque considera rastreamento
	SELECT Embarque.CodTpOper INTO vCodTpOper FROM Embarque WHERE Embarque.CodEmbarque = pCodEmbarque;
	
	-- se nao for nulo
	IF vCodTpOper IS NOT NULL THEN
		SELECT TpOper.UsarRastreamento INTO vUsarRastreamento FROM TpOper WHERE TpOper.CodTpOper = vCodTpOper;
	END IF;

	-- se for para usar o rastreamento para alvos
	IF vUsarRastreamento = TRUE THEN
		FOR vCurRec IN
			-- pegando embarquecargas que nao estao finalizadas, sinistradas ou canceladas
			SELECT 
				EmbarqueCarga.CodEmbarque,
				EmbarqueCarga.CodEmbarqueCarga,
				EmbarqueCarga.CodEmpOrig,
				EmbarqueCarga.CodEmpDest,
				EmbarqueCarga.DtaHrIniColeta, 
				EmbarqueCarga.DtaHrFimColeta,
				EmbarqueCarga.DtaHrIniEntrega,
				EmbarqueCarga.DtaHrFimEntrega,
				COALESCE(EmbarqueCarga.EmpOrig_Pos_Area, Embarque.EmpOrig_Pos_Area) AS EmpOrig_Pos_Area,
				COALESCE(EmbarqueCarga.EmpDest_Pos_Area, Embarque.EmpDest_Pos_Area) AS EmpDest_Pos_Area,
				EmbarqueCarga.CodEmpTNF,
				EmbarqueCarga.DtaHrIniTNF,
				EmbarqueCarga.DtaHrFimTNF,
				EmbarqueCarga.EmpTNF_Pos_Area,
				Embarque.DtaHrIniPlanta,
				Embarque.DtaHrIniDestino,
				Embarque.DtaHrIni,
				Embarque.DtaHrFim
			FROM 
				Embarque
			LEFT JOIN EmbarqueCarga ON Embarque.CodEmbarque = EmbarqueCarga.CodEmbarque
			WHERE
				Embarque.CodEmbarque = pCodEmbarque AND
				Embarque.CodStatEmbarque NOT IN (vStatFinalizado,vStatSinistrado,vStatCancelado)
			ORDER BY 2 DESC
		
		LOOP
			-- verifica se entrou no alvo de origem
			vContains := ST_Contains(vCurRec.EmpOrig_Pos_Area, ST_SetSRID(ST_Point(pLong, pLat), 29101));
			
			-- --------------------------- SE TEM CODIGO DE CARGA (não é um embarque vazio) ---------------------------------
			IF vCurRec.CodEmbarqueCarga IS NOT NULL THEN
				-- --------------------------- ORIGEM ---------------------------------
				-- se entrou no alvo e nao tem inicio da coleta
				IF vContains AND vCurRec.DtaHrIniColeta IS NULL THEN
					-- atualiza a data de inicio de coleta
					UPDATE EmbarqueCarga SET DtaHrIniColeta = pDtaHr
					WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga;
					
					-- atualizamos a carga para o status "NA PLANTA"
					UPDATE Carga
					SET CodStatCarga = vStatCargaNaPlanta, CodUsrStatCarga = vUsrIntegrador, DtaHrStatCarga = pDtaHr
					WHERE
						CodStatCarga <> vStatCargaNaPlanta
						AND CodCarga IN (
							SELECT EmbarqueCarga.CodCarga FROM EmbarqueCarga
							WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga
						);
					
					-- chamamos a funcao de passar de etapa
					PERFORM f_registrarEvento(CAST(vCurRec.CodEmbarque AS INT), CAST(f_config('TPEVENTO_ENTRADA_ORIGEM') AS INT), CAST(vCurRec.CodEmpOrig AS INT), pDtaHr, pLong, pLat);
					
					-- se a data/hora de inicio da entrega for menor que a data/hora
					-- de inicio da coleta, vamos zerar os campos
					IF vCurRec.DtaHrIniEntrega IS NOT NULL AND pDtaHr > vCurRec.DtaHrIniEntrega THEN
						UPDATE EmbarqueCarga SET DtaHrIniEntrega = NULL, DtaHrFimEntrega = NULL
						WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga;
					END IF;

					-- 22/05/2013 - hugo - atualizando o inicio na planta
					UPDATE Embarque
					SET DtaHrIniPlanta = pDtaHr
					WHERE DtaHrIniPlanta IS NULL
						AND Embarque.Codembarque = vCurRec.CodEmbarque;
					
				
				-- se saiu do alvo e nao tem fim de coleta e tem inicio de coleta
				ELSIF NOT vContains AND vCurRec.DtaHrIniColeta IS NOT NULL AND vCurRec.DtaHrFimColeta IS NULL THEN
					IF pDtaHr > vCurRec.DtaHrIniColeta THEN
						-- atualiza a data de fim de coleta
						UPDATE EmbarqueCarga SET DtaHrFimColeta = pDtaHr
						WHERE  EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga;
						
						-- atualiza o embarque para EM VIAGEM
						UPDATE Embarque SET CodStatEmbarque = vStatEmViagem, DtaHrIni = pDtaHr, CodUsrStatEmbarque = vUsrIntegrador
						WHERE CodEmbarque = pCodEmbarque
							AND CodStatEmbarque NOT IN(vStatFinalizado,vStatSinistrado,vStatCancelado, vStatEmViagem);

						-- 07/05/2014 - Hugo
						-- OS 36
						-- chamamos a funcao para atualizar as datas
						PERFORM f_recalcularPrevisaoEntregaEmbarque(vCurRec.CodEmbarque::INTEGER, pDtaHr);
						
						-- chamamos a funcao de passar de etapa
						PERFORM f_registrarEvento(CAST(vCurRec.CodEmbarque AS INT), CAST(f_config('TPEVENTO_SAIDA_ORIGEM') AS INT), CAST(vCurRec.CodEmpOrig AS INT), pDtaHr, pLong, pLat);
					END IF;
				END IF;
				
				
				-- --------------------------- TNF ---------------------------------
				-- verifica se entrou no alvo de origem
				vContains := ST_Contains(vCurRec.EmpTNF_Pos_Area, ST_SetSRID(ST_Point(pLong, pLat), 29101));
				
				-- se entrou no alvo e nao tem inicio de TNF
				IF vContains AND vCurRec.DtaHrIniTNF IS NULL THEN
					-- atualiza a data de inicio de TNF
					-- O status da carga vai mudar para "EM TNF" na trigger de embarquecarga
					-- como ate o momento so temos as cargas de origem, atualizamos a entrada no cliente tambem
					UPDATE EmbarqueCarga SET DtaHrIniTNF = pDtaHr, DtaHrIniEntrega = CASE WHEN Carga.CodCargaOrigem IS NULL THEN COALESCE(EmbarqueCarga.DtaHrIniEntrega, pDtaHr) ELSE NULL END
					FROM Carga
					WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga
						AND EmbarqueCarga.CodCarga = Carga.CodCarga;
					
				-- se saiu do alvo e tem inicio de TNF e nao tem fim de TNF
				ELSIF NOT vContains AND vCurRec.DtaHrIniTNF IS NOT NULL AND vCurRec.DtaHrFimTNF IS NULL THEN
					-- atualiza a data de TNF
					-- O status da carga vai mudar para "REALIZADO" na trigger de embarquecarga
					UPDATE EmbarqueCarga SET DtaHrFimTNF = pDtaHr, DtaHrFimEntrega = CASE WHEN Carga.CodCargaOrigem IS NULL THEN COALESCE(EmbarqueCarga.DtaHrFimEntrega, pDtaHr) ELSE NULL END
					FROM Carga
					WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga
						AND EmbarqueCarga.CodCarga = Carga.CodCarga;
					
				END IF;
				
				-- --------------------------- DESTINO ---------------------------------
				-- verifica se entrou no alvo de destino
				vContains := ST_Contains(vCurRec.EmpDest_Pos_Area, ST_SetSRID(ST_Point(pLong, pLat), 29101));
				
				-- se entrou no alvo e nao tem inicio da entrega
				IF vContains AND vCurRec.DtaHrIniEntrega IS NULL THEN
					-- atualiza a data de inicio de entrega
					UPDATE EmbarqueCarga SET DtaHrIniEntrega = pDtaHr
					WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga;
					
					-- chamamos a funcao de passar de etapa
					PERFORM f_registrarEvento(CAST(vCurRec.CodEmbarque AS INT), CAST(f_config('TPEVENTO_ENTRADA_DESTINO') AS INT), CAST(vCurRec.CodEmpDest AS INT), pDtaHr, pLong, pLat);

					-- 22/05/2013 - hugo - atualizando o inicio no destino
					UPDATE Embarque
					SET DtaHrIniDestino = pDtaHr
					WHERE DtaHrIniDestino IS NULL
						AND Embarque.Codembarque = vCurRec.CodEmbarque
						AND Embarque.CodEmpDest = vCurRec.CodEmpDest;
						
					
					-- atualizamos a carga para o status "NO DESTINO"
					UPDATE Carga
					SET CodStatCarga = vStatCargaNoDestino, CodUsrStatCarga = vUsrIntegrador, DtaHrStatCarga = pDtaHr
					WHERE
						CodStatCarga <> vStatCargaNoDestino
						AND CodCarga IN (
							SELECT EmbarqueCarga.CodCarga FROM EmbarqueCarga
							WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga
						);
						
					-- se for circuito e for um fornecedor, encerra o embarque e emite o proximo
					IF vCodTpOper = vTpOperCircuito THEN
						SELECT * 
						INTO vEmp
						FROM Emp
						WHERE Emp.CodEmp = vCurRec.CodEmpDest;

						IF vEmp.Forn = TRUE THEN
							-- atualiza a data de fim de entrega
							UPDATE EmbarqueCarga SET DtaHrFimEntrega = pDtaHr
							WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga;
							
							-- chamamos a funcao de passar de etapa
							PERFORM f_registrarEvento(CAST(vCurRec.CodEmbarque AS INT), CAST(f_config('TPEVENTO_SAIDA_DESTINO') AS INT), CAST(vCurRec.CodEmpOrig AS INT), pDtaHr, pLong, pLat);

							-- finaliza o embarque
							UPDATE
								Embarque
							SET
								CodStatEmbarque = vStatFinalizado,
								DtaHrFim = pDtaHr,
								CodUsrStatEmbarque = vUsrIntegrador
							WHERE
								Embarque.CodEmbarque = pCodEmbarque
								AND Embarque.CodStatEmbarque NOT IN (vStatCancelado, vStatSinistrado, vStatFinalizado);
						END IF;
					END IF;
					
				-- se saiu do alvo e nao tem fim de entrega e tem inicio de entrega
				ELSIF NOT vContains AND vCurRec.DtaHrIniEntrega IS NOT NULL AND vCurRec.DtaHrFimEntrega IS NULL THEN
					IF pDtaHr > vCurRec.DtaHrIniEntrega THEN
						-- atualiza a data de fim de entrega
						UPDATE EmbarqueCarga SET DtaHrFimEntrega = pDtaHr
						WHERE EmbarqueCarga.CodEmbarqueCarga = vCurRec.CodEmbarqueCarga;
						
						-- chamamos a funcao de passar de etapa
						PERFORM f_registrarEvento(CAST(vCurRec.CodEmbarque AS INT), CAST(f_config('TPEVENTO_SAIDA_DESTINO') AS INT), CAST(vCurRec.CodEmpOrig AS INT), pDtaHr, pLong, pLat);
						
						-- se o inicio/fim de coleta estiverem preenchidos
						IF vCurRec.DtaHrIniColeta IS NOT NULL AND vCurRec.DtaHrFimColeta IS NOT NULL THEN
							-- finaliza o embarque se todas as cargas estiverem
							-- com os horarios preenchidos.
							UPDATE
								Embarque
							SET
								CodStatEmbarque = vStatFinalizado,
								DtaHrFim = pDtaHr,
								CodUsrStatEmbarque = vUsrIntegrador
							WHERE
								Embarque.CodEmbarque = pCodEmbarque
								AND Embarque.CodStatEmbarque NOT IN (vStatCancelado, vStatSinistrado, vStatFinalizado)
								AND Embarque.CodEmbarque NOT IN (
									SELECT
										CodEmbarque
									FROM
										EmbarqueCarga
									WHERE
										EmbarqueCarga.CodEmbarque = pCodEmbarque
										AND (
											EmbarqueCarga.DtaHrIniColeta IS NULL
											OR EmbarqueCarga.DtaHrFimColeta IS NULL
											OR EmbarqueCarga.DtaHrIniEntrega IS NULL
											OR EmbarqueCarga.DtaHrFimEntrega IS NULL
										)
								);
						END IF;
					END IF;
				END IF;
				
			-- --------------------------- É UM EMBARQUE SEM CARGAS ---------------------------------
			ELSE
				-- ---------------- PLANTA DE ORIGEM
				vContains := ST_Contains(vCurRec.EmpOrig_Pos_Area, ST_SetSRID(ST_Point(pLong, pLat), 29101));
				
				IF vContains AND vCurRec.DtaHrIniPlanta IS NULL THEN
					UPDATE Embarque SET DtaHrIniPlanta = pDtaHr, CodUsrStatEmbarque = vUsrIntegrador
					WHERE CodEmbarque = pCodEmbarque
						AND CodStatEmbarque NOT IN(vStatFinalizado,vStatSinistrado,vStatCancelado, vStatEmViagem);
						
				ELSIF NOT vContains AND vCurRec.DtaHrIniPlanta IS NOT NULL AND vCurRec.DtaHrIni IS NULL THEN
					UPDATE Embarque SET CodStatEmbarque = vStatEmViagem, DtaHrIni = pDtaHr, CodUsrStatEmbarque = vUsrIntegrador
					WHERE CodEmbarque = pCodEmbarque
						AND CodStatEmbarque NOT IN(vStatFinalizado,vStatSinistrado,vStatCancelado, vStatEmViagem);
				END IF;
				
				-- ---------------- PLANTA DE DESTINO
				vContains := ST_Contains(vCurRec.EmpDest_Pos_Area, ST_SetSRID(ST_Point(pLong, pLat), 29101));
				
				IF vContains AND vCurRec.DtaHrIniDestino IS NULL THEN
					UPDATE Embarque SET DtaHrIniDestino = pDtaHr, CodUsrStatEmbarque = vUsrIntegrador
					WHERE CodEmbarque = pCodEmbarque
						AND CodStatEmbarque NOT IN(vStatFinalizado,vStatSinistrado,vStatCancelado);

					-- se for circuito, encerra o embarque e emite o proximo
					IF vCodTpOper = vTpOperCircuito THEN
						UPDATE
							Embarque
						SET
							CodStatEmbarque = vStatFinalizado,
							DtaHrFim = pDtaHr,
							CodUsrStatEmbarque = vUsrIntegrador
						WHERE
							Embarque.CodEmbarque = pCodEmbarque
							AND Embarque.CodStatEmbarque NOT IN (vStatCancelado, vStatSinistrado, vStatFinalizado);
					END IF;
						
				ELSIF NOT vContains AND vCurRec.DtaHrIniDestino IS NOT NULL AND vCurRec.DtaHrFim IS NULL THEN
					UPDATE
						Embarque
					SET
						CodStatEmbarque = vStatFinalizado,
						DtaHrFim = pDtaHr,
						CodUsrStatEmbarque = vUsrIntegrador
					WHERE
						Embarque.CodEmbarque = pCodEmbarque
						AND Embarque.CodStatEmbarque NOT IN (vStatCancelado, vStatSinistrado, vStatFinalizado);
				END IF;
			END IF;
		END LOOP;
	END IF;
END
$$;


ALTER FUNCTION public.f_alvoembarquecarga(pcodembarque bigint, pdtahr timestamp with time zone, plong numeric, plat numeric) OWNER TO postgres;

--
-- TOC entry 1675 (class 1255 OID 11292095)
-- Name: f_alvotpevento(bigint, timestamp with time zone, numeric, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_alvotpevento(pcodembarque bigint, pdtahr timestamp with time zone, plong numeric, plat numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    vRec RECORD;
    vEvento RECORD;
    vContains BOOLEAN;
    vCodIntegrador INTEGER := 2;

    vCodStatCarga INTEGER;
    vCodStatEmbarque INTEGER;

  BEGIN

    FOR vRec IN
        SELECT TpEventoEmbarque.CodTpEventoEmbarque,
               TpEventoEmbarque.CodTpEvento,
               TpEventoEmbarque.CodTpEventoCjto,
               TpEventoEmbarque.IniciadoPosAlvo,
               TpEventoEmbarque.DtaHrIni,
               TpEventoEmbarque.DtaHrFim,
               TpEventoEmbarque.CodEmp,
               TpEventoEmbarque.CodTpEventoCjto,
               TpEventoEmp.Pos_Area,
               TpEventoEmbarque.OrdemExec as Ordem,
               TpEvento.Nome,
               TpEvento.ProxCodStatCarga,
               TpEvento.ProxCodStatEmbarque
          FROM TpEventoEmbarque,
               TpEventoEmp,
               TpEvento
         WHERE TpEventoEmp.CodEmp = TpEventoEmbarque.CodEmp
           AND TpEventoEmp.CodTpEvento = TpEventoEmbarque.CodTpEvento
           AND TpEventoEmbarque.DtaHrFim IS NULL
           AND TpEventoEmbarque.CodEmbarque = pCodEmbarque
           AND TpEventoEmp.Pos_Area IS NOT NULL
           AND TpEventoEmp.Ativo
           AND TpEvento.CodTpEvento = TpEventoEmbarque.CodTpEvento
    LOOP
      vContains := ST_Contains(vRec.Pos_Area, ST_SetSRID(ST_Point(pLong, pLat), 29101));

      IF vContains AND (vRec.DtaHrIni IS NULL OR vRec.IniciadoPosAlvo = FALSE) THEN
        UPDATE TpEventoEmbarque
           SET DtaHrIni = COALESCE(vRec.DtaHrIni, pDtaHr),
               IniciadoPosAlvo = TRUE,
               CodUsr = vCodIntegrador
         WHERE TpEventoEmbarque.CodTpEventoEmbarque = vRec.CodTpEventoEmbarque;

         UPDATE Embarque
            SET CodTpEvento = vRec.CodTpEvento,
                TpEvento_Nome = vRec.Nome
          WHERE Embarque.CodEmbarque = pCodEmbarque
            AND Embarque.CodTpEvento != vRec.CodTpEvento;

        -- finaliza o evento anterior caso esteja em aberto
         UPDATE TpEventoEmbarque
            SET DtaHrFim = NOW()
          WHERE TpEventoEmbarque.CodEmbarque = pCodEmbarque
            AND TpEventoEmbarque.CodEmp = vRec.CodEmp
            AND TpEventoEmbarque.OrdemExec = vRec.Ordem - 1
            AND DtaHrIni IS NOT NULL
            AND DtaHrFim IS NULL;

         vCodStatEmbarque := vRec.ProxCodStatEmbarque;
         vCodStatCarga := vRec.ProxCodStatCarga;
      END IF;

      IF NOT vContains AND vRec.DtaHrIni IS NOT NULL AND vRec.IniciadoPosAlvo THEN
        -- finaliza o evento
        UPDATE TpEventoEmbarque
           SET DtaHrFim = pDtaHr,
               CodUsr = vCodIntegrador
         WHERE TpEventoEmbarque.CodTpEventoEmbarque = vRec.CodTpEventoEmbarque;

        -- pega o proximo da mesma empresa
         SELECT TpEventoEmbarque.CodTpEventoEmbarque,
                TpEventoEmp.CodTpEvento,
                TpEventoEmp.CodEmp,
                TpEventoEmp.Ordem,
                TpEvento.Nome,
                TpEvento.ProxCodStatEmbarque,
                TpEvento.ProxCodStatCarga
           INTO vEvento
           FROM TpEventoEmp,
                TpEvento,
                TpEventoEmbarque
          WHERE TpEventoEmp.Ordem = vRec.Ordem + 1
            AND TpEventoEmp.CodTpEvento = TpEvento.CodTpEvento
            AND TpEvento.CodTpEventoCjto = vRec.CodTpEventoCjto
            AND TpEventoEmp.CodEmp = vRec.CodEmp
            AND TpEventoEmbarque.CodTpEvento = TpEvento.CodTpEvento
            AND TpEventoEmbarque.CodEmbarque = pCodEmbarque
            AND TpEventoEmbarque.CodEmp = vRec.CodEmp
          LIMIT 1;

        -- se nao encontrar, pega o proximo de outra empresa
        IF vEvento.CodTpEventoEmbarque IS NULL THEN
             SELECT TpEventoEmbarque.CodTpEventoEmbarque,
                    TpEventoEmbarque.CodTpEvento,
                    TpEventoEmbarque.CodEmp,
                    TpEvento.Nome,
                    TpEvento.ProxCodStatEmbarque,
                    TpEvento.ProxCodStatCarga
               INTO vEvento
               FROM TpEventoEmbarque,
                    TpEvento
              WHERE TpEventoEmbarque.CodTpEvento = TpEvento.CodTpEvento
                AND TpEventoEmbarque.CodEmp != vRec.CodEmp
                AND TpEventoEmbarque.CodEmbarque = pCodEmbarque
           ORDER BY TpEventoEmbarque.DtaHrPrevIni ASC
              LIMIT 1;
        END IF;

        IF vEvento.CodTpEventoEmbarque IS NOT NULL THEN
          UPDATE Embarque
             SET CodTpEvento = vEvento.CodTpEvento,
                 TpEvento_Nome = vEvento.Nome
           WHERE Embarque.CodEmbarque = pCodEmbarque;

          UPDATE TpEventoEmbarque
             SET DtaHrIni = pDtaHr
           WHERE TpEventoEmbarque.CodTpEventoEmbarque = vEvento.CodTpEventoEmbarque;

          vCodStatEmbarque := vEvento.ProxCodStatEmbarque;
          vCodStatCarga := vEvento.ProxCodStatCarga;
        ELSE
          UPDATE Embarque
             SET CodTpEvento = NULL,
                 TpEvento_Nome = ''
           WHERE Embarque.CodEmbarque = pCodEmbarque;
        END IF;

        IF COALESCE(vCodStatEmbarque, -1) > -1 THEN
          UPDATE Embarque
             SET CodStatEmbarque = vCodStatEmbarque,
                 CodUsrAlter = vCodIntegrador,
                 DtaHrAlter = pDtaHr,
                 DtaHrStatEmbarque = pDtaHr
           WHERE Embarque.CodEmbarque = pCodEmbarque
             AND Embarque.CodStatEmbarque != vCodStatEmbarque;
        END IF;

        IF COALESCE(vCodStatCarga, -1) > -1 THEN
          UPDATE Carga
             SET CodStatCarga = vCodStatCarga,
                 CodUsrAlter = vCodIntegrador,
                 DtaHrAlter = pDtaHr,
                 DtaHrStatCarga = pDtaHr
           WHERE Carga.CodCarga IN (
                  SELECT EmbarqueCarga.CodCarga
                    FROM EmbarqueCarga
                   WHERE EmbarqueCarga.CodEmbarque = pCodEmbarque
                 )
             AND Carga.CodStatCarga != vCodStatCarga;
        END IF;
      END IF;
    END LOOP;
  END;
$$;


ALTER FUNCTION public.f_alvotpevento(pcodembarque bigint, pdtahr timestamp with time zone, plong numeric, plat numeric) OWNER TO postgres;

--
-- TOC entry 858 (class 1255 OID 11285334)
-- Name: f_atualizaagendamentorealizado(character varying, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizaagendamentorealizado(ptipo character varying, pcodigo bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$

  DECLARE
    vAgendamento INTEGER := -1;
    vRec RECORD;
  BEGIN
    IF pTipo = 'EMBARQUE' THEN
       FOR vRec IN SELECT IsAgendamento, DtaHrAgendamento
                     FROM Carga
                     JOIN EmbarqueCarga ON EmbarqueCarga.CodCarga = Carga.CodCarga
                    WHERE EmbarqueCarga.CodEmbarque = pCodigo
       LOOP
         IF vRec.IsAgendamento AND vAgendamento = -1 THEN
           vAgendamento := 1;
         END IF;

         IF vRec.IsAgendamento AND vAgendamento != 0 AND vRec.DtaHrAgendamento IS NULL THEN
           vAgendamento := 0;
         END IF;
       END LOOP;

       UPDATE Embarque
          SET agendamento_realizado = vAgendamento,
              CargaAgendada = vAgendamento > -1
        WHERE Embarque.CodEmbarque = pCodigo;
    END IF;

    IF pTipo = 'COLETA' THEN
       FOR vRec IN SELECT IsAgendamento, DtaHrAgendamento
                     FROM Carga
                     JOIN ProgColetaCarga ON ProgColetaCarga.CodCarga = Carga.CodCarga
                    WHERE ProgColetaCarga.CodProgColeta = pCodigo
       LOOP
         IF vRec.IsAgendamento AND vAgendamento = -1 THEN
           vAgendamento := 1;
         END IF;

         IF vRec.IsAgendamento AND vAgendamento != 0 AND vRec.DtaHrAgendamento IS NULL THEN
           vAgendamento := 0;
         END IF;
       END LOOP;

       UPDATE ProgColeta
          SET agendamento_realizado = vAgendamento,
              CargaAgendada = vAgendamento > -1
        WHERE ProgColeta.CodProgColeta = pCodigo;
    END IF;

    RETURN TRUE;
  END;  
$$;


ALTER FUNCTION public.f_atualizaagendamentorealizado(ptipo character varying, pcodigo bigint) OWNER TO postgres;

--
-- TOC entry 859 (class 1255 OID 11285335)
-- Name: f_atualizadatasembarque(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizadatasembarque(pcodembarque bigint) RETURNS void
    LANGUAGE plpgsql
    AS $$

  DECLARE
    vDtaPrevIniColeta TIMESTAMPTZ;
    vDtaPrevIniViagem TIMESTAMPTZ;
    vDtaPrevFim TIMESTAMPTZ;
    vQtdAgendamento INTEGER;
    vTnf BOOLEAN;

  BEGIN
    SELECT DefineTnf
      INTO vTnf
      FROM TpOper,
           Embarque
     WHERE Embarque.CodEmbarque = pCodEmbarque
       AND TpOper.CodTpOper = Embarque.CodTpOper;

    CREATE TEMP TABLE tmp_cargas AS
    SELECT EmbarqueCarga.DtaHrPrevColeta,
           EmbarqueCarga.DtaHrPrevFimColeta,
           EmbarqueCarga.DtaHrPrevEntrega,
           Embarque.Agendamento_Realizado,
           Carga.CodCargaOrigem
      FROM EmbarqueCarga,
           Embarque,
           Carga
     WHERE EmbarqueCarga.CodEmbarque = pCodEmbarque
       AND Embarque.CodEmbarque = pCodEmbarque
       AND Carga.CodCarga = EmbarqueCarga.CodCarga;

    SELECT COUNT(*)
      INTO vQtdAgendamento
      FROM tmp_cargas
     WHERE Agendamento_Realizado > -1;

    SELECT MIN(DtaHrPrevColeta)
      INTO vDtaPrevIniColeta
      FROM tmp_cargas;

    SELECT MIN(DtaHrPrevFimColeta)
      INTO vDtaPrevIniViagem
      FROM tmp_cargas;

    IF vQtdAgendamento = 0 THEN
      SELECT MAX(DtaHrPrevEntrega)
        INTO vDtaPrevFim
        FROM tmp_cargas;
    ELSE
      IF vTnf THEN
        SELECT MIN(DtaHrPrevEntrega)
          INTO vDtaPrevFim
          FROM tmp_cargas
         WHERE CodCargaOrigem IS NOT NULL;
      ELSE
        SELECT MIN(DtaHrPrevEntrega)
          INTO vDtaPrevFim
          FROM tmp_cargas;
      END IF;
    END IF;

    UPDATE Embarque
       SET DtaHrPrevIniColeta = vDtaPrevIniColeta,
           DtaHrPrevIni = vDtaPrevIniViagem,
           DtaHrPrevFim = vDtaPrevFim
     WHERE Embarque.CodEmbarque = pCodEmbarque;
     
    DROP TABLE tmp_cargas;
  END;
$$;


ALTER FUNCTION public.f_atualizadatasembarque(pcodembarque bigint) OWNER TO postgres;

--
-- TOC entry 862 (class 1255 OID 11285336)
-- Name: f_atualizaembarque(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizaembarque(pcodembarque integer, pcodusralter integer) RETURNS void
    LANGUAGE plpgsql
    AS $$


DECLARE
	vEmbarque RECORD;
	vPos RECORD;
	vTotal INT;

BEGIN

	SELECT COUNT(*)
	INTO vTotal
	FROM Embarque
	WHERE Embarque.CodEmbarque = pCodEmbarque;
	
	IF vTotal = 0 THEN
		RAISE EXCEPTION 'Nenhum embarque encontrado com o codigo #', pCodEmbarque;
	END IF;

	SELECT
		Veic_IdEquipRastr AS idEquip
		, Veic_Id as idVeic
		, Veic_CodTecRastr as codTecRastr
		, DtaHrIncl as DtaHrIni
		, NOW() as DtaHrFim
	INTO vEmbarque
	FROM Embarque
	WHERE Embarque.CodEmbarque = pCodEmbarque;
	
	UPDATE Embarque
	SET
		DtaHrIni = NULL
		, DtaHrFim = NULL
		, CodStatEmbarque = 1
 		, DtaHrRetorno = NULL
		, DtaHrAtrasado = NULL
	WHERE Embarque.CodEmbarque = pCodEmbarque;
	
	UPDATE EmbarqueCarga
	SET
		DtaHrIniColeta = NULL
		, DtaHrFimColeta = NULL
		, DtaHrIniEntrega = NULL
		, DtaHrFimEntrega = NULL
	WHERE EmbarqueCarga.CodEmbarque = pCodEmbarque;
	
	UPDATE Carga
	SET CodStatCarga = 2
		, DtaHrIni = NULL
		, DtaHrFim = NULL
	WHERE CodCarga IN (SELECT CodCarga FROM EmbarqueCarga WHERE EmbarqueCarga.CodEmbarque = pCodEmbarque);
	
		DELETE FROM Evento WHERE Evento.CodEmbarque = pCodEmbarque;
	
	FOR vPos IN
		SELECT * FROM f_pos_ex(vEmbarque.codTecRastr, vEmbarque.idEquip, vEmbarque.DtaHrIni, vEmbarque.DtaHrFim)
	LOOP
		PERFORM f_alvoembarquecarga(pCodEmbarque, vPos.DtaHr, vPos.long, vPos.lat);
	END LOOP;
	
	UPDATE Embarque
	SET CodUsrAlter = pCodUsrAlter, DtaHrAlter = NOW()
	WHERE Embarque.CodEmbarque = pCodEmbarque;

END
$$;


ALTER FUNCTION public.f_atualizaembarque(pcodembarque integer, pcodusralter integer) OWNER TO postgres;

--
-- TOC entry 863 (class 1255 OID 11285337)
-- Name: f_atualizaembarquespendentes(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizaembarquespendentes() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
	UPDATE
		Embarque
	SET 
		CodStatEmbarque = 6
		, DescrStatEmbarque = (SELECT descr FROM StatEmbarque WHERE CodStatEmbarque = 6)
	WHERE
		Embarque.DtaHrFim IS NULL 
		AND Embarque.DtaHrCancelado IS NULL
		AND Embarque.DtaHrSinistrado IS NULL
		AND NOW() > (Embarque.DtaHrPrevFim + CAST( (SELECT COALESCE(Config.VlrAtual, Config.VlrPadrao) FROM Config WHERE  Config.Nome = 'TOLERANCIA_PENDENCIA_DE_FINALIZACAO') || ' minutes' as interval ) );
END;
$$;


ALTER FUNCTION public.f_atualizaembarquespendentes() OWNER TO postgres;

--
-- TOC entry 864 (class 1255 OID 11285341)
-- Name: f_atualizafilabid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizafilabid(pcodbid integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE
BEGIN

  UPDATE bid
     SET prox_transp = p.ordem
    FROM (
          SELECT codbid, ordem, (pctprev - pctreal)::numeric(10,3) as gap
          FROM bid_transp
          WHERE codbid = pCodBid
          ORDER BY 3 DESC, ordem ASC
          LIMIT 1
    ) p
    WHERE bid.codbid = p.codbid;

END;


$$;


ALTER FUNCTION public.f_atualizafilabid(pcodbid integer) OWNER TO postgres;

--
-- TOC entry 1680 (class 1255 OID 18486604)
-- Name: f_atualizahistoricobid(date, integer, numeric, numeric, numeric, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizahistoricobid(pdta date, pcodbidtransp integer, pincofertado numeric, pincrecusado numeric, pincrealizado numeric, pcodoferta integer, pcodembarque integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$
  DECLARE 
    vRec Bid_Hist;
    vExists BOOLEAN := TRUE;
    vSQL TEXT;
  BEGIN
    -- selecionando o existente
    vSQL := FORMAT('SELECT * 
                      FROM Bid_Hist
                     WHERE Bid_Hist.Dta = ''%s''
                       AND Bid_Hist.CodBidTransp = %s', pDta, pCodBidTransp);

    EXECUTE vSQL INTO vRec;
    
    IF vRec.Dta IS NULL THEN
      vExists := FALSE;
      
      SELECT b.codbid, b.DtaVigencia 
      INTO vRec.CodBid, vRec.DtaVigencia
      FROM Bid b, Bid_Transp t 
      WHERE b.codbid = t.codbid 
        AND t.codbidtransp = pCodBidTransp;

      vRec.Dta = pDta;
    END IF;
    
    IF COALESCE(pCodOferta,-1) > -1 THEN
      vRec.Ofertas := f_RemoveDuplicates(COALESCE(vRec.Ofertas,'{}'::INT[]) + pCodOferta);
    END IF;
    
    IF COALESCE(pCodEmbarque,-1) > -1 THEN
      vRec.Embarques := f_removeDuplicates(COALESCE(vRec.Embarques,'{}'::INT[]) + pCodEmbarque);
    END IF;
    
    vRec.CodBidTransp := pCodBidTransp;
    vRec.QtdOfertado := GREATEST(COALESCE(vRec.QtdOfertado,0) + pIncOfertado,0);
    vRec.QtdRecusado := GREATEST(COALESCE(vRec.QtdRecusado,0) + pIncRecusado,0);
    vRec.QtdRealizado := GREATEST(COALESCE(vRec.QtdRealizado,0) + pIncRealizado,0);
    
    IF NOT vExists THEN
      EXECUTE 'INSERT INTO bid_hist SELECT $1.*' USING vRec;
    ELSE
      vSQL := FORMAT('UPDATE Bid_Hist
                         SET QtdOfertado = %s,
                             QtdRecusado = %s,
                             QtdRealizado = %s,
                             Embarques = ''%s'',
                             Ofertas =''%s''
                       WHERE Dta = ''%s''
                         AND CodBidTransp = %s', 

                       vRec.QtdOfertado,
                       vRec.QtdRecusado,
                       vRec.QtdRealizado,
                       COALESCE(vRec.Embarques, '{}'),
                       COALESCE(vRec.Ofertas, '{}'),
                       vRec.Dta, 
                       vRec.CodBidTransp
              );

      EXECUTE vSQL;
    END IF;
  END;
$_$;


ALTER FUNCTION public.f_atualizahistoricobid(pdta date, pcodbidtransp integer, pincofertado numeric, pincrecusado numeric, pincrealizado numeric, pcodoferta integer, pcodembarque integer) OWNER TO postgres;

--
-- TOC entry 865 (class 1255 OID 11285343)
-- Name: f_atualizainformacoesgrupo(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizainformacoesgrupo(pcodgrupo integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
   PERFORM f_atualizainformacoesgrupo(pCodgrupo, false);
END;
$$;


ALTER FUNCTION public.f_atualizainformacoesgrupo(pcodgrupo integer) OWNER TO postgres;

--
-- TOC entry 866 (class 1255 OID 11285344)
-- Name: f_atualizainformacoesgrupo(integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizainformacoesgrupo(pcodgrupo integer, patualizaindice boolean) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE 
    vAgendamento integer := -1;
    vRec RECORD;
    vCodTpCargaPrioritario INTEGER := -1;
    vDescrTpCargaPrioritario VARCHAR(100);

BEGIN
    CREATE TEMP TABLE Temp_Carga AS
    SELECT CASE WHEN IsAgendamento THEN 1 ELSE 0 END as Ordem, 
           CodCarga,
           DtaHrPrevEntrega,
           Id, 
           Pendencias,
           TemPendencias,
           TemPendenciasDs,
           Peso,
           PesoDs,
           Vol,
           NumVol,
           NumPalete,
           Principal,
           DtaRemessa,
           CodStatCarga,
           IsAgendamento,
           DtaHrAgendamento,
           CodTpCarga
      FROM carga
     WHERE Carga.CodCarga IN (SELECT UNNEST(CargaGrupo.Cargas) FROM CargaGrupo WHERE CargaGrupo.CodCargaGrupo = pCodGrupo)
       AND Carga.CodCargaGrupo = pCodGrupo
    ORDER BY 1 DESC, Carga.DtaHrPrevEntrega ASC, Carga.Principal DESC, Carga.CodCarga ASC;

    FOR vRec IN SELECT * FROM Temp_Carga LOOP
      IF vRec.IsAgendamento THEN
        IF vRec.DtaHrAgendamento IS NULL THEN
          vAgendamento := 0;
        END IF;
        
        IF vRec.DtaHrAgendamento IS NOT NULL AND vAgendamento = -1 THEN
          vAgendamento := 1;
        END IF;
      END IF;
    END LOOP;

      SELECT Temp_Carga.CodTpCarga, TpCarga.Descr
        INTO vCodTpCargaPrioritario, vDescrTpCargaPrioritario
        FROM Temp_Carga, TpCarga
       WHERE Temp_Carga.CodTpCarga = TpCarga.CodTpCarga
    ORDER BY TpCarga.Prioridade
       LIMIT 1;
    
    UPDATE CargaGrupo
    SET 
      Pendencias = (
        SELECT COALESCE(ARRAY_AGG(id || ' - ' || pendencia),'{}'::VARCHAR[]) as pendencias 
        FROM (
          SELECT id, UNNEST(Pendencias) as pendencia
          FROM temp_carga
        ) as q
      ),
      
      TotPeso = totais.TotPeso,
      TotPesoDs = totais.TotPesoDs,
      TotVol = totais.TotVol,
      TotPalete = totais.TotPalete,
      TotNumVol = totais.TotNumVol,
      DtaRemessa = totais.DtaRemessa,
      CodTpCarga = vCodTpCargaPrioritario,
      TpCarga_descr = vDescrTpCargaPrioritario,
      Agendamento_Realizado = vAgendamento,
      
      Cargas = ARRAY(SELECT CodCarga FROM Temp_Carga ORDER BY Temp_Carga.Principal DESC, Temp_Carga.CodCarga ASC),
      TemPendencias = EXISTS(SELECT CodCarga FROM Temp_Carga WHERE Temp_Carga.TemPendencias),
      TemPendenciasDs = EXISTS(SELECT CodCarga FROM Temp_Carga WHERE Temp_Carga.TemPendenciasDs)
    FROM (
      SELECT 
        SUM(COALESCE(Peso,0)) as TotPeso,
        SUM(COALESCE(PesoDs,0)) as TotPesoDs,
        SUM(COALESCE(NumPalete,0)) as TotPalete,
        SUM(COALESCE(Vol,0)) as TotVol,
        SUM(COALESCE(NumVol,0)) as TotNumVol,
        MIN(DtaRemessa) as DtaRemessa
      FROM Temp_Carga
    ) as totais
    WHERE CargaGrupo.CodCargaGrupo = pCodGrupo;

    IF pAtualizaIndice = TRUE THEN
       UPDATE Carga
       SET Principal = TRUE
       WHERE CodCarga IN (SELECT CodCarga FROM Temp_Carga ORDER BY Ordem DESC, DtaHrPrevEntrega ASC LIMIT 1);

       UPDATE Carga
       SET Principal = FALSE
       WHERE CodCarga IN (SELECT CodCarga FROM Temp_Carga ORDER BY Ordem DESC, DtaHrPrevEntrega ASC OFFSET 1);
    END IF;
    
    DROP TABLE Temp_Carga;
END;
$$;


ALTER FUNCTION public.f_atualizainformacoesgrupo(pcodgrupo integer, patualizaindice boolean) OWNER TO postgres;

--
-- TOC entry 867 (class 1255 OID 11285345)
-- Name: geometrytype(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometrytype(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_getTYPE';


ALTER FUNCTION public.geometrytype(geometry) OWNER TO postgres;

--
-- TOC entry 7003 (class 0 OID 0)
-- Dependencies: 867
-- Name: FUNCTION geometrytype(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION geometrytype(geometry) IS 'args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.';


--
-- TOC entry 868 (class 1255 OID 11285349)
-- Name: st_ndims(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ndims(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_ndims';


ALTER FUNCTION public.st_ndims(geometry) OWNER TO postgres;

--
-- TOC entry 7004 (class 0 OID 0)
-- Dependencies: 868
-- Name: FUNCTION st_ndims(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ndims(geometry) IS 'args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.';


--
-- TOC entry 869 (class 1255 OID 11285350)
-- Name: st_srid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_srid(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_getSRID';


ALTER FUNCTION public.st_srid(geometry) OWNER TO postgres;

--
-- TOC entry 7005 (class 0 OID 0)
-- Dependencies: 869
-- Name: FUNCTION st_srid(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_srid(geometry) IS 'args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.';


--
-- TOC entry 298 (class 1259 OID 11285351)
-- Name: sq_codcarga; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codcarga
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codcarga OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 299 (class 1259 OID 11285353)
-- Name: carga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE carga (
    codcarga bigint DEFAULT nextval('sq_codcarga'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codstatcarga integer DEFAULT 1 NOT NULL,
    descrstatcarga character varying(20),
    dtahrstatcarga timestamp with time zone DEFAULT now(),
    codusrstatcarga integer,
    dtahrini timestamp with time zone,
    dtahrfim timestamp with time zone,
    dtahrcancelado timestamp with time zone,
    dtahrsinistrado timestamp with time zone,
    dtahragredespacho timestamp with time zone,
    codsitcarga integer DEFAULT 2,
    descrsitcarga character varying(255),
    dtahrsitcarga timestamp with time zone,
    codusrsitcarga integer,
    codtppriorsitcarga integer,
    dtahratrasado timestamp with time zone,
    dtahrnaoatrasado timestamp with time zone,
    temlembrete boolean DEFAULT false NOT NULL,
    temextrainfo boolean DEFAULT false NOT NULL,
    temocorrencia boolean DEFAULT false NOT NULL,
    codempembar integer,
    empembar_id character varying(30),
    empembar_nome character varying(100),
    codemptra integer,
    emptra_id character varying(30),
    emptra_nome character varying(100),
    codtpoper integer,
    tpoper_descr character varying(20),
    tpoper_redespacho boolean DEFAULT false,
    codtpcarga integer,
    tpcarga_id character varying(30),
    tpcarga_descr character varying(255),
    codemporig integer,
    emporig_id character varying(30),
    emporig_nome character varying(100),
    emporig_logradouro character varying(255),
    emporig_bairro character varying(50),
    emporig_cep character varying(10),
    emporig_codciduf integer,
    emporig_nomeciduf character varying(50),
    emporig_pos_long numeric(15,13),
    emporig_pos_lat numeric(15,13),
    dtahrprevcoleta timestamp with time zone,
    tempoprevcoleta integer DEFAULT 0 NOT NULL,
    dtahrinicoleta timestamp with time zone,
    dtahrfimcoleta timestamp with time zone,
    codempdest integer,
    empdest_id character varying(30),
    empdest_nome character varying(100),
    empdest_logradouro character varying(255),
    empdest_bairro character varying(50),
    empdest_cep character varying(10),
    empdest_codciduf integer,
    empdest_nomeciduf character varying(50),
    empdest_pos_long numeric(15,13),
    empdest_pos_lat numeric(15,13),
    dtahrpreventrega timestamp with time zone,
    tempopreventrega integer DEFAULT 0 NOT NULL,
    dtahrinientrega timestamp with time zone,
    dtahrfimentrega timestamp with time zone,
    codpriembarque bigint,
    codultembarque bigint,
    id character varying(30),
    numnf character varying(20),
    numdoc character varying(20),
    numped character varying(30),
    numvol integer DEFAULT 1 NOT NULL,
    peso numeric(7,2) DEFAULT 0 NOT NULL,
    vol numeric(7,2) DEFAULT 0 NOT NULL,
    codmoeda integer DEFAULT 1 NOT NULL,
    moeda_sigla character varying(10),
    vlr numeric(11,2) DEFAULT 0 NOT NULL,
    emporig_pos_area geometry,
    empdest_pos_area geometry,
    isagendamento boolean DEFAULT false NOT NULL,
    dtahrprevfimcoleta timestamp with time zone,
    dtahrprevfimentrega timestamp with time zone,
    codcargafluxo integer,
    codenderecodest integer,
    codtpevento integer,
    tpevento_nome character varying(200),
    tpcarga_tempminima numeric(10,2),
    tpcarga_tempmaxima numeric(10,2),
    prazo integer DEFAULT 0,
    distancia integer DEFAULT 0,
    codemptnf integer,
    emptnf_id character varying(30),
    emptnf_nome character varying(100),
    emptnf_logradouro character varying(255),
    emptnf_bairro character varying(50),
    emptnf_cep character varying(15),
    emptnf_codciduf integer,
    emptnf_nomeciduf character varying(50),
    emptnf_pos_lat numeric(15,13),
    emptnf_pos_long numeric(15,13),
    emptnf_pos_area geometry,
    dtahrprevtnf timestamp with time zone,
    dtahrprevfimtnf timestamp with time zone,
    codcargaorigem integer,
    numpalete integer DEFAULT 0,
    codcargagrupo integer,
    obscarga text,
    obsagendamento text,
    codtppalete integer,
    codenderecoorig integer,
    principal boolean DEFAULT true,
    codempjanela integer,
    codmotivo integer,
    descrmotivo text,
    dtaremessa date,
    pesods numeric(7,2),
    tempendencias boolean DEFAULT false,
    pendencias text[],
    tempendenciasds boolean DEFAULT false,
    codcargafluxoveic integer,
    dtahragendamento timestamp with time zone,
    venda boolean DEFAULT false,
    temdelivery boolean DEFAULT false,
    tnfid character varying(20),
    boxagendamento character varying(20),
    senhaagendamento character varying(30),
    agendamento_realizado integer DEFAULT (-1),
    codigoexternoveic character varying(20),
    codproduto integer,
    CONSTRAINT ck_tblcarga_empdest_pos_area CHECK ((st_ndims(empdest_pos_area) = 2)),
    CONSTRAINT ck_tblcarga_empdest_pos_area2 CHECK (((geometrytype(empdest_pos_area) = 'POLYGON'::text) OR (empdest_pos_area IS NULL))),
    CONSTRAINT ck_tblcarga_empdest_pos_area3 CHECK ((st_srid(empdest_pos_area) = 29101)),
    CONSTRAINT ck_tblcarga_emporig_pos_area CHECK ((st_ndims(emporig_pos_area) = 2)),
    CONSTRAINT ck_tblcarga_emporig_pos_area2 CHECK (((geometrytype(emporig_pos_area) = 'POLYGON'::text) OR (emporig_pos_area IS NULL))),
    CONSTRAINT ck_tblcarga_emporig_pos_area3 CHECK ((st_srid(emporig_pos_area) = 29101))
);


ALTER TABLE carga OWNER TO postgres;

--
-- TOC entry 7006 (class 0 OID 0)
-- Dependencies: 299
-- Name: COLUMN carga.codproduto; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN carga.codproduto IS 'Código do Produto na carga';


--
-- TOC entry 870 (class 1255 OID 11285391)
-- Name: f_atualizapainelcarga(carga, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizapainelcarga(p_record carga, p_tipo integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE

  T_UPDATE_NEW INTEGER DEFAULT 1;
  T_UPDATE_OLD INTEGER DEFAULT 2;
  
  vFatorQtde INTEGER DEFAULT 1;
  vFatorPeso FLOAT DEFAULT 0;
  vFatorVolume FLOAT DEFAULT 0;
  vFatorPaletes INTEGER DEFAULT 0;
  vTotal INTEGER DEFAULT 0;  
  vRecord RECORD;
  vAdicionarCarga BOOLEAN;
  vArrayCodCarga INTEGER[] DEFAULT '{}'::INTEGER[];
  vArrayViagens INTEGER[] DEFAULT '{}'::INTEGER[];
  vCodEmbarque INTEGER;
  vIdxViagem INTEGER;

BEGIN
  -- se tinha viagem
  IF p_record.CodUltEmbarque IS NOT NULL THEN
    vCodEmbarque := p_record.CodUltEmbarque;
  END IF;
  
  vFatorPeso := p_record.peso;
  vFatorVolume := p_record.vol;
  vFatorPaletes := p_record.numpalete;
  
  IF p_tipo = T_UPDATE_OLD THEN
    vFatorQtde := vFatorQtde*-1;
    vFatorPeso := vFatorPeso*-1;
    vFatorVolume := vFatorVolume*-1;
    vFatorPaletes := vFatorPaletes*-1;
  END IF;
  
  SELECT CodStatCarga,CodEmpTra,CodEmpEmbar,CodSitCarga,Cargas,Viagens INTO vRecord FROM PainelControle
  WHERE PainelControle.CodEmpTra = COALESCE(p_record.CodEmpTra,0)
    AND PainelControle.CodEmpEmbar = COALESCE(p_record.CodEmpEmbar,0)
    AND PainelControle.CodStatCarga = p_record.CodStatCarga
    AND PainelControle.CodSitCarga = COALESCE(p_record.CodSitCarga, 2)
  LIMIT 1;
  
  IF vRecord IS NULL THEN
    IF p_tipo = T_UPDATE_OLD THEN
      vFatorQtde := 0;
      vFatorPeso := 0;
      vFatorVolume := 0;
      vFatorPaletes := 0;
    ELSE
      vArrayCodCarga := ARRAY_APPEND(vArrayCodCarga, p_record.codcarga::INT);
      
      IF vCodEmbarque IS NOT NULL THEN
        vArrayViagens := ARRAY_APPEND(vArrayViagens, vCodEmbarque::INT);
      END if;
    END IF;
    
    INSERT INTO PainelControle (CodEmpEmbar,CodEmpTra,CodStatCarga,CodSitCarga,Qtde,PesoBruto,Volume,Cargas,Viagens,NumPalete)
    VALUES (COALESCE(p_record.CodEmpEmbar,0), COALESCE(p_record.CodEmpTra,0), p_record.CodStatCarga, COALESCE(p_record.CodSitCarga,2), vFatorQtde, vFatorPeso,vFatorVolume,vArrayCodCarga,vArrayViagens,vFatorPaletes);
  ELSE
    
    IF p_tipo = T_UPDATE_NEW THEN
      vAdicionarCarga := TRUE;
      vArrayCodCarga := f_removeDuplicates(ARRAY_APPEND(vRecord.cargas, p_record.codcarga::INT));
      IF vCodEmbarque IS NOT NULL THEN
        vArrayViagens := f_removeDuplicates(ARRAY_APPEND(vRecord.viagens, vCodEmbarque::INT));
      END IF;
    ELSE
      vAdicionarCarga := FALSE;
      vArrayCodCarga := f_removeElements(vRecord.cargas, ARRAY_AGG(p_record.codcarga::INT), TRUE);
      IF vCodEmbarque IS NOT NULL THEN
        vArrayViagens := f_removeElements(vRecord.viagens, ARRAY_AGG(vCodEmbarque), TRUE);
      END IF;
    END IF;
    
    -- atualiza os dados do painel de controle, removendo os valores antigos
    UPDATE
      PainelControle
    SET
      Qtde = GREATEST(0, Qtde+vFatorQtde)
      , PesoBruto = GREATEST(0, ROUND(CAST(PesoBruto+vFatorPeso as NUMERIC), 2))
      , Volume = GREATEST(0, ROUND(CAST(Volume+vFatorVolume as NUMERIC),2))
      , NumPalete = GREATEST(0, ROUND(CAST(NumPalete+vFatorPaletes as NUMERIC),2))
      , Cargas = vArrayCodCarga
      , Viagens = vArrayViagens
    WHERE
      PainelControle.CodEmpTra = COALESCE(p_record.CodEmpTra,0)
      AND PainelControle.CodEmpEmbar = COALESCE(p_record.CodEmpEmbar,0)
      AND PainelControle.CodStatCarga = p_record.CodStatCarga
      AND PainelControle.CodSitCarga = COALESCE(p_record.CodSitCarga, 2);
  END IF;

END  
  
$$;


ALTER FUNCTION public.f_atualizapainelcarga(p_record carga, p_tipo integer) OWNER TO postgres;

--
-- TOC entry 300 (class 1259 OID 11285392)
-- Name: carga_antiga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE carga_antiga (
    codcarga bigint DEFAULT nextval('sq_codcarga'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codstatcarga integer DEFAULT 1 NOT NULL,
    descrstatcarga character varying(20),
    dtahrstatcarga timestamp with time zone DEFAULT now(),
    codusrstatcarga integer,
    dtahrini timestamp with time zone,
    dtahrfim timestamp with time zone,
    dtahrcancelado timestamp with time zone,
    dtahrsinistrado timestamp with time zone,
    dtahragredespacho timestamp with time zone,
    codsitcarga integer DEFAULT 2,
    descrsitcarga character varying(255),
    dtahrsitcarga timestamp with time zone,
    codusrsitcarga integer,
    codtppriorsitcarga integer,
    dtahratrasado timestamp with time zone,
    dtahrnaoatrasado timestamp with time zone,
    temlembrete boolean DEFAULT false NOT NULL,
    temextrainfo boolean DEFAULT false NOT NULL,
    temocorrencia boolean DEFAULT false NOT NULL,
    codempembar integer,
    empembar_id character varying(30),
    empembar_nome character varying(100),
    codemptra integer,
    emptra_id character varying(30),
    emptra_nome character varying(100),
    codtpoper integer,
    tpoper_descr character varying(20),
    tpoper_redespacho boolean DEFAULT false,
    codtpcarga integer,
    tpcarga_id character varying(30),
    tpcarga_descr character varying(255),
    codemporig integer,
    emporig_id character varying(30),
    emporig_nome character varying(100),
    emporig_logradouro character varying(255),
    emporig_bairro character varying(50),
    emporig_cep character varying(10),
    emporig_codciduf integer,
    emporig_nomeciduf character varying(50),
    emporig_pos_long numeric(15,13),
    emporig_pos_lat numeric(15,13),
    dtahrprevcoleta timestamp with time zone,
    tempoprevcoleta integer DEFAULT 0 NOT NULL,
    dtahrinicoleta timestamp with time zone,
    dtahrfimcoleta timestamp with time zone,
    codempdest integer,
    empdest_id character varying(30),
    empdest_nome character varying(100),
    empdest_logradouro character varying(255),
    empdest_bairro character varying(50),
    empdest_cep character varying(10),
    empdest_codciduf integer,
    empdest_nomeciduf character varying(50),
    empdest_pos_long numeric(15,13),
    empdest_pos_lat numeric(15,13),
    dtahrpreventrega timestamp with time zone,
    tempopreventrega integer DEFAULT 0 NOT NULL,
    dtahrinientrega timestamp with time zone,
    dtahrfimentrega timestamp with time zone,
    codpriembarque bigint,
    codultembarque bigint,
    id character varying(30),
    numnf character varying(20),
    numdoc character varying(20),
    numped character varying(30),
    numvol integer DEFAULT 1 NOT NULL,
    peso numeric(7,2) DEFAULT 0 NOT NULL,
    vol numeric(7,2) DEFAULT 0 NOT NULL,
    codmoeda integer DEFAULT 1 NOT NULL,
    moeda_sigla character varying(10),
    vlr numeric(11,2) DEFAULT 0 NOT NULL,
    emporig_pos_area geometry,
    empdest_pos_area geometry,
    isagendamento boolean DEFAULT false NOT NULL,
    dtahrprevfimcoleta timestamp with time zone,
    dtahrprevfimentrega timestamp with time zone,
    codcargafluxo integer,
    codenderecodest integer,
    codtpevento integer,
    tpevento_nome character varying(200),
    tpcarga_tempminima numeric(10,2),
    tpcarga_tempmaxima numeric(10,2),
    prazo integer DEFAULT 0,
    distancia integer DEFAULT 0,
    codemptnf integer,
    emptnf_id character varying(30),
    emptnf_nome character varying(100),
    emptnf_logradouro character varying(255),
    emptnf_bairro character varying(50),
    emptnf_cep character varying(15),
    emptnf_codciduf integer,
    emptnf_nomeciduf character varying(50),
    emptnf_pos_lat numeric(15,13),
    emptnf_pos_long numeric(15,13),
    emptnf_pos_area geometry,
    dtahrprevtnf timestamp with time zone,
    dtahrprevfimtnf timestamp with time zone,
    codcargaorigem integer,
    numpalete integer DEFAULT 0,
    codcargagrupo integer,
    obscarga text,
    obsagendamento text,
    codtppalete integer,
    codenderecoorig integer,
    principal boolean DEFAULT true,
    codempjanela integer,
    codmotivo integer,
    descrmotivo text,
    dtaremessa date,
    pesods numeric(7,2),
    tempendencias boolean DEFAULT false,
    pendencias text[],
    tempendenciasds boolean DEFAULT false,
    codcargafluxoveic integer,
    dtahragendamento timestamp with time zone,
    venda boolean DEFAULT false,
    temdelivery boolean DEFAULT false,
    tnfid character varying(20),
    boxagendamento character varying(20),
    senhaagendamento character varying(30),
    agendamento_realizado integer DEFAULT (-1),
    CONSTRAINT enforce_dims_empdest_pos_area CHECK ((st_ndims(empdest_pos_area) = 2)),
    CONSTRAINT enforce_dims_emporig_pos_area CHECK ((st_ndims(emporig_pos_area) = 2)),
    CONSTRAINT enforce_geotype_empdest_pos_area CHECK (((geometrytype(empdest_pos_area) = 'POLYGON'::text) OR (empdest_pos_area IS NULL))),
    CONSTRAINT enforce_geotype_emporig_pos_area CHECK (((geometrytype(emporig_pos_area) = 'POLYGON'::text) OR (emporig_pos_area IS NULL))),
    CONSTRAINT enforce_srid_empdest_pos_area CHECK ((st_srid(empdest_pos_area) = 29101)),
    CONSTRAINT enforce_srid_emporig_pos_area CHECK ((st_srid(emporig_pos_area) = 29101))
);


ALTER TABLE carga_antiga OWNER TO postgres;

--
-- TOC entry 872 (class 1255 OID 11285430)
-- Name: f_atualizapainelcarga(carga_antiga, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizapainelcarga(p_record carga_antiga, p_tipo integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE

  T_UPDATE_NEW INTEGER DEFAULT 1;
  T_UPDATE_OLD INTEGER DEFAULT 2;
  
  vFatorQtde INTEGER DEFAULT 1;
  vFatorPeso FLOAT DEFAULT 0;
  vFatorVolume FLOAT DEFAULT 0;
  vFatorPaletes INTEGER DEFAULT 0;
  vTotal INTEGER DEFAULT 0;  
  vRecord RECORD;
  vAdicionarCarga BOOLEAN;
  vArrayCodCarga INTEGER[] DEFAULT '{}'::INTEGER[];
  vArrayViagens INTEGER[] DEFAULT '{}'::INTEGER[];
  vCodEmbarque INTEGER;
  vIdxViagem INTEGER;

BEGIN
  -- se tinha viagem
  IF p_record.CodUltEmbarque IS NOT NULL THEN
    vCodEmbarque := p_record.CodUltEmbarque;
  END IF;
  
  vFatorPeso := p_record.peso;
  vFatorVolume := p_record.vol;
  vFatorPaletes := p_record.numpalete;
  
  IF p_tipo = T_UPDATE_OLD THEN
    vFatorQtde := vFatorQtde*-1;
    vFatorPeso := vFatorPeso*-1;
    vFatorVolume := vFatorVolume*-1;
    vFatorPaletes := vFatorPaletes*-1;
  END IF;
  
  SELECT CodStatCarga,CodEmpTra,CodEmpEmbar,CodSitCarga,Cargas,Viagens INTO vRecord FROM PainelControle
  WHERE PainelControle.CodEmpTra = COALESCE(p_record.CodEmpTra,0)
    AND PainelControle.CodEmpEmbar = COALESCE(p_record.CodEmpEmbar,0)
    AND PainelControle.CodStatCarga = p_record.CodStatCarga
    AND PainelControle.CodSitCarga = COALESCE(p_record.CodSitCarga, 2)
  LIMIT 1;
  
  IF vRecord IS NULL THEN
    IF p_tipo = T_UPDATE_OLD THEN
      vFatorQtde := 0;
      vFatorPeso := 0;
      vFatorVolume := 0;
      vFatorPaletes := 0;
    ELSE
      vArrayCodCarga := ARRAY_APPEND(vArrayCodCarga, p_record.codcarga::INT);
      
      IF vCodEmbarque IS NOT NULL THEN
        vArrayViagens := ARRAY_APPEND(vArrayViagens, vCodEmbarque::INT);
      END if;
    END IF;
    
    INSERT INTO PainelControle (CodEmpEmbar,CodEmpTra,CodStatCarga,CodSitCarga,Qtde,PesoBruto,Volume,Cargas,Viagens,NumPalete)
    VALUES (COALESCE(p_record.CodEmpEmbar,0), COALESCE(p_record.CodEmpTra,0), p_record.CodStatCarga, COALESCE(p_record.CodSitCarga,2), vFatorQtde, vFatorPeso,vFatorVolume,vArrayCodCarga,vArrayViagens,vFatorPaletes);
  ELSE
    
    IF p_tipo = T_UPDATE_NEW THEN
      vAdicionarCarga := TRUE;
      vArrayCodCarga := f_removeDuplicates(ARRAY_APPEND(vRecord.cargas, p_record.codcarga::INT));
      IF vCodEmbarque IS NOT NULL THEN
        vArrayViagens := f_removeDuplicates(ARRAY_APPEND(vRecord.viagens, vCodEmbarque::INT));
      END IF;
    ELSE
      vAdicionarCarga := FALSE;
      vArrayCodCarga := f_removeElements(vRecord.cargas, ARRAY_AGG(p_record.codcarga::INT), TRUE);
      IF vCodEmbarque IS NOT NULL THEN
        vArrayViagens := f_removeElements(vRecord.viagens, ARRAY_AGG(vCodEmbarque), TRUE);
      END IF;
    END IF;
    
    -- atualiza os dados do painel de controle, removendo os valores antigos
    UPDATE
      PainelControle
    SET
      Qtde = GREATEST(0, Qtde+vFatorQtde)
      , PesoBruto = GREATEST(0, ROUND(CAST(PesoBruto+vFatorPeso as NUMERIC), 2))
      , Volume = GREATEST(0, ROUND(CAST(Volume+vFatorVolume as NUMERIC),2))
      , NumPalete = GREATEST(0, ROUND(CAST(NumPalete+vFatorPaletes as NUMERIC),2))
      , Cargas = vArrayCodCarga
      , Viagens = vArrayViagens
    WHERE
      PainelControle.CodEmpTra = COALESCE(p_record.CodEmpTra,0)
      AND PainelControle.CodEmpEmbar = COALESCE(p_record.CodEmpEmbar,0)
      AND PainelControle.CodStatCarga = p_record.CodStatCarga
      AND PainelControle.CodSitCarga = COALESCE(p_record.CodSitCarga, 2);
  END IF;

END  
  
$$;


ALTER FUNCTION public.f_atualizapainelcarga(p_record carga_antiga, p_tipo integer) OWNER TO postgres;

--
-- TOC entry 1681 (class 1255 OID 11285434)
-- Name: f_atualizarconjuntobid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizarconjuntobid(pcodbidtransp integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE

  vTotalOfertado NUMERIC;
  vTotalRealizado NUMERIC;
  vCodBid INTEGER;

BEGIN
  -- pegando o codigo do bid
  SELECT codbid INTO vCodBid FROM bid_transp WHERE codbidtransp = pCodBidTransp;
  
  -- pegando o total ofertado e realizado de todas as transportadoras deste bid
  SELECT SUM(QtdOfertado), SUM(QtdRealizado)  
  INTO vTotalOfertado, vTotalRealizado
  FROM bid_transp
  WHERE bid_transp.codbid = vCodBid;

  UPDATE bid_transp
    -- atualizando o nivel de performance (PERF)
    -- calculo: PERF = (VRT * 100) / VOT
    -- VRT = viagens realizadas transportadira
    -- VOT = viagens ofertadas transportadora
    SET NivelPerform = CASE WHEN QtdOfertado > 0 THEN
      ROUND( (QtdRealizado * 100) / QtdOfertado::NUMERIC, 2 )
    ELSE
      NivelPerform
    END,
      
    
    -- atualizando o percentual de participação realizada da transportadora (PRT)
    -- calculo: PRT = (VOT * 100) / VOP
    -- VOT = viagens ofertadas transportadira
    -- VOP = viagens ofertadas rota
    PctReal = CASE WHEN vTotalOfertado > 0 THEN
      ROUND( (QtdOfertado * 100) / vTotalOfertado::NUMERIC, 2 )
    ELSE
      PctReal
    END,
    
    -- atualizando o nivel de participação (PART)
    -- calculo: PART = (PRT * 100) / PPT
    -- PRT = viagens ofertadas transportadira
    -- PPT = viagens ofertadas rota
    NivelPart = CASE WHEN QtdOfertado > 0 AND vTotalOfertado > 0 THEN
      ROUND( CAST( (ROUND((QtdOfertado * 100) / vTotalOfertado, 2) * 100) / PctPrev AS NUMERIC) , 2)
    ELSE
      NivelPart
    END
    
  -- todas transp's do bid em questão
  WHERE bid_transp.codbid = vCodBid;
END;
$$;


ALTER FUNCTION public.f_atualizarconjuntobid(pcodbidtransp integer) OWNER TO postgres;

--
-- TOC entry 873 (class 1255 OID 11285435)
-- Name: f_atualizardataentrega(character varying, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizardataentrega(ptipo character varying, pcodigo bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$

  DECLARE
  BEGIN
    IF pTipo = 'EMBARQUE' THEN
      UPDATE Embarque 
         SET DtaHrPrevFim = CASE WHEN Embarque.Agendamento_Realizado = -1 THEN (
                                       SELECT MAX(DtaHrPreVentrega) 
                                         FROM EmbarqueCarga
                                         WHERE CodEmbarque = pCodigo
                                    ) ELSE (
                                      SELECT MIN(Carga.DtaHrPreVentrega) 
                                        FROM EmbarqueCarga, Carga
                                       WHERE CodEmbarque = pCodigo
                                         AND Carga.CodCarga = EmbarqueCarga.CodCarga
                                         AND Carga.IsAgendamento
                                    )
                             END
       WHERE Embarque.CodEmbarque = pCodigo;
      
    END IF;

    IF pTipo = 'COLETA' THEN
      UPDATE ProgColeta 
         SET DtaHrPrevEntrega = CASE WHEN ProgColeta.Agendamento_Realizado = -1 THEN (
                                       SELECT MAX(DtaHrPreVentrega) 
                                         FROM ProgColetaCarga, Carga
                                        WHERE ProgColetaCarga.CodProgColeta = pCodigo
                                          AND Carga.CodCarga = ProgColetaCarga.CodCarga
                                    ) ELSE (
                                      SELECT MAX(DtaHrPreVentrega) 
                                         FROM ProgColetaCarga, Carga
                                        WHERE ProgColetaCarga.CodProgColeta = pCodigo
                                          AND Carga.CodCarga = ProgColetaCarga.CodCarga
                                          AND Carga.IsAgendamento
                                    )
                             END
       WHERE ProgColeta.CodProgColeta = pCodigo;
    END IF;

    RETURN TRUE;
  END;
$$;


ALTER FUNCTION public.f_atualizardataentrega(ptipo character varying, pcodigo bigint) OWNER TO postgres;

--
-- TOC entry 874 (class 1255 OID 11285436)
-- Name: f_atualizatpcargaembarque(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizatpcargaembarque(p_codembarque integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE
  vRecord RECORD;

BEGIN

    SELECT ARRAY_AGG( DISTINCT COALESCE(CodTpCarga,0) ) as tpCargas
      INTO vRecord 
    FROM EmbarqueCarga
      INNER JOIN Carga ON Carga.CodCarga = EmbarqueCarga.CodCarga
      WHERE EmbarqueCarga.CodEmbarque = COALESCE(p_codembarque,0);

    -- atualiza os dados do embarque
    UPDATE
      Embarque
    SET
      CodTpCarga = vRecord.tpCargas
    WHERE
      Embarque.CodEmbarque = COALESCE(p_codembarque,0);
END  
  
$$;


ALTER FUNCTION public.f_atualizatpcargaembarque(p_codembarque integer) OWNER TO postgres;

--
-- TOC entry 875 (class 1255 OID 11285437)
-- Name: f_atualizatpcargaprogcoleta(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_atualizatpcargaprogcoleta(p_codoferta integer) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE
  vRecord RECORD;

BEGIN

    SELECT ARRAY_AGG( DISTINCT COALESCE(CodTpCarga,0) ) as tpCargas
      INTO vRecord 
    FROM ProgColetaCarga
      INNER JOIN Carga ON Carga.CodCarga = ProgColetaCarga.CodCarga
      WHERE ProgColetaCarga.CodProgColeta = COALESCE(p_codoferta,0);

    -- atualiza os dados do progcoleta
    UPDATE
      ProgColeta
    SET
      CodTpCarga = vRecord.tpCargas
    WHERE
      ProgColeta.CodProgColeta = COALESCE(p_codoferta,0);
END  
  
$$;


ALTER FUNCTION public.f_atualizatpcargaprogcoleta(p_codoferta integer) OWNER TO postgres;

--
-- TOC entry 876 (class 1255 OID 11285441)
-- Name: f_calculadataentrega(integer, integer, integer, timestamp with time zone, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_calculadataentrega(pcodciduforig integer, pcodempdest integer, pcodcidufdest integer, pdtahrprevini timestamp with time zone, pcodtpoper integer, pagendamento boolean) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
  declare 
    CONST_MINUTOS_DIA INTEGER := 60 * 24;
    CONST_SEGUNDOS_DIA INTEGER := CONST_MINUTOS_DIA * 60;
    
    vPrzTabela integer;
    vDtaHrPrevEntrega TIMESTAMPTZ;
    vDia INTEGER;
    vMes INTEGER;
    vAno INTEGER;
    vDiaSemana INTEGER;
    vSemanaMes INTEGER;
    vTotal INTEGER := -1;
    vTpOper TpOper;
    vTempoRestoDia INTEGER;
    vTempoAux INTEGER;
    vCounter integer := 0;
    vDataAux TIMESTAMPTZ;
    
  begin
    vDtaHrPrevEntrega := pDtaHrPrevIni;

    SELECT *
      INTO vTpOper
      FROM TpOper
     WHERE TpOper.CodTpOper = pCodTpOper;
    
    SELECT Prazo
    INTO vPrzTabela
    FROM PrazoTransito
    WHERE PrazoTransito.CodCidUfOrig = pCodCidUfOrig
      AND PrazoTransito.CodCidUfDest = pCodCidUfDest
      AND PrazoTransito.Tipo = vTpOper.TipoPrazoTransito
      AND PrazoTransito.Ativo = TRUE;

    IF vPrzTabela IS NULL THEN
      RETURN NULL;
    END IF;

    -- OS 36
    -- só começamos a contar a data de inicio a partir de um dia util.
    -- e se a data prevista de inicio for antes do limite do tpoper
    vDataAux := DATE_TRUNC('DAY', vDtaHrPrevEntrega) + vTpOper.HrLimite;
    WHILE NOT f_diaUtil(pCodEmpDest,pCodCidUfDest,vDtaHrPrevEntrega) OR vDtaHrPrevEntrega >= vDataAux LOOP
      vDtaHrPrevEntrega := DATE_TRUNC('DAY', vDtaHrPrevEntrega + INTERVAL '1 DAY')::TIMESTAMPTZ + vTpOper.HrInicio;
      vDataAux := DATE_TRUNC('DAY', vDtaHrPrevEntrega) + vTpOper.HrLimite;
    END LOOP;

    IF pAgendamento THEN
      RETURN vDtaHrPrevEntrega + CAST(vPrzTabela || ' MINUTE' as INTERVAL);
    END IF;

    -- vDtaHrPrevEntrega := vDtaHrPrevEntrega + CAST(vPrzTabela || ' MINUTE' as INTERVAL);
    vPrzTabela := vPrzTabela * 60; -- convertemos os minutos para segundos

    LOOP
      vDia := DATE_PART('day', vDtaHrPrevEntrega);
      vMes := DATE_PART('month', vDtaHrPrevEntrega);
      vAno := DATE_PART('year', vDtaHrPrevEntrega);
      vDiaSemana := EXTRACT(DOW FROM vDtaHrPrevEntrega);
      vSemanaMes := DATE_PART('week', vDtaHrPrevEntrega) - DATE_PART('week', DATE_TRUNC('month',vDtaHrPrevEntrega));

      IF vTpOper.ConsiderarFds AND NOT f_diaUtil(pCodEmpDest,pCodCidUfDest,vDtaHrPrevEntrega) THEN
        vDtaHrPrevEntrega := DATE_TRUNC('DAY', vDtaHrPrevEntrega + INTERVAL '1 DAY')::TIMESTAMPTZ;
        CONTINUE;
      END IF;
      
      vTempoRestoDia := CONST_SEGUNDOS_DIA - FLOOR(EXTRACT(EPOCH FROM vDtaHrPrevEntrega::TIME)); -- segundos
      vTempoAux := vTempoRestoDia;
      vPrzTabela := vPrzTabela - vTempoAux;

      IF vPrzTabela < 0 THEN
        vTempoAux := vTempoAux + vPrzTabela;
      END IF;

      vDtaHrPrevEntrega := vDtaHrPrevEntrega + CAST(vTempoAux || ' SECOND' AS INTERVAL);

      EXIT WHEN vPrzTabela <= 0;
    END LOOP;

    -- a entrega tem que ser dia util
    -- so entramos aqui se nao considerar dia util.
    IF NOT vTpOper.ConsiderarFDS THEN
      WHILE NOT f_diaUtil(pCodEmpDest,pCodCidUfDest,vDtaHrPrevEntrega) LOOP
        vDtaHrPrevEntrega := DATE_TRUNC('DAY', vDtaHrPrevEntrega + INTERVAL '1 DAY') + vTpOper.HrInicio;
      END LOOP;      
    END IF;

    RETURN vDtaHrPrevEntrega;
  END
$$;


ALTER FUNCTION public.f_calculadataentrega(pcodciduforig integer, pcodempdest integer, pcodcidufdest integer, pdtahrprevini timestamp with time zone, pcodtpoper integer, pagendamento boolean) OWNER TO postgres;

--
-- TOC entry 877 (class 1255 OID 11285442)
-- Name: f_calculadatafinal(integer, timestamp with time zone, interval); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_calculadatafinal(pcodexpediente integer, pdatainicial timestamp with time zone, pprazo interval) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$

  DECLARE
    vDateAux TIMESTAMPTZ := pDataInicial;
    vPrazoMinutos INTEGER;
    vInicioExpediente TIME;
    vFimExpediente TIME;
    vHorarios HSTORE;
    vRec RECORD;
    vDiaSemana INTEGER;
    vTime TIME;
    vInterval INTERVAL;
    vRecursions INTEGER := 0;
    
  BEGIN
    CREATE TEMP TABLE Tmp_Expediente AS
       SELECT *
         FROM ExpedienteHorario
        WHERE ExpedienteHorario.CodExpediente = pCodExpediente
     ORDER BY ExpedienteHorario.Dia_Semana ASC;

    IF (SELECT COUNT(*) FROM Tmp_Expediente) = 0 THEN
      DROP TABLE Tmp_Expediente;
      RETURN NULL;
    END IF;

    WHILE pPrazo > '00:00:00' LOOP
      IF vRecursions >= 200 THEN
        RAISE NOTICE 'limite de loop excedido';
        EXIT;
      END IF;

      vRecursions := vRecursions + 1;
      
      vDiaSemana := DATE_PART('dow', vDateAux)::INTEGER;
      
      SELECT *
        INTO vRec
        FROM Tmp_Expediente t
       WHERE t.Dia_Semana = vDiaSemana;

      IF vRec.Sem_Expediente = FALSE THEN
        IF vRec.Dia_Inteiro THEN
          vInicioExpediente := '00:00:00'::TIME;
          vFimExpediente := '23:59:59'::TIME;
        ELSE
          vInicioExpediente := vRec.Inicio;
          vFimExpediente := vRec.Fim;
        END IF;
      ELSE       
        --vDateAux := (vDateAux + INTERVAL '1 DAY')::TIMESTAMPTZ;
        vDateAux := vDateAux::DATE::TIMESTAMPTZ + INTERVAL '1 DAY';
        CONTINUE;
      END IF;

      vTime := vDateAux::TIME;

      IF vTime < vInicioExpediente THEN
        vTime := vInicioExpediente;
        vDateAux := vDateAux::DATE::TIMESTAMPTZ + vTime;
        CONTINUE;
      END IF;

      IF vTime >= vFimExpediente THEN
        vTime := vFimExpediente;
        vDateAux := vDateAux + INTERVAL '1 DAY';
        vDateAux := vDateAux::DATE::TIMESTAMPTZ + vInicioExpediente;
        CONTINUE;
      END IF;

      vInterval := vFimExpediente - vTime;
      pPrazo := pPrazo - vInterval;

      IF pPrazo < '00:00:00' THEN
        vInterval := vInterval + pPrazo;
      END IF;

      vDateAux := vDateAux + vInterval;
    END LOOP;

    DROP TABLE Tmp_Expediente;
    
    RETURN vDateAux;
  END;
$$;


ALTER FUNCTION public.f_calculadatafinal(pcodexpediente integer, pdatainicial timestamp with time zone, pprazo interval) OWNER TO postgres;

--
-- TOC entry 860 (class 1255 OID 11285443)
-- Name: f_calculadistancia(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_calculadistancia(ppontoorig geometry, ppontodest geometry) RETURNS double precision
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- ************************************************
	-- Calcula a distancia entre dois pontos (km)
	-- ************************************************
	RETURN ST_Distance_Sphere(
		SetSRID(pPontoOrig, 29101),
		SetSRID(pPontoDest, 29101)
	) / 1000;
END $$;


ALTER FUNCTION public.f_calculadistancia(ppontoorig geometry, ppontodest geometry) OWNER TO postgres;

--
-- TOC entry 871 (class 1255 OID 11285444)
-- Name: f_calculapesods(numeric, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_calculapesods(ppeso numeric, pcodstatcarga integer, pcodendereco integer, pcodtpoper integer) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
	vRetorno NUMERIC(7,2) := pPeso;
	vFator NUMERIC(5,2);
BEGIN
	IF pCodStatCarga IN (1,9) THEN
		SELECT peso
		INTO vFator
		FROM EmpJanelaPeso
		WHERE EmpJanelaPeso.CodEmpEndereco = pCodEndereco
			AND EmpJanelaPeso.CodTpOper = pCodTpOper;

		IF vFator IS NULL THEN
			vFator := 1;
		END IF;

		vRetorno := vRetorno * vFator;
	END IF;
	
	RETURN vRetorno;
END;
$$;


ALTER FUNCTION public.f_calculapesods(ppeso numeric, pcodstatcarga integer, pcodendereco integer, pcodtpoper integer) OWNER TO postgres;

--
-- TOC entry 879 (class 1255 OID 11285445)
-- Name: f_checaembarquefinalizado(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_checaembarquefinalizado(pcodembarque integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE

	-- Este metodo verifica se todos os embarquecarga possuem suas datas preenchidas.
	-- Se possuirem, finaliza o embarque caso ele nao esteja:
	-- - finalizado
	-- - sinistrado
	-- - cancelado
  
BEGIN

	UPDATE
		Embarque
	SET
		DtaHrFim = NOW()
		, CodStatEmbarque = 3
	WHERE 
		CodEmbarque = pCodEmbarque
		AND DtaHrCancelado IS NULL
		AND DtaHrSinistrado IS NULL
		AND DtaHrFim IS NULL
		AND (
			SELECT COUNT(*) FROM EmbarqueCarga
			WHERE CodEmbarque = pCodEmbarque
			AND (DtaHrIniColeta IS NULL OR DtaHrFimColeta IS NULL OR DtaHrIniEntrega IS NULL OR DtaHrFimEntrega IS NULL)
		) = 0;

END
$$;


ALTER FUNCTION public.f_checaembarquefinalizado(pcodembarque integer) OWNER TO postgres;

--
-- TOC entry 880 (class 1255 OID 11285446)
-- Name: f_checaempresabid(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_checaempresabid(pcodcidorig integer, pcodciddest integer, pcodemptra integer, pcodtpcarga integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  vCodBidTransp INTEGER;
BEGIN
  SELECT b.CodBidTransp
  INTO vCodBidTransp
  FROM bid_transp b, bid
  WHERE b.codbid = bid.codbid
      AND bid.CodCidUfOrigem = pCodCidOrig
      AND bid.CodCidUfDestino = pCodCidDest
      AND bid.CodTpCarga = pCodTpCarga
      AND bid.ativo = TRUE
      AND b.CodEmpTra = pCodEmpTra;
  
  RETURN vCodBidTransp;
END;
$$;


ALTER FUNCTION public.f_checaempresabid(pcodcidorig integer, pcodciddest integer, pcodemptra integer, pcodtpcarga integer) OWNER TO postgres;

--
-- TOC entry 881 (class 1255 OID 11285447)
-- Name: f_chegadacalculada(timestamp with time zone, geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_chegadacalculada(pdtaultposicao timestamp with time zone, ppontoorig geometry, ppontodest geometry, pvelmedia double precision) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- ************************************************
	-- Calcula a chegada calculada entre dois pontos
	-- ************************************************
	RETURN f_chegadaCalculada(pDtaUltPosicao, 
		y(CentrOID(pPontoOrig)), x(CentrOID(pPontoOrig)),
		y(CentrOID(pPontoDest)), x(CentrOID(pPontoDest)),
		pVelMedia);
END $$;


ALTER FUNCTION public.f_chegadacalculada(pdtaultposicao timestamp with time zone, ppontoorig geometry, ppontodest geometry, pvelmedia double precision) OWNER TO postgres;

--
-- TOC entry 882 (class 1255 OID 11285448)
-- Name: f_chegadacalculada(timestamp with time zone, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_chegadacalculada(pdtaultposicao timestamp with time zone, platorig double precision, plongorig double precision, platdest double precision, plongdest double precision, pvelmedia double precision) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
DECLARE
	-- ************************************************
	-- Calcula a chegada calculada entre dois pontos
	-- ************************************************
	vChegadaCalculada TIMESTAMP WITH TIME ZONE;
	vDistancia FLOAT;
BEGIN
	IF pDtaUltPosicao IS NOT NULL AND pLatOrig IS NOT NULL AND pLongOrig IS NOT NULL AND  pLatDest IS NOT NULL AND pLongDest IS NOT NULL AND pVelMedia IS NOT NULL THEN
		vDistancia := f_calculaDistancia(SetSRID(ST_MakePoint(pLongOrig, pLatOrig), 29101), SetSRID(ST_MakePoint(pLongDest, pLatDest), 29101));
		vChegadaCalculada := pDtaUltPosicao + CAST(((vDistancia / pVelMedia) * 60) || ' MINUTES' AS INTERVAL);
	END IF;

	RETURN vChegadaCalculada;
END;
$$;


ALTER FUNCTION public.f_chegadacalculada(pdtaultposicao timestamp with time zone, platorig double precision, plongorig double precision, platdest double precision, plongdest double precision, pvelmedia double precision) OWNER TO postgres;

--
-- TOC entry 883 (class 1255 OID 11285449)
-- Name: f_config(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_config(pchave text) RETURNS text
    LANGUAGE plpgsql
    AS $$
	DECLARE
		vRetorno TEXT;
	BEGIN

		SELECT 
			COALESCE(vlratual, vlrpadrao, '')
		INTO 
			vRetorno
		FROM
			config
		WHERE 
			nome = pChave
		LIMIT 1;
		
		RETURN vRetorno;
	
	END
$$;


ALTER FUNCTION public.f_config(pchave text) OWNER TO postgres;

--
-- TOC entry 884 (class 1255 OID 11285453)
-- Name: f_corsemaforo(timestamp with time zone, timestamp with time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_corsemaforo(pdtaprevista timestamp with time zone, pdtacalculada timestamp with time zone, psituacaosinal integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	-- ************************************************
	-- Retorna a cor a ser usada no semaforo 
	-- conforme tolerancia 
	-- ************************************************
	vConfigCores TEXT;
	vPares TEXT[];
	vTemp TEXT[];
	vRange TEXT[];
	vCor TEXT;
	vMin FLOAT;
	vMax FLOAT;
	vDiff FLOAT;	
	vIndex INTEGER;	
BEGIN
	vConfigCores := f_config('TRANSITO.TOLERANCIA_ATRASO');
	vPares := STRING_TO_ARRAY(vConfigCores,',');

	vIndex := 1;

	IF pSituacaoSinal IS DISTINCT FROM 1 THEN
		pDtaCalculada := NOW() + INTERVAL '1 YEAR';
	END IF;

	vDiff := EXTRACT(EPOCH FROM COALESCE(pDtaCalculada,NOW() + INTERVAL '1 year')) - EXTRACT(EPOCH FROM pDtaPrevista);

	vCor := '0xFFFFFF';
	
	FOR vIndex IN 1 .. ARRAY_UPPER(vPares,1) LOOP
		vTemp := STRING_TO_ARRAY(vPares[vIndex],'=');
		IF UPPER(vTemp[1]) = 'DEFAULT' THEN
			vCor := vTemp[2];
			EXIT;
		END IF;
	END LOOP;
	
	WHILE vIndex <= ARRAY_UPPER(vPares,1) LOOP
		vTemp := STRING_TO_ARRAY(vPares[vIndex],'=');

		IF UPPER(vTemp[1]) = 'DEFAULT' THEN
			vIndex := vIndex+1;
			CONTINUE;
		END IF;
		
		vRange := STRING_TO_ARRAY(vTemp[1],'|');
		vMin := vRange[1]::FLOAT;

		--IF vMin = 0 AND vDiff < 0 THEN
		--	vCor := vTemp[2];
		--	EXIT;
		--END IF;

		IF ARRAY_UPPER(vRange,1) < 2 THEN
			vMax := 99999999;
		ELSE
			vMax := vRange[2]::FLOAT;
		END IF;

		-- RAISE NOTICE '%¨- % : %', vMin, vMax, vDiff;

		IF vDiff BETWEEN vMin AND vMax THEN
			vCor := vTemp[2];
		END IF;

		vIndex := vIndex+1;
	END LOOP;

	RETURN vCor;
END; $$;


ALTER FUNCTION public.f_corsemaforo(pdtaprevista timestamp with time zone, pdtacalculada timestamp with time zone, psituacaosinal integer) OWNER TO postgres;

--
-- TOC entry 885 (class 1255 OID 11285454)
-- Name: f_countarray(anyarray); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_countarray(parray anyarray) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  declare
    vRetorno int := 0;
  begin
    SELECT COUNT(*) FROM INTO vRetorno (SELECT UNNEST(COALESCE(pArray,'{}')) as x) q;
    RETURN vRetorno;
  end;
$$;


ALTER FUNCTION public.f_countarray(parray anyarray) OWNER TO postgres;

--
-- TOC entry 886 (class 1255 OID 11285455)
-- Name: f_createchildcarga(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createchildcarga(pdtahr timestamp with time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $$

DECLARE
  vDtaIni TIMESTAMPTZ := DATE_TRUNC('week', pDtaHr);
  vDtaFim TIMESTAMPTZ := DATE_TRUNC('week', vDtaIni) + interval '7 day -1 ms';
  vTablename VARCHAR := format('carga_%s_%s_w%s', 
    TO_CHAR(vDtaIni, 'YYYYMMDD'),
    TO_CHAR(vDtaFim, 'MMDD'),
    DATE_PART('w', vDtaIni)
  );
  vSchema VARCHAR := 'dados_carga';
  vSchemaTable VARCHAR := format('%s.%s', vSchema, vTablename);
  vCmd TEXT;
  vRecord RECORD;

BEGIN
  IF NOT EXISTS (SELECT 1 FROM Information_Schema.Tables WHERE Table_Name = vTablename AND Table_Schema = vSchema) THEN
    vCmd := format('CREATE TABLE %s  (CHECK(DtaHrIncl BETWEEN ''%s'' AND ''%s'')) INHERITS (public.carga)',
      vSchemaTable,
      vDtaIni,
      vDtaFim
    );

    EXECUTE vCmd;
    
    vCmd := format('CREATE TRIGGER t_before_iud_%s BEFORE INSERT OR UPDATE OR DELETE ON %s FOR EACH ROW EXECUTE PROCEDURE dados_carga.tf_before_iud_carga_child()',
      vTablename,
      vSchemaTable
    );

    EXECUTE vCmd;

    vCmd := format('CREATE TRIGGER t_after_iud_%s AFTER INSERT OR UPDATE OR DELETE ON %s FOR EACH ROW EXECUTE PROCEDURE dados_carga.tf_after_iud_carga_child()',
      vTablename,
      vSchemaTable
    );

    EXECUTE vCmd;

    -- creating indexes
    FOR vRecord IN
      SELECT format('CREATE INDEX %s_%s ON %s.%s (%s)',
               vTablename,
               ARRAY_TO_STRING(ARRAY_AGG(a.attname), '_'),
               vSchema,
               vTablename,
               ARRAY_TO_STRING(ARRAY_AGG(a.attname), ', ')
             ) AS cmd
      FROM
        pg_class t,
        pg_class i,
        pg_index ix,
        pg_attribute a
        
      WHERE t.relkind = 'r' 
        AND t.relname = 'carga' 
        AND t.oid = ix.indrelid 
        AND ix.indexrelid = i.oid 
        AND ix.indisprimary = false 
        AND t.oid = a.attrelid 
        AND a.attnum = ANY(ix.indkey)
        
      GROUP BY
        t.relname,
        i.relname

      ORDER BY
        t.relname
    LOOP
      EXECUTE vRecord.cmd;
    END LOOP;

    -- chaves primarias 
    FOR vRecord IN
      SELECT format('ALTER TABLE %s ADD %s', vSchemaTable, pg_catalog.pg_get_constraintdef(r.oid, true)) as cmd

        FROM pg_catalog.pg_constraint r,
             pg_catalog.pg_class c

       WHERE r.contype in('p') 
         AND r.conrelid = c.oid
         AND c.relname = 'carga'
    LOOP
      EXECUTE vRecord.cmd;
    END LOOP;

  END IF;
  
  RETURN vTablename;
END;

$$;


ALTER FUNCTION public.f_createchildcarga(pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 889 (class 1255 OID 11285456)
-- Name: f_createchildpos(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createchildpos(pdtahr timestamp with time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  vRecord RECORD;
  vDtaHrIni TIMESTAMPTZ := date_trunc('WEEK', pDtaHr);
  vDtaHrFim TIMESTAMPTZ := date_trunc('WEEK', pDtaHr) + INTERVAL '7 DAY - 1 MILLISECONDS';
  vTableName VARCHAR(50) := 'pos_' || TO_CHAR(vDtaHrIni, 'YYYYMMDD') || '_' || TO_CHAR(vDtaHrFim, 'MMDD') || '_w' || DATE_PART('WEEK', pDtaHr);

BEGIN
  IF NOT EXISTS (SELECT 1 FROM Information_Schema.Tables WHERE Table_Name = vTableName) THEN
    EXECUTE 'CREATE TABLE ' || vTableName ||
            ' (CHECK(DtaHr BETWEEN ''' || vDtaHrIni || ''' AND ''' || vDtaHrFim || ''')) INHERITS (pos) TABLESPACE int; ' ||

            'CREATE TRIGGER T_Before_I_' || vTableName || ' BEFORE INSERT ON ' || vTableName ||
            '  FOR EACH ROW EXECUTE PROCEDURE TF_Before_I_Pos_Child(); ';

    FOR vRecord IN
      SELECT
        'CREATE INDEX ' || vTableName || '_' || ARRAY_TO_STRING(ARRAY_AGG(a.attname), '_') ||
        ' ON ' || vTableName || '(' || ARRAY_TO_STRING(ARRAY_AGG(a.attname), ', ') || ') TABLESPACE int; ' AS cmd

      FROM
        pg_class t,
        pg_class i,
        pg_index ix,
        pg_attribute a

      WHERE
        t.relkind = 'r' AND

        t.relname = 'pos' AND

        t.oid = ix.indrelid AND
                ix.indexrelid = i.oid AND
                ix.indisprimary = false AND /* Vai ser adicionado como PK */

        t.oid = a.attrelid AND
                a.attnum = ANY(ix.indkey)

      GROUP BY
        t.relname,
        i.relname

      ORDER BY
        t.relname

    LOOP
      EXECUTE vRecord.cmd;
    END LOOP;

    FOR vRecord IN
      SELECT 'ALTER TABLE ' || vTableName || ' ADD ' || pg_catalog.pg_get_constraintdef(r.oid, true) as cmd

        FROM pg_catalog.pg_constraint r,
             pg_catalog.pg_class c

       WHERE r.contype in('p', 'f') AND -- PK e FK
             r.conrelid = c.oid AND
                          c.relname = 'pos'
    LOOP
      EXECUTE vRecord.cmd;
    END LOOP;
  END IF;

  RETURN vTableName;
END;
$$;


ALTER FUNCTION public.f_createchildpos(pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 890 (class 1255 OID 11285457)
-- Name: f_createchildtable(character varying, character varying, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createchildtable(pparent character varying, pdatefield character varying, pdate timestamp with time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  BEGIN
    RETURN f_createChildTable(pParent, pDateField, pDate, 'public'::VARCHAR);
  END;
$$;


ALTER FUNCTION public.f_createchildtable(pparent character varying, pdatefield character varying, pdate timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 891 (class 1255 OID 11285458)
-- Name: f_createchildtable(character varying, character varying, timestamp with time zone, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createchildtable(pparent character varying, pdatefield character varying, pdate timestamp with time zone, pschemaname character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  vRec RECORD;
  pChild VARCHAR(50) := pParent || '_' || TO_CHAR(pDate, 'YYYYMM');
BEGIN
  -- se não encontrar a tabela do mes
  -- criamos a partir da pai
  -- tambem fazemos herdar os indices e FK's
  IF NOT EXISTS (SELECT 1 FROM Information_Schema.Tables WHERE Table_Name = pChild AND Table_Schema = pSchemaName) THEN
    EXECUTE 'CREATE TABLE ' || pSchemaName || '.' || pChild || ' (CHECK(' || pDateField || ' BETWEEN ''' || 
              (SELECT date_trunc('MONTH', pDate)) || ''' AND ''' || 
              (SELECT date_trunc('MONTH', pDate)) + INTERVAL '1 MONTH - 1 SECOND' ||
            ''')) inherits (' || pParent || '); ';


    -- criando os indices na nova tabela
    FOR vRec IN
      select
        'CREATE INDEX i_' || pChild || '_' || ARRAY_TO_STRING(ARRAY_AGG(a.attname),'_') ||
        ' ON ' || pSchemaName || '.' || pChild || '(' || ARRAY_TO_STRING(ARRAY_AGG(a.attname),',') || ')' as consulta
      from
        pg_class t,
        pg_class i,
        pg_index ix,
        pg_attribute a
      where
        t.oid = ix.indrelid
        and i.oid = ix.indexrelid
        and a.attrelid = t.oid
        and a.attnum = ANY(ix.indkey)
        and t.relkind = 'r'
        and t.relname = QUOTE_IDENT(pParent)
      group by
        t.relname, i.relname
      order by
        t.relname
    LOOP
      EXECUTE vRec.consulta;
    END LOOP;
    
    -- criando as chaves estrangeiras na nova tabela
    FOR vRec IN
      SELECT 'ALTER TABLE ' || pSchemaName || '.' || QUOTE_IDENT(pChild) || ' ADD ' || pg_catalog.pg_get_constraintdef(r.oid, true) as consulta
        FROM pg_catalog.pg_constraint r, pg_catalog.pg_class c
        WHERE r.conrelid = c.oid AND r.contype = 'f'
        AND c.relname = QUOTE_IDENT(pParent)
    LOOP
      EXECUTE vRec.consulta;
    END LOOP;
    
    RETURN TRUE;
  END IF;

  RETURN FALSE;
END;
$$;


ALTER FUNCTION public.f_createchildtable(pparent character varying, pdatefield character varying, pdate timestamp with time zone, pschemaname character varying) OWNER TO postgres;

--
-- TOC entry 892 (class 1255 OID 11285459)
-- Name: f_createchildtable(character varying, character varying, timestamp with time zone, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createchildtable(pparent character varying, pdatefield character varying, pdate timestamp with time zone, pschemaname character varying, punidadeseparacao character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  vRec RECORD;
  vDtaIni TIMESTAMPTZ := DATE_TRUNC(pUnidadeSeparacao, pDate);
  vDtaFim TIMESTAMPTZ := DATE_TRUNC(pUnidadeSeparacao, vDtaIni) + CAST('1 ' || pUnidadeSeparacao || ' -1 MS' AS INTERVAL);

  pChild VARCHAR(50) := format('%s_%s_%s_w%s', 
    pParent,
    TO_CHAR(vDtaIni, 'YYYYMMDD'),
    TO_CHAR(vDtaFim, 'MMDD'),
    DATE_PART('w', vDtaIni)
  );
BEGIN
  -- se não encontrar a tabela do mes
  -- criamos a partir da pai
  -- tambem fazemos herdar os indices e FK's
  IF NOT EXISTS (SELECT 1 FROM Information_Schema.Tables WHERE Table_Name = pChild AND Table_Schema = pSchemaName) THEN
    EXECUTE FORMAT('CREATE TABLE %s.%s (CHECK(%s BETWEEN ''%s'' AND ''%s'')) inherits (%s)',
      pSchemaName,
      pChild,
      pDateField,
      date_trunc(pUnidadeSeparacao, pDate),
      date_trunc(pUnidadeSeparacao, pDate) + CAST('1 ' || pUnidadeSeparacao || ' -1 MS' AS INTERVAL),
      pParent
    );

    -- criando os indices na nova tabela
    FOR vRec IN
      select FORMAT('CREATE INDEX i_%s_%s ON %s.%s(%s)',
            pChild,
            ARRAY_TO_STRING(ARRAY_AGG(a.attname),'_'),
            pSchemaName,
            pChild,
            ARRAY_TO_STRING(ARRAY_AGG(a.attname),',')
           ) as consulta
        
      from
        pg_class t,
        pg_class i,
        pg_index ix,
        pg_attribute a
      where
        t.oid = ix.indrelid
        and i.oid = ix.indexrelid
        and a.attrelid = t.oid
        and a.attnum = ANY(ix.indkey)
        and t.relkind = 'r'
        and t.relname = QUOTE_IDENT(pParent)
      group by
        t.relname, i.relname
      order by
        t.relname
    LOOP
      EXECUTE vRec.consulta;
    END LOOP;
    
    -- criando as chaves estrangeiras na nova tabela
    FOR vRec IN
      SELECT 'ALTER TABLE ' || pSchemaName || '.' || QUOTE_IDENT(pChild) || ' ADD ' || pg_catalog.pg_get_constraintdef(r.oid, true) as consulta
        FROM pg_catalog.pg_constraint r, pg_catalog.pg_class c
        WHERE r.conrelid = c.oid AND r.contype = 'f'
        AND c.relname = QUOTE_IDENT(pParent)
    LOOP
      EXECUTE vRec.consulta;
    END LOOP;
    
    RETURN TRUE;
  END IF;

  RETURN FALSE;
END;
$$;


ALTER FUNCTION public.f_createchildtable(pparent character varying, pdatefield character varying, pdate timestamp with time zone, pschemaname character varying, punidadeseparacao character varying) OWNER TO postgres;

--
-- TOC entry 893 (class 1255 OID 11285461)
-- Name: f_createchildtemp(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createchildtemp(pdtahr timestamp with time zone) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
  vRecord RECORD;
  vDtaHrIni TIMESTAMPTZ := date_trunc('WEEK', pDtaHr);
  vDtaHrFim TIMESTAMPTZ := date_trunc('WEEK', pDtaHr) + INTERVAL '7 DAY - 1 MILLISECONDS';
  vTableName VARCHAR(50) := 'temp_' || TO_CHAR(vDtaHrIni, 'YYYYMMDD') || '_' || TO_CHAR(vDtaHrFim, 'MMDD') || '_w' || DATE_PART('WEEK', pDtaHr);

BEGIN
  IF NOT EXISTS (SELECT 1 FROM Information_Schema.Tables WHERE Table_Name = vTableName) THEN
    EXECUTE 'CREATE TABLE ' || vTableName ||
            ' (CHECK(DtaHr BETWEEN ''' || vDtaHrIni || ''' AND ''' || vDtaHrFim || ''')) INHERITS (temp) TABLESPACE int; ' ||

            'CREATE TRIGGER T_Before_I_' || vTableName || ' BEFORE INSERT ON ' || vTableName ||
            '  FOR EACH ROW EXECUTE PROCEDURE TF_Before_I_Temp_Child(); ';

    FOR vRecord IN
      SELECT
        'CREATE INDEX ' || vTableName || '_' || ARRAY_TO_STRING(ARRAY_AGG(a.attname), '_') ||
        ' ON ' || vTableName || '(' || ARRAY_TO_STRING(ARRAY_AGG(a.attname), ', ') || ') TABLESPACE int; ' AS cmd

      FROM
        pg_class t,
        pg_class i,
        pg_index ix,
        pg_attribute a

      WHERE
        t.relkind = 'r' AND

        t.relname = 'temp' AND

        t.oid = ix.indrelid AND
                ix.indexrelid = i.oid AND
                ix.indisprimary = false AND /* Vai ser adicionado como PK */

        t.oid = a.attrelid AND
                a.attnum = ANY(ix.indkey)

      GROUP BY
        t.relname,
        i.relname

      ORDER BY
        t.relname

    LOOP
      EXECUTE vRecord.cmd;
    END LOOP;

    FOR vRecord IN
      SELECT 'ALTER TABLE ' || vTableName || ' ADD ' || pg_catalog.pg_get_constraintdef(r.oid, true) as cmd

        FROM pg_catalog.pg_constraint r,
             pg_catalog.pg_class c

       WHERE r.contype in('p', 'f') AND -- PK e FK
             r.conrelid = c.oid AND
                          c.relname = 'temp'
    LOOP
      EXECUTE vRecord.cmd;
    END LOOP;
  END IF;

  RETURN vTableName;
END;
$$;


ALTER FUNCTION public.f_createchildtemp(pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 894 (class 1255 OID 11285462)
-- Name: f_createpostable(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createpostable(pbasedate timestamp with time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  vTableName VARCHAR(20);
  vResult BOOLEAN;
BEGIN
  vTableName := 'pos_' || TO_CHAR(pBaseDate, 'YYYYMM');
  select f_createpostable(vTableName) into vResult;
  RETURN vResult;
END
$$;


ALTER FUNCTION public.f_createpostable(pbasedate timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 895 (class 1255 OID 11285463)
-- Name: f_createpostable(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createpostable(ptablename character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  vTableExists INTEGER;
  
BEGIN
  pTableName := LOWER(pTableName);

  SELECT 
    COUNT(*) 
  INTO
    vTableExists
  FROM 
    Information_Schema.Tables 
  WHERE 
    Table_Name = pTableName;

  IF vTableExists = 0 THEN
    EXECUTE 'CREATE UNLOGGED TABLE ' || pTableName || ' ( ' ||
            '  CodPos INT NOT NULL, ' ||
  
            '  DtaHrIncl TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, ' ||
  
            '  CodTecRastr INTEGER NOT NULL, ' ||
            '  IdEquipRastr VARCHAR(25) NOT NULL, ' ||
            '  DtaHrTecRastr TIMESTAMP WITH TIME ZONE NOT NULL, ' ||
  
            '  TpPtoRef INTEGER, ' ||
            '  CodPtoRef INT, ' ||
            '  NomePtoRef VARCHAR(255), ' ||
            '  Angulo DECIMAL(4,1), ' ||
            '  Dist DECIMAL(8,2), ' ||
            
            '  DtaHr TIMESTAMP WITH TIME ZONE NOT NULL, ' ||
            '  Long NUMERIC(15,13) NOT NULL, ' ||
            '  Lat NUMERIC(15,13) NOT NULL, ' ||

            '  Veloc INTEGER, ' ||
            '  Ignicao INTEGER ' ||
            '); ' ||

            'ALTER TABLE ' || pTableName || ' ADD CONSTRAINT PK_' || pTableName || ' PRIMARY KEY (CodPos); ' ||

            'CREATE INDEX CI_' || pTableName || '_Main ON ' || pTableName || ' (CodTecRastr, IdEquipRastr, DtaHr); ' ||

            'CREATE TRIGGER T_Before_IU_' || pTableName || ' BEFORE INSERT OR UPDATE ON ' || pTableName ||
            '  FOR EACH ROW EXECUTE PROCEDURE TF_Before_IU_Pos(); ';
            
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END
$$;


ALTER FUNCTION public.f_createpostable(ptablename character varying) OWNER TO postgres;

--
-- TOC entry 897 (class 1255 OID 11285464)
-- Name: f_createtemptable(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_createtemptable(ptablename character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  vTableExists INTEGER;
  
BEGIN
  pTableName := LOWER(pTableName);

  SELECT 
    COUNT(*) 
  INTO
    vTableExists
  FROM 
    Information_Schema.Tables 
  WHERE 
    Table_Name = pTableName;

  IF vTableExists = 0 THEN
    EXECUTE 'CREATE UNLOGGED TABLE ' || pTableName || ' ( ' ||
            '  CodTemp INT NOT NULL, ' ||
  
            '  DtaHrIncl TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, ' ||
  
            '  CodTecRastr INTEGER NOT NULL, ' ||
            '  IdEquipRastr VARCHAR(25) NOT NULL, ' ||
            '  DtaHrTecRastr TIMESTAMP WITH TIME ZONE NOT NULL, ' ||
  
            '  DtaHr TIMESTAMP WITH TIME ZONE NOT NULL, ' ||
            '  Long NUMERIC(15,13) NOT NULL, ' ||
            '  Lat NUMERIC(15,13) NOT NULL, ' ||

            '  Sensor INTEGER DEFAULT 1, ' ||
            '  Temperatura NUMERIC(10,2) NOT NULL ' ||
            '); ' ||

            'ALTER TABLE ' || pTableName || ' ADD CONSTRAINT PK_' || pTableName || ' PRIMARY KEY (CodTemp); ' ||

            'CREATE INDEX CI_' || pTableName || '_Main ON ' || pTableName || ' (CodTecRastr, IdEquipRastr, DtaHr, Sensor); ' ||

            'CREATE TRIGGER T_Before_I_' || pTableName || ' BEFORE INSERT ON ' || pTableName ||
            '  FOR EACH ROW EXECUTE PROCEDURE TF_Before_I_Temp(); ';
            
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END
$$;


ALTER FUNCTION public.f_createtemptable(ptablename character varying) OWNER TO postgres;

--
-- TOC entry 898 (class 1255 OID 11285486)
-- Name: f_descrpos(numeric, numeric, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_descrpos(plong numeric, plat numeric, praio double precision DEFAULT NULL::double precision) RETURNS TABLE(tpptoref integer, codptoref integer, nomeptoref character varying, angulo numeric, dist numeric)
    LANGUAGE plpgsql
    AS $$

DECLARE
  vTpPtoRef INTEGER;
  vCodPtoRef INT;
  vNomePtoRef VARCHAR(255);
  vAngulo DECIMAL(4,1);
  vDist DECIMAL(8,2);
  
BEGIN
  SELECT 
    PtoRef.Tp,
    PtoRef.Cod,
    PtoRef.Nome,
    Round((ST_Azimuth(PtoRef.Coord, SetSRID(MakePoint(pLong, pLat), 29101)) / (2 * PI()))::NUMERIC * 360, 1),
    Round(ST_Distance_Sphere(PtoRef.Coord, SetSRID(MakePoint(pLong, pLat), 29101))::NUMERIC / 1000, 2)
  INTO
    vTpPtoRef,
    vCodPtoRef,
    vNomePtoRef,
    vAngulo,
    vDist
  FROM 
    PtoRef,
    Config
  WHERE
    Config.Nome = 'INTEGRATEC_RAIO_DESCRPOS' AND
    PtoRef.Coord && ST_Buffer(ST_SetSRID(ST_MakePoint(pLong, pLat), 29101), COALESCE(pRaio, COALESCE(Config.VlrAtual, '40000')::NUMERIC) / 100000::NUMERIC)
  ORDER BY
    ST_Distance_Sphere(PtoRef.Coord, SetSRID(MakePoint(pLong, pLat), 29101))
  LIMIT 
    1;
    
  RETURN QUERY SELECT vTpPtoRef, vCodPtoRef, vNomePtoRef, vAngulo, vDist;
END
$$;


ALTER FUNCTION public.f_descrpos(plong numeric, plat numeric, praio double precision) OWNER TO postgres;

--
-- TOC entry 899 (class 1255 OID 11285487)
-- Name: f_diautil(integer, integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_diautil(pcodempdest integer, pcodcidufdest integer, pdtahr timestamp with time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  vTotal integer;
  vSemanaMes integer;
  vDia integer;
  vMes integer;
  vAno integer;
  vDiaSemana integer;
  
BEGIN

  vDia := DATE_PART('day', pDtaHr);
  vMes := DATE_PART('month', pDtaHr);
  vAno := DATE_PART('year', pDtaHr);
  vDiaSemana := EXTRACT(DOW FROM pDtaHr);
  vSemanaMes := DATE_PART('week', pDtaHr) - DATE_PART('week', DATE_TRUNC('month',pDtaHr));

  IF vDiaSemana IN (0,6) THEN
    RETURN FALSE;
  END IF;

  SELECT 1
    INTO vTotal
    FROM Feriado f
    JOIN TpFeriado t ON f.codtpferiado = t.codtpferiado 
    JOIN CidUf c ON c.codciduf = pCodCidUfDest
    WHERE (
        (t.municipal = TRUE AND f.codciduf = pCodCidUfDest) OR 
        (t.estadual = TRUE AND f.uf = c.siglauf) OR
        (t.federal AND f.codciduf IS NULL)
      )
      AND f.expediente = FALSE
      AND f.mes = vMes
      AND (f.dia = vDia OR (f.dia = -1 AND f.repete_dia_semana = vDiaSemana AND f.repete_semana_mes = vSemanaMes))
      AND ((f.ano = vAno OR f.ano = -1) OR (f.ano > -1 AND @(f.ano - vAno) % f.repete_ano = 0))
      AND pCodEmpDest != ALL(f.excecoes)
    LIMIT 1;

  RETURN COALESCE(vTotal,-1) = -1;
END;
$$;


ALTER FUNCTION public.f_diautil(pcodempdest integer, pcodcidufdest integer, pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 900 (class 1255 OID 11285491)
-- Name: f_distanciaempresas(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_distanciaempresas(pcodemp1 integer, pcodemp2 integer, pcasasdecimais integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $$
DECLARE
	vDistancia DOUBLE PRECISION DEFAULT 0;
BEGIN
	SELECT f_distanciaEmpresas(pCodEmp1, pCodEmp2, pCasasDecimais, TRUE) INTO vDistancia;
	RETURN vDistancia;
END
$$;


ALTER FUNCTION public.f_distanciaempresas(pcodemp1 integer, pcodemp2 integer, pcasasdecimais integer) OWNER TO postgres;

--
-- TOC entry 901 (class 1255 OID 11285492)
-- Name: f_distanciaempresas(integer, integer, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_distanciaempresas(pcodemp1 integer, pcodemp2 integer, pcasasdecimais integer, pconsiderarposicoes boolean) RETURNS double precision
    LANGUAGE plpgsql
    AS $$

DECLARE
	vEmp1 RECORD;
	vEmp2 RECORD;
	vRetorno DOUBLE PRECISION DEFAULT 0;
	
BEGIN

	-- selecionando os dados das empresas
	SELECT Nome, Pos_Lat, Pos_Long, Pos_Area, Pos_Raio INTO vEmp1 FROM Emp WHERE Emp.CodEmp = pCodEmp1;
	SELECT Nome, Pos_Lat, Pos_Long, Pos_Area, Pos_Raio INTO vEmp2 FROM Emp WHERE Emp.CodEmp = pCodEmp2;

	IF pConsiderarPosicoes = TRUE THEN
		-- se estiver vazio algum dado da empresa 1, dispara excecao
		IF vEmp1.Pos_Area IS NULL OR (vEmp1.Pos_Lat IS NULL AND vEmp1.Pos_Long IS NULL) THEN
			RAISE EXCEPTION 'A posição da empresa "%" não foi informada corretamente no cadastro', vEmp1.Nome;
		END IF;

		-- se estiver vazio algum dado da empresa 2, dispara excecao
		IF vEmp2.Pos_Area IS NULL OR (vEmp2.Pos_Lat IS NULL AND vEmp2.Pos_Long IS NULL) THEN
			RAISE EXCEPTION 'A posição da empresa "%" não foi informada corretamente no cadastro', vEmp2.Nome;
		END IF;
	END IF;
	
	-- calculando a distancia
	SELECT 
		ROUND(
			CAST(
				ST_Distance_Sphere(
					-- usando Area ou Lat/Long da empresa 1
					CASE WHEN vEmp1.Pos_Area IS NOT NULL THEN
						ST_GeomFromText(AsText(ST_Centroid(vEmp1.Pos_Area)), 29101)
					ELSE
						SetSRID(ST_MakePoint(vEmp1.Pos_Long, vEmp1.Pos_Lat), 29101)
					END,
					
					-- usando Area ou Lat/Long da empresa 2
					CASE WHEN vEmp2.Pos_Area IS NOT NULL THEN
						ST_GeomFromText(AsText(ST_Centroid(vEmp2.Pos_Area)), 29101)
					ELSE
						SetSRID(ST_MakePoint(vEmp2.Pos_Long, vEmp2.Pos_Lat), 29101)
					END
				) AS NUMERIC
			) / 1000
		, pCasasDecimais)
		INTO
			vRetorno;
			
	RETURN vRetorno;
END
$$;


ALTER FUNCTION public.f_distanciaempresas(pcodemp1 integer, pcodemp2 integer, pcasasdecimais integer, pconsiderarposicoes boolean) OWNER TO postgres;

--
-- TOC entry 902 (class 1255 OID 11285493)
-- Name: f_distanciapercorrida(integer, character varying, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_distanciapercorrida(pcodtecrastr integer, pidequiprastr character varying, pdtaini timestamp with time zone, pdtafim timestamp with time zone) RETURNS double precision
    LANGUAGE plpgsql
    AS $$
DECLARE
	-- ************************************************
	-- Calcula a distancia percorrida pelos pontos
	-- do geoposicionamento (Km)
	-- ************************************************
	vDistancia DOUBLE PRECISION;
BEGIN
	SELECT (ST_Length(ST_SetSRID(ST_MakeLine(res.pt), 4326), true) / 1000)::DOUBLE PRECISION
	INTO vDistancia
	FROM (
		SELECT ST_SetSRID(ST_Point(long, lat), 29101) AS pt 
		FROM f_pos(pCodTecRastr, pIdEquipRastr, pDtaIni, pDtaFim)
	) AS res;

	RETURN vDistancia;
	
END $$;


ALTER FUNCTION public.f_distanciapercorrida(pcodtecrastr integer, pidequiprastr character varying, pdtaini timestamp with time zone, pdtafim timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 903 (class 1255 OID 11285494)
-- Name: f_emiteproximoembarquecircuito(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_emiteproximoembarquecircuito(pcodembarqueanterior bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$

declare
	vEmbarqueAnterior Embarque;

	vNovoEmbarque Embarque;
	vCodNovoEmbarque BIGINT;
	
	vCodEmbarque BIGINT;
	vEtapas INTEGER[] := '{}'::INTEGER[];
	vEtapaEncontrada BOOLEAN := FALSE;
	
	vPrimeiraPerna CargaFluxoEmp;
	vProximaPerna CargaFluxoEmp;
	vUltimaPerna CargaFluxoEmp;

	vPrazoTransito RECORD;
	
	vRow RECORD;
	vOrigem INTEGER;
	vDestino INTEGER;

	vCodOrigem INTEGER;
	vCodDestino INTEGER;
	vCodCircuito INTEGER;

	vCargas BIGINT[];
	vDtasRemessa DATE[] := '{}'::DATE[];
	
	vDtaRemessa DATE;
	vAgendamento BOOLEAN := FALSE;
	vClimatizada BOOLEAN := FALSE;

	vCodigosEventos INT[];
	
begin
	
	SELECT * 
	INTO vEmbarqueAnterior 
	FROM Embarque 
	WHERE Embarque.CodEmbarque = pCodEmbarqueAnterior;

	vCodCircuito := vEmbarqueAnterior.CodCargaFluxo;
	vCodOrigem := vEmbarqueAnterior.CodEmpOrig;
	vCodDestino := vEmbarqueAnterior.CodEmpDest;

	FOR vRow IN 
		SELECT CargaFluxoEmp.* 
		FROM CargaFluxoEmp 
		WHERE CargaFluxoEmp.CodCargaFluxo = vCodCircuito
		ORDER BY CargaFluxoEmp.CodCargaFluxoEmp
	LOOP
		IF vPrimeiraPerna.CodCargaFluxo IS NULL AND vRow.CodEmpOrig IS NOT NULL THEN
			vPrimeiraPerna := vRow;
		END IF;

		vUltimaPerna := vRow;
		
		IF vEtapaEncontrada = TRUE AND vProximaPerna.CodCargaFluxo IS NULL THEN
			vProximaPerna := vRow;
			vEtapas := f_removeElements(vEtapas, ARRAY[vProximaPerna.CodCargaFluxoEmp], true);
			EXIT;
		END IF;

		vEtapas := ARRAY_APPEND(vEtapas, vRow.CodCargaFluxoEmp);

		-- 03/02/2014 - Hugo
		-- vamos ver somente se batem as empresas de destino.
		-- se bateu, ok
		IF vRow.CodEmpDest = vCodDestino THEN
			vEtapaEncontrada := TRUE;
		END IF;
	END LOOP;

	-- RAISE NOTICE '% % %', vProximaPerna.CodEmpOrig, vProximaPerna.CodEmpDest, vEtapas;
	
	-- Proxima perna não encontrada
	IF vProximaPerna.CodCargaFluxoEmp IS NULL THEN
	
		-- se nao encontrou a etapa atual, é uma viagem
		-- que saiu da ultima empresa e está voltando a origem
		-- então a proxima está saindo da origem
		IF NOT vEtapaEncontrada THEN
			vEtapas := ARRAY[vEtapas[1]];

			vProximaPerna.CodCargaFluxoEmp := vPrimeiraPerna.CodCargaFluxoEmp;
			vProximaPerna.CodEmpOrig := vPrimeiraPerna.CodEmpOrig;
			vProximaPerna.CodEmpDest := vPrimeiraPerna.CodEmpDest;
			vProximaPerna.CodCargaFluxo := vCodCircuito;
			
		-- encontrou a etapa atual, mas não a proxima
		-- então está fazendo a ultima perna cadastrada no fluxo;
		-- então está voltando a origem
		ELSE
			vProximaPerna.CodCargaFluxoEmp := vUltimaPerna.CodCargaFluxoEmp;
			vProximaPerna.CodEmpOrig := vUltimaPerna.CodEmpDest;
			vProximaPerna.CodEmpDest := vPrimeiraPerna.CodEmpOrig;
			vProximaPerna.CodCargaFluxo := vCodCircuito;
		END IF;

		-- RAISE NOTICE '% %', vCodorigem, vCodDestino;
		-- RAISE NOTICE '% % % %', vPrimeiraPerna.CodEmpOrig, vPrimeiraPerna.CodEmpDest, vEtapas, vEtapaEncontrada;
	END IF;
	
	-- pegando o prazo de transito
	SELECT p.*, 
		eo.TempoColetaCircuito, 
		ed.TempoEntregaCircuito,
		eo.CodTpEventoCjtoColeta,
		ed.CodTpEventoCjtoEntrega,
		eo.Forn as OrigForn,
		ed.Forn as DestForn,
		t.CtrlCarregamento,
		t.CtrlDescarregamento
	INTO vPrazoTransito
	FROM PrazoTransito p
	JOIN TpOper t ON t.TipoPrazoTransito = p.Tipo
	JOIN Emp eo ON eo.CodEmp = vProximaPerna.CodEmpOrig
	JOIN Emp ed ON ed.CodEmp = vProximaPerna.CodEmpDest
	WHERE p.Ativo = TRUE
		AND p.CodCidUfOrig = eo.CodCidUf
		AND p.CodCidUfDest = ed.CodCidUf
		AND t.CodTpOper = vEmbarqueAnterior.CodTpOper;

	vNovoEmbarque.TotNumVol := 0;
	vNovoEmbarque.TotPeso := 0;
	vNovoEmbarque.TotVol := 0;
	vNovoEmbarque.TotVlr := 0;
	vNovoEmbarque.TotNumPalete := 0;

	-- Codigos das cargas
	FOR vRow IN 
		SELECT 
			Carga.CodCarga,
			Carga.IsAgendamento,
			Carga.DtaRemessa,
			Carga.NumVol,
			Carga.Vol,
			Carga.Peso,
			Carga.NumPalete,
			Carga.Vlr,
			TpCarga.Climatizada
		FROM Carga
		JOIN TpCarga ON TpCarga.CodTpCarga = Carga.CodTpCarga
		JOIN CargaFluxoVeic ON CargaFluxoVeic.CodCargaFluxo = vCodCircuito 
			AND CargaFluxoVeic.CodVeic = vEmbarqueAnterior.CodVeic
			AND CargaFluxoVeic.CodCargaFluxoVeic = Carga.CodCargaFluxoVeic
		WHERE Carga.CodCarga = ANY(
			(
				SELECT ARRAY_AGG(c2.CodCarga)
				FROM Carga c2
				WHERE c2.CodStatCarga IN (1,9) -- A PROGRAMAR, A REPROGRAMAR
					AND c2.CodEmpOrig = vProximaPerna.CodEmpOrig
					AND c2.CodEmpDest = vProximaPerna.CodEmpDest
					AND c2.dtahrprevcoleta IS NOT NULL
					AND c2.CodCargaFluxoVeic = Carga.CodCargaFluxoVeic
					AND c2.dtahrprevcoleta < DATE(NOW()) + INTERVAL '1 DAY'
				GROUP BY c2.dtahrprevcoleta
				ORDER BY c2.dtahrprevcoleta ASC
				LIMIT 1
			)::BIGINT[]
		)
	LOOP
		vCargas := ARRAY_APPEND( vCargas, vRow.CodCarga );
		vDtasRemessa := ARRAY_APPEND( vDtasRemessa, vRow.DtaRemessa );
		IF vRow.IsAgendamento THEN
			vAgendamento := TRUE;
		END IF;

		IF vRow.Climatizada THEN
			vClimatizada := TRUE;
		END IF;

		vNovoEmbarque.TotNumVol := COALESCE(vNovoEmbarque.TotNumVol,0) + vRow.NumVol;
		vNovoEmbarque.TotPeso := COALESCE(vNovoEmbarque.TotPeso,0) + vRow.Peso;
		vNovoEmbarque.TotVol := COALESCE(vNovoEmbarque.TotVol,0) + vRow.Vol;
		vNovoEmbarque.TotVlr := COALESCE(vNovoEmbarque.TotVlr,0) + vRow.Vlr;
		vNovoEmbarque.TotNumPalete := COALESCE(vNovoEmbarque.TotNumPalete,0) + vRow.NumPalete;
	END LOOP;

	IF ARRAY_LENGTH(vDtasRemessa, 1) > 0 THEN
		SELECT MIN(dta) INTO vDtaRemessa FROM (SELECT UNNEST(vDtasRemessa) as dta) d;
	END IF;
	
	-- Atualizando os horarios das Cargas
	UPDATE Carga
	SET CodUsrAlter = 2, -- integrador
		DtaHrAlter = NOW(),
		CodStatCarga = 2,
		CodSitCarga = 2,
		CodEmptra = vEmbarqueAnterior.CodEmpTra,
		Prazo = vPrazoTransito.Prazo,
		Distancia = vPrazoTransito.distancia,
		DtaHrPrevColeta = NOW(),
		DtaHrPrevFimColeta = NOW() + (Carga.TempoPrevColeta || ' MINUTE')::INTERVAL,
		DtaHrPrevEntrega = NOW() + (Carga.TempoPrevColeta || ' MINUTE')::INTERVAL + (vPrazoTransito.Prazo || ' MINUTE')::INTERVAL,
		DtaHrPrevFimEntrega = NOW() + (Carga.TempoPrevColeta || ' MINUTE')::INTERVAL + (vPrazoTransito.Prazo || ' MINUTE')::INTERVAL + (Carga.TempoPrevEntrega || ' MINUTE')::INTERVAL
	WHERE Carga.CodCarga = ANY(vCargas);


	vNovoEmbarque.CodStatEmbarque := 1; -- Ag. Inicio
	vNovoEmbarque.CodUsrIncl := 2; -- Integrador
	vNovoEmbarque.CodSitEmbarque := 2; -- No Prazo
	vNovoEmbarque.CodUsrSitEmbarque := 2; -- Integrador
	
	vNovoEmbarque.DtaHrIncl := NOW();
	vNovoEmbarque.CodEmpOrig := vProximaPerna.CodEmpOrig;
	vNovoEmbarque.CodEmpEmbar := vProximaPerna.CodEmpOrig;
	vNovoEmbarque.CodEmpDest := vProximaPerna.CodEmpDest;
	vNovoEmbarque.CodCargaFluxo := vCodCircuito;
	vNovoEmbarque.EtapasCircuito := vEtapas;

	vNovoEmbarque.DtaRemessa = vDtaRemessa;
	vNovoEmbarque.CargaAgendada = vAgendamento;
	vNovoEmbarque.Climatizada = vClimatizada;
	
	vNovoEmbarque.CtrlCarregamento = vPrazoTransito.CtrlCarregamento;
	vNovoEmbarque.CtrlDescarregamento = vPrazoTransito.CtrlDescarregamento;
	
	vNovoEmbarque.CodTpOper := vEmbarqueAnterior.CodTpOper;
	vNovoEmbarque.CodVeic := vEmbarqueAnterior.CodVeic;
	vNovoEmbarque.CodEmptra := vEmbarqueAnterior.CodEmpTra;
	vNovoEmbarque.UfCarreta := vEmbarqueAnterior.UfCarreta;
	vNovoEmbarque.PlacaCarreta := vEmbarqueAnterior.PlacaCarreta;
	vNovoEmbarque.CodMot1 := vEmbarqueAnterior.CodMot1;
	vNovoEmbarque.CodMot2 := vEmbarqueAnterior.CodMot2;
	vNovoEmbarque.CircuitoId := vEmbarqueAnterior.CircuitoId;

	vNovoEmbarque.DistanciaTotal := vPrazoTransito.Distancia;
	vNovoEmbarque.DtaHrPrevIniColeta := NOW();
	vNovoEmbarque.DtaHrPrevIni := NOW() + (vPrazoTransito.TempoColetaCircuito || ' MINUTE')::INTERVAL;
	vNovoEmbarque.DtaHrPrevFim := vNovoEmbarque.DtaHrPrevIni + (vPrazoTransito.Prazo || ' MINUTE')::INTERVAL;
	
	vNovoEmbarque.CodigoGr := vEmbarqueAnterior.CodigoGr;
	vNovoEmbarque.Anteriores := '{}'::INTEGER[];

	vNovoEmbarque.TemRetorno := FALSE;
	vNovoEmbarque.TemLembrete := FALSE;
	vNovoEmbarque.TemExtraInfo := FALSE;
	vNovoEmbarque.TemOcorrencia := FALSE;
	vNovoEmbarque.TemOcorrencia := FALSE;
	vNovoEmbarque.AlertaTemperatura := FALSE;
	vNovoEmbarque.TemRegTemp := FALSE;

	--RAISE NOTICE '%,%,%,%,%,%', vCargas, 
	--	vNovoEmbarque.TotNumVol,
	--	vNovoEmbarque.TotPeso,
	--	vNovoEmbarque.TotVol,
	--	vNovoEmbarque.TotVlr,
	--	vNovoEmbarque.TotNumPalete;

	vNovoEmbarque.TotPrevColeta := 0;
	vNovoEmbarque.TotPrevEntrega := 0;
	vNovoEmbarque.TotRealEntrega := 0;
	vNovoEmbarque.TotRealColeta := 0;
	
	vNovoEmbarque.Notificado := FALSE;

	IF ARRAY_LENGTH(vEtapas,1) > 1 THEN
		vNovoEmbarque.Anteriores := f_removeDuplicates( ARRAY_APPEND(vEmbarqueAnterior.Anteriores::BIGINT[], pCodEmbarqueAnterior) );
	END IF;

	-- inserindo o novo embarque
	vNovoEmbarque.CodEmbarque := nextval('sq_codembarque'::regclass);
	INSERT INTO Embarque SELECT vNovoEmbarque.* RETURNING CodEmbarque INTO vCodNovoEmbarque;

	IF ARRAY_LENGTH(vCargas,1) > 0 THEN
		-- inserindo os embarquecarga's
		INSERT INTO EmbarqueCarga (
			CodUsrIncl,
			DtaHrIncl,
			CodEmbarque,
			CodCarga,
			TempoPrevColeta,
			TempoPrevEntrega,
			Prazo,
			Distancia
		) SELECT
			2, -- integrador
			NOW(),
			vCodNovoEmbarque,
			Carga.CodCarga,
			Carga.TempoPrevColeta,
			Carga.TempoPrevEntrega,
			vPrazoTransito.Prazo,
			vPrazoTransito.Distancia
			
		FROM Carga WHERE Carga.CodCarga = ANY(vCargas);

		-- se tem conjunto de carregamento
		IF vPrazoTransito.OrigForn = FALSE THEN
			IF vPrazoTransito.CodTpEventoCjtoColeta IS NOT NULL AND vPrazoTransito.CtrlCarregamento THEN
				vCodigosEventos := f_gerarEventosEmbarque(vCodNovoEmbarque,vNovoEmbarque.DtaHrPrevIniColeta,vPrazoTransito.CodTpEventoCjtoColeta,vProximaPerna.CodEmpOrig);
				vNovoEmbarque.CodTpEvento := vCodigosEventos[1];
				-- RAISE NOTICE '%', vCodigosEventos;
			END IF;
		END IF;

		-- se tem conjunto de descarregamento
		IF vPrazoTransito.DestForn = FALSE THEN
			IF vPrazoTransito.CodTpEventoCjtoEntrega IS NOT NULL AND vPrazoTransito.CtrlDescarregamento THEN
				vCodigosEventos := f_gerarEventosEmbarque(vCodNovoEmbarque,vNovoEmbarque.DtaHrPrevFim,vPrazoTransito.CodTpEventoCjtoEntrega,vProximaPerna.CodEmpDest);
				IF vNovoEmbarque.CodTpEvento IS NULL THEN
					vNovoEmbarque.CodTpEvento := vCodigosEventos[1];
				END IF;
			END IF;
		END IF;

		-- RAISE NOTICE '%', vNovoEmbarque.CodTpEvento;
		
		-- se achou um conjunto, atualizamos o embarque
		IF vNovoEmbarque.CodTpEvento IS NOT NULL THEN
			UPDATE Embarque
			SET CodTpEvento = vNovoEmbarque.CodTpEvento, 
				TpEvento_Nome = TpEvento.Nome
			FROM TpEvento
			WHERE Embarque.CodEmbarque = vCodNovoEmbarque
				AND TpEvento.CodTpEvento = vNovoEmbarque.CodTpEvento;
		END IF;
	END IF;

	-- atualizando o fluxo
	UPDATE CargaFluxo
	SET Embarques = f_RemoveElements( ARRAY_APPEND(Embarques::BIGINT[], vCodNovoEmbarque),  ARRAY[pCodEmbarqueAnterior], TRUE)
	WHERE CargaFluxo.CodCargaFluxo = vCodCircuito;

	-- Embarques do Veiculo
	UPDATE CargaFluxoVeic
	SET CodEmbarque = vCodNovoEmbarque,
		Embarques = f_RemoveDuplicates( ARRAY_APPEND(CargaFluxoVeic.Embarques::BIGINT[], vCodNovoEmbarque) ),
		DtaHrAlter = NOW(),
		CodUsrAlter = 2 -- integrador
	WHERE CargaFluxoVeic.CodVeic = vNovoEmbarque.CodVeic
		AND CargaFluxoVeic.CodCargaFluxo = vCodCircuito
		AND CargaFluxoVeic.Ativo = TRUE;
		
	
	RETURN TRUE;
end
$$;


ALTER FUNCTION public.f_emiteproximoembarquecircuito(pcodembarqueanterior bigint) OWNER TO postgres;

--
-- TOC entry 904 (class 1255 OID 11285496)
-- Name: f_empid(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_empid(pid character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN 'Id: ' || TRIM(pId);
END ; $$;


ALTER FUNCTION public.f_empid(pid character varying) OWNER TO postgres;

--
-- TOC entry 887 (class 1255 OID 11285497)
-- Name: f_empnome(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_empnome(papelido character varying, pnome character varying, pid character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TRIM(COALESCE(pApelido, '')) != '' THEN
    RETURN TRIM(pApelido) || ' [ Id: ' || pId || ' ]';
  ELSE
    RETURN TRIM(pNome) || ' [ Id: ' || pId || ' ]';
  END IF;
END ; $$;


ALTER FUNCTION public.f_empnome(papelido character varying, pnome character varying, pid character varying) OWNER TO postgres;

--
-- TOC entry 906 (class 1255 OID 11285498)
-- Name: f_gerareventosembarque(bigint, timestamp with time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_gerareventosembarque(pcodembarque bigint, pdtainicio timestamp with time zone, pcodconjunto integer, pcodemp integer) RETURNS integer[]
    LANGUAGE plpgsql
    AS $$

declare
	vRow RECORD;
	vIni TIMESTAMPTZ;
	vFim TIMESTAMPTZ;
	vCodigos INT[] := '{}';
BEGIN
	vIni := pDtaInicio;
	
	FOR vRow in
		SELECT e.*
		FROM TpEvento e
		WHERE e.CodTpEventoCjto = pCodConjunto
		ORDER BY e.OrdemExec
	LOOP
		vFim := vIni + (vRow.TempoMedio || ' MINUTE')::INTERVAL;
		INSERT INTO TpEventoEmbarque (
			CodEmp,
			CodEmbarque,
			CodTpEvento,
			CodTpEventoCjto,
			NomeTpEvento,
			OrdemExec,
			DtaHrPrevIni,
			DtaHrPrevFim
		) VALUES (
			pCodEmp,
			pCodEmbarque,
			vRow.CodTpEvento,
			pCodConjunto,
			vRow.Nome,
			vRow.OrdemExec,
			vIni,
			vFim
		);
		vIni := vIni + (vRow.TempoMedio || ' MINUTE')::INTERVAL;
		vCodigos := ARRAY_APPEND(vCodigos, vRow.CodTpEvento);
	END LOOP;

	RETURN vCodigos;
end
$$;


ALTER FUNCTION public.f_gerareventosembarque(pcodembarque bigint, pdtainicio timestamp with time zone, pcodconjunto integer, pcodemp integer) OWNER TO postgres;

--
-- TOC entry 907 (class 1255 OID 11285499)
-- Name: f_gerarjsoncargas(character varying, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_gerarjsoncargas(p_tipo character varying, p_codigo bigint) RETURNS text
    LANGUAGE plpgsql
    AS $$
declare
	grupos_str text default '';

	compacto_str text := '';
	expandido_str text := '';
	aux_str text := '';

	grupos integer[];
	cargas_agrupadas varchar[];
	cargas_soltas varchar[];
	cargas_aux varchar[];
	
	uid varchar;
	sufix varchar;
	
	row RECORD;
	item record;
	
	json text default '';
begin

	CREATE TEMP TABLE similaridade (grupo VARCHAR, cargas VARCHAR[]);

	IF p_tipo = 'EMBARQUE' THEN
		CREATE TEMP TABLE registros as
		SELECT c.codcarga, c.id as cargaid, c.codcargagrupo, c.principal
		FROM embarquecarga ec
		JOIN carga c on c.codcarga = ec.codcarga
		WHERE ec.codembarque = p_codigo
		ORDER BY c.id, c.codcargagrupo;
	ELSIF p_tipo = 'COLETA' THEN
		CREATE TEMP TABLE registros as
		SELECT c.codcarga, c.id as cargaid, c.codcargagrupo, c.principal
		FROM progcoletacarga ec
		JOIN carga c on c.codcarga = ec.codcarga
		WHERE ec.codprogcoleta = p_codigo
		ORDER BY c.id, c.codcargagrupo;
	END IF;

	FOR ROW IN SELECT * FROM registros
	LOOP
		IF row.codcargagrupo IS NOT NULL AND row.principal THEN
			grupos := array_append(grupos, row.codcargagrupo);
		END IF;

		IF row.codcargagrupo IS NOT NULL THEN
			cargas_agrupadas := array_append(cargas_agrupadas, row.cargaid);
		ELSE
			cargas_soltas := array_append(cargas_soltas, row.cargaid);
		END IF;
	END LOOP;

	-- criando o indice de visao compacta
	-- cargas soltas & cargas similares sem grupo
	FOR item IN SELECT UNNEST(cargas_soltas) as id 
	LOOP
		IF position('-' IN item.id) > 0 THEN
			sufix := SUBSTRING(item.id, 1, position('-' IN item.id)-1);
			IF (uid) IS DISTINCT FROM (sufix) THEN
				uid := sufix;
				INSERT INTO similaridade VALUES (uid,'{}');
			END IF;

			UPDATE similaridade 
			SET cargas = array_append(cargas,item.id::VARCHAR)
			WHERE grupo = uid;
		END IF;
	END LOOP;

	DELETE FROM similaridade WHERE array_length(cargas,1) < 2;

	SELECT array_agg(id)
	INTO cargas_aux
	FROM (
		SELECT id FROM(SELECT UNNEST(cargas_soltas) as id) as sub1
		WHERE id NOT IN (SELECT UNNEST(cargas) FROM similaridade)
	) as s;
	
	compacto_str := '"compacto":{"grupos":[%grupos%],"cargas":[%cargas%],"similares":[%similares%]}';

	IF array_length(cargas_aux,1) > 0 THEN
		aux_str := '"' || array_to_string(cargas_aux,'","') || '"';
	END IF;

	compacto_str := REPLACE(compacto_str, '%cargas%', aux_str);
	aux_str := '';
	cargas_aux := '{}';

	FOR row IN SELECT * FROM similaridade 
	LOOP
		aux_str := aux_str || '{"grupo":"' || row.grupo || '","cargas":[';
		IF array_length(row.cargas,1) > 0 THEN
			aux_str := aux_str || '"' || array_to_string(row.cargas,'","') || '"';
		END IF;
		aux_str := aux_str || ']},';
	END LOOP;

	IF LENGTH(aux_str) > 0 THEN
		aux_str := SUBSTRING(aux_str,1,LENGTH(aux_str)-1);
	END IF;

	compacto_str := REPLACE(compacto_str, '%similares%', aux_str);
	aux_str := '';
	
	

	-- criando o indice de visao expandida
	-- "soltamos" as cargas dos grupos e depois agrupamos por similaridade
	TRUNCATE similaridade;
	uid := '';
	
	FOR item IN SELECT id FROM (SELECT UNNEST(cargas_soltas || cargas_agrupadas) as id) as s ORDER BY id
	LOOP
		IF position('-' IN item.id) > 0 THEN
			sufix := SUBSTRING(item.id, 1, position('-' IN item.id)-1);
			IF (uid) IS DISTINCT FROM (sufix) THEN
				uid := sufix;
				INSERT INTO similaridade VALUES (uid,'{}');
			END IF;

			UPDATE similaridade 
			SET cargas = array_append(cargas,item.id::VARCHAR)
			WHERE grupo = uid;
		END IF;
	END LOOP;

	DELETE FROM similaridade WHERE array_length(cargas,1) < 2;

	SELECT array_agg(id)
	INTO cargas_aux
	FROM (
		SELECT id FROM(SELECT UNNEST(array_cat(cargas_soltas,cargas_agrupadas)) as id) as sub1
		WHERE id NOT IN (SELECT UNNEST(cargas) FROM similaridade)
	) as s;
	
	expandido_str := '"expandido":{"grupos":[],"cargas":[%cargas%],"similares":[%similares%]}';

	IF array_length(cargas_aux,1) > 0 THEN
		aux_str := '"' || array_to_string(cargas_aux,'","') || '"';
	END IF;

	expandido_str := REPLACE(expandido_str, '%cargas%', aux_str);
	aux_str := '';
	cargas_aux := '{}';

	FOR row IN SELECT * FROM similaridade 
	LOOP
		aux_str := aux_str || '{"grupo":"' || row.grupo || '","cargas":[';
		IF array_length(row.cargas,1) > 0 THEN
			aux_str := aux_str || '"' || array_to_string(row.cargas,'","') || '"';
		END IF;
		aux_str := aux_str || ']},';
	END LOOP;

	IF LENGTH(aux_str) > 0 THEN
		aux_str := SUBSTRING(aux_str,1,LENGTH(aux_str)-1);
	END IF;

	expandido_str := REPLACE(expandido_str, '%similares%', aux_str);
	aux_str := '';
	
	-- criando o indice de grupos
	FOR ROW IN 
		SELECT g.codcargagrupo,g.id, array_agg(c.id) AS cargas 
		FROM cargagrupo g,carga c 
		WHERE g.codcargagrupo in (SELECT unnest(grupos)) 
		AND c.codcarga in (SELECT unnest(g.cargas)) 
		GROUP BY g.codcargagrupo 
	LOOP 
		grupos_str := grupos_str || '{"codgrupo":'||row.codcargagrupo||',';
		grupos_str := grupos_str || '"id":"'||row.id||'",';
		grupos_str := grupos_str || '"cargas":[';

		IF array_length(row.cargas,1) > 0 THEN
			grupos_str := grupos_str || '"' || array_to_string(row.cargas,'","') || '"';
		END IF;

		grupos_str := grupos_str || ']},';
	END LOOP;

	IF LENGTH(grupos_str) > 0 THEN
		grupos_str := substr(grupos_str, 1, length(grupos_str)-1);
	END IF;

	

	json := '{' || REPLACE(compacto_str, '%grupos%', grupos_str);
	json := json || ',' || expandido_str || '}';

	DROP TABLE similaridade;
	DROP TABLE registros;

	RETURN json;
end;
$$;


ALTER FUNCTION public.f_gerarjsoncargas(p_tipo character varying, p_codigo bigint) OWNER TO postgres;

--
-- TOC entry 908 (class 1255 OID 11285500)
-- Name: f_gerarlogalteracoes(character varying, character varying, hstore, hstore, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_gerarlogalteracoes(ptabela character varying, pchaveprimaria character varying, pvaloresantigos hstore, pvaloresnovos hstore, ptgop character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$


DECLARE
  vTemp HSTORE;
  vChave TEXT;
  vChaveValor TEXT;
  vRow RECORD;
  vTempRow RECORD;
  vLog Log_Alteracoes;
  vTotalKeys INT := 0;
BEGIN

  -- pega a chave primaria da tabela em questão.
  IF pChavePrimaria IS NULL THEN
    SELECT               
      pg_attribute.attname, count(*) over()
    INTO
      vChave, vTotalKeys
    FROM pg_index, pg_class, pg_attribute 
    WHERE 
      pg_class.oid = pTabela::regclass AND
      indrelid = pg_class.oid AND
      pg_attribute.attrelid = pg_class.oid AND 
      pg_attribute.attnum = any(pg_index.indkey)
      AND indisprimary;
      
    IF COALESCE(vTotalKeys,0) <> 1 THEN
      RAISE NOTICE 'The table must have only one primary key to be logged';
      RETURN;
    END IF;

  ELSE
    vChave := pChavePrimaria;
  END IF;

  -- transforma os dados da linha em hstore
  IF pTgOp = 'DELETE' THEN
    vTemp := pValoresAntigos;
  ELSE
    vTemp := pValoresNovos;
  END IF;
  
  -- inicia os dados de log
  vLog.Data_Alteracao := NOW();
  vLog.Nome_Chave := vChave;
  
  -- codigo do usuario que está fazendo a ação
  SELECT codusr INTO vLog.CodUsr FROM temp_codusr;

  -- pega o valor da chave primaria
  SELECT value INTO vLog.Valor_Chave FROM each(vTemp) WHERE key = vChave;
  vLog.Tabela := pTabela;

  -- vendo o tipo de operação
  IF pTgOp = 'INSERT' THEN
    vLog.Tipo := 1;
    vLog.Valores_Novos := NULL;
    vLog.Valores_Antigos := NULL;
  ELSIF pTgOp = 'UPDATE' THEN
    -- nada mudou, entao nao faz nada
    IF HSTORE('') = pValoresNovos - pValoresAntigos THEN
      RETURN;
    END IF;

    vLog.Tipo := 2;
    vLog.Valores_Novos := pValoresNovos - pValoresAntigos;
    vLog.Valores_Antigos := SLICE( pValoresAntigos,  AKEYS(pValoresNovos - pValoresAntigos) );
  ELSE 
    vLog.Tipo := 3;
    vLog.Valores_Antigos := pValoresAntigos;
  END IF;

  -- gravando o log
  EXECUTE 'INSERT INTO Log_Alteracoes (data_alteracao,nome_chave,valor_chave,tabela,tipo,valores_novos,valores_antigos,codusr)  
    SELECT $1.data_alteracao,$1.nome_chave,$1.valor_chave,$1.tabela,$1.tipo,$1.valores_novos,$1.valores_antigos,$1.codusr' USING vLog;

  
  EXCEPTION 
    WHEN undefined_table THEN
      RETURN;
END;
$_$;


ALTER FUNCTION public.f_gerarlogalteracoes(ptabela character varying, pchaveprimaria character varying, pvaloresantigos hstore, pvaloresnovos hstore, ptgop character varying) OWNER TO postgres;

--
-- TOC entry 909 (class 1255 OID 11285501)
-- Name: f_getsugestaotipoveiculo(bigint[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_getsugestaotipoveiculo(pcargas bigint[]) RETURNS integer
    LANGUAGE plpgsql
    AS $$

  DECLARE
    vRec RECORD;
    vCodigoFinal INTEGER := 0;
    vPrimeiroCodigo INTEGER := -1;

  BEGIN
    FOR vRec IN 
          WITH tmp_cargasInformadas AS (
               SELECT codcarga, 
                      codcargagrupo
                 FROM carga
                WHERE carga.codcarga = ANY(pCargas)
                
          ), tmp_cargasGrupo AS (
               SELECT unnest(cargas) as codcarga
                 FROM cargagrupo
                WHERE cargagrupo.codcargagrupo IN (SELECT codcargagrupo FROM tmp_cargasInformadas)
                
          ), tmp_cargasBanco AS (
              SELECT c.codcarga, 
                     c.codtpcarga, 
                     c.codigoexternoveic, 
                     c.codcargagrupo, 
                     c.principal
                FROM carga c 
               WHERE c.codcarga in (SELECT codcarga FROM tmp_cargasInformadas UNION SELECT codcarga FROM tmp_cargasGrupo)
          )

          SELECT c.codcarga, 
                 COALESCE(c.codtpcarga, -1) as codtpcarga, 
                 COALESCE(c.codigoexternoveic, '-1') as codigoexternoveic, 
                 COALESCE(c.codcargagrupo, -1) as codcargagrupo, 
                 c.principal,
                 COALESCE(tv.codtpveic, -1) as codtpveic,
                 t.prioridade
            FROM tmp_cargasBanco c 
       LEFT JOIN tpveicoper tv ON tv.codigoexterno = c.codigoexternoveic AND tv.codtpcarga = c.codtpcarga
       LEFT JOIN tpcarga t ON t.codtpcarga = c.codtpcarga
        ORDER BY t.prioridade ASC
    LOOP
      IF vPrimeiroCodigo = -1 THEN
        vPrimeiroCodigo := vRec.codtpveic;
      END IF;

      IF vRec.codtpcarga = -1 OR vRec.codigoexternoveic = '-1' OR vRec.CodTpVeic = -1 THEN
        vCodigoFinal := -1;
      END IF;
    END LOOP;

    IF vCodigoFinal = 0 AND vPrimeiroCodigo > -1 THEN
      vCodigoFinal := vPrimeiroCodigo;
    END IF;

    IF vCodigoFinal = 0 THEN
      vCodigoFinal := -1;
    END IF;

    RETURN vCodigoFinal;
  END;

$$;


ALTER FUNCTION public.f_getsugestaotipoveiculo(pcargas bigint[]) OWNER TO postgres;

--
-- TOC entry 910 (class 1255 OID 11285502)
-- Name: f_getsugestaotransportadorabid(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_getsugestaotransportadorabid(porig integer, pdest integer, ptpcarga integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$

  BEGIN
    RETURN f_getSugestaoTransportadoraBid(pOrig, pDest, pTpCarga, '{}'::INTEGER[]);
  END;

$$;


ALTER FUNCTION public.f_getsugestaotransportadorabid(porig integer, pdest integer, ptpcarga integer) OWNER TO postgres;

--
-- TOC entry 911 (class 1255 OID 11285503)
-- Name: f_getsugestaotransportadorabid(integer, integer, integer, integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_getsugestaotransportadorabid(porig integer, pdest integer, ptpcarga integer, pignorartransps integer[]) RETURNS integer
    LANGUAGE plpgsql
    AS $$

DECLARE
  vRec RECORD;
  vCodEmpTra INTEGER := -1;

BEGIN
  FOR vRec IN 
      SELECT CASE WHEN b.Prox_Transp = bt.Ordem THEN -1 ELSE 0 END as OrdemPrincipal,
             (pctprev - pctreal)::numeric(10,3) as Gap, 
             bt.Ordem,
             b.CodBid, 
             bt.CodEmpTra
        FROM Bid b, 
             Bid_Transp bt
       WHERE b.CodBid = bt.CodBid
         --AND b.Prox_Transp = bt.Ordem
         AND b.CodCidUfOrigem = pOrig
         AND b.CodCidUfDestino = pDest
         AND b.CodTpCarga = pTpCarga
         AND b.Ativo
         AND CURRENT_DATE >= b.DtaVigencia
    ORDER BY 1, 2, 3
  LOOP
    IF NOT vRec.CodEmpTra = ANY(pIgnorarTransps) THEN
      vCodEmpTra := vRec.CodEmpTra;
      EXIT;
    END IF;
  END LOOP;

  RETURN COALESCE(vCodEmpTra, -1);
END;

$$;


ALTER FUNCTION public.f_getsugestaotransportadorabid(porig integer, pdest integer, ptpcarga integer, pignorartransps integer[]) OWNER TO postgres;

--
-- TOC entry 912 (class 1255 OID 11285504)
-- Name: f_gettpcargaconsiderada(bigint[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_gettpcargaconsiderada(pcargas bigint[]) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  DECLARE
    vCodTpCarga int[];
    vCodigoFinal int := -1;
    vExisteClimatizada boolean := false;
  BEGIN
    SELECT ARRAY_AGG(COALESCE(Carga.CodTpCarga,-1))
      INTO vCodTpCarga
      FROM Carga
     WHERE Carga.CodCarga = ANY(pCargas);

    IF vCodTpCarga IS DISTINCT FROM NULL THEN
      vCodTpCarga := f_removeDuplicates(vCodTpCarga);

      IF ARRAY_LENGTH(vCodTpCarga,1) = 1 THEN
        vCodigoFinal := vCodTpCarga[1];
        
      ELSE
          vCodigoFinal := f_getTpCargaPrioritaria(vCodTpCarga);

      END IF;
    END IF;

    RETURN vCodigoFinal;
  END;
$$;


ALTER FUNCTION public.f_gettpcargaconsiderada(pcargas bigint[]) OWNER TO postgres;

--
-- TOC entry 913 (class 1255 OID 11285505)
-- Name: f_gettpcargaprioritaria(integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_gettpcargaprioritaria(pcodigos integer[]) RETURNS integer
    LANGUAGE plpgsql
    AS $$
  DECLARE
    vCodigoFinal INTEGER := -1;

  BEGIN
    IF f_countArray(pCodigos) = 1 THEN
      vCodigoFinal := pCodigos[1];

    ELSIF f_countArray(pCodigos) > 1 THEN
        SELECT CodTpCarga
          INTO vCodigoFinal
          FROM TpCarga
         WHERE TpCarga.CodTpCarga = ANY(pCodigos)
      ORDER BY TpCarga.Prioridade ASC
         LIMIT 1;

    END IF;

    RETURN vCodigoFinal;
  END;
$$;


ALTER FUNCTION public.f_gettpcargaprioritaria(pcodigos integer[]) OWNER TO postgres;

--
-- TOC entry 914 (class 1255 OID 11285506)
-- Name: f_horariomanual(bigint, bigint, text, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_horariomanual(pcodembarquecarga bigint, pcodembarque bigint, ptipoevento text, pdtahr timestamp with time zone) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	vCurRec RECORD;
	vContains BOOLEAN;
	vCodTpEvento INT;
	vEntrada BOOLEAN;
	vColeta BOOLEAN;
  
BEGIN
	-- selecionamos o codigo do tipo de evento
	SELECT codTpEvento INTO vCodTpEvento FROM tpevento WHERE descr = pTipoEvento;

	-- verifica se o tipo de evento e uma entrada
	IF pTipoEvento = 'CHEGADA NA PLANTA' THEN
		vEntrada := TRUE;
		vColeta := TRUE;

	ELSIF pTipoEvento = 'CHEGADA NO CLIENTE' THEN
		vEntrada := TRUE;
		vColeta := FALSE;

	ELSIF pTipoEvento = 'SAIDA DA PLANTA' THEN
		vEntrada := FALSE;
		vColeta := TRUE;

	ELSIF pTipoEvento = 'SAIDA DO CLIENTE' THEN
		vEntrada := FALSE;
		vColeta := FALSE;
	END IF;

	RAISE NOTICE 'Coleta %', vColeta;
	RAISE NOTICE 'Entrada %', vEntrada;
	

	-- seleciona os embarquecarga do embarque informado
	FOR vCurRec IN
		SELECT 
			'O' AS Tp, 
			EmbarqueCarga.EmpOrig_Id AS Emp_Id,
			EmbarqueCarga.EmpOrig_Pos_Area AS Pos_Area,
			EmbarqueCarga.DtaHrIniColeta AS DtaHrIni, 
			EmbarqueCarga.DtaHrFimColeta AS DtaHrFim,
			EmbarqueCarga.CodEmbarqueCarga
		FROM 
			EmbarqueCarga
		WHERE
			EmbarqueCarga.CodEmbarque = pCodEmbarque AND
			vColeta = TRUE

		UNION

		SELECT 
			'D' AS Tp, 
			EmbarqueCarga.EmpDest_Id AS Emp_Id,
			EmbarqueCarga.EmpDest_Pos_Area AS Pos_Area,
			EmbarqueCarga.DtaHrIniEntrega AS DtaHrIni, 
			EmbarqueCarga.DtaHrFimEntrega AS DtaHrFim,
			EmbarqueCarga.CodEmbarqueCarga
		FROM 
			EmbarqueCarga
		WHERE
			EmbarqueCarga.CodEmbarque = pCodEmbarque AND
			EmbarqueCarga.CodEmbarqueCarga = pCodEmbarqueCarga 

		ORDER BY 
			1 DESC
	LOOP
		RAISE NOTICE 'codigo %, tipo %', vCurRec.CodEmbarqueCarga, vCurRec.Tp;
		
		-- se for uma coleta 
		IF vColeta AND vCurRec.Tp = 'O' THEN
			RAISE NOTICE 'Entrou na coleta';
			
			-- vamos incluir o evento
			INSERT INTO evento (codusrincl, dtahrincl, dtahralter, codtpevento, dtahrevento, codembarque, codembarquecarga)
			VALUES (
				1
				, NOW()
				, NOW()
				, vCodTpEvento
				, pDtaHr
				, pCodEmbarque
				, vCurRec.CodEmbarqueCarga
			);
			
			-- se for entrada na planta
			IF vEntrada THEN
			
				-- atualiza a hora de entrada na planta 
				UPDATE
					EmbarqueCarga
				SET
					DtaHrIniColeta = pDtaHr
				WHERE
					EmbarqueCarga.EmpOrig_Id = vCurRec.Emp_Id AND
					EmbarqueCarga.CodEmbarque = pCodEmbarque;
					
			-- mas se for saida da planta
			ELSE
				
				-- atualiza a hora de fim de coleta
				UPDATE
					EmbarqueCarga
				SET
					DtaHrFimColeta = pDtaHr
				WHERE
					EmbarqueCarga.EmpOrig_Id = vCurRec.Emp_Id AND
					EmbarqueCarga.CodEmbarque = pCodEmbarque;
			END IF;
		END IF;
			
		-- se for uma entrega
		IF NOT vColeta AND vCurRec.Tp = 'D' THEN
			RAISE NOTICE 'Entrou na entrega';
			
			-- vamos incluir o evento
			INSERT INTO evento (codusrincl, dtahrincl, dtahralter, codtpevento, dtahrevento, codembarque, codembarquecarga)
			VALUES (
				1
				, NOW()
				, NOW()
				, vCodTpEvento
				, pDtaHr
				, pCodEmbarque
				, vCurRec.CodEmbarqueCarga
			);
		
			-- se estiver entrando
			IF vEntrada THEN
			
				-- atualiza a hora de entrada no cliente
				UPDATE
					EmbarqueCarga
				SET
					DtaHrIniEntrega = pDtaHr
				WHERE
					EmbarqueCarga.EmpDest_Id = vCurRec.Emp_Id AND
					EmbarqueCarga.CodEmbarque = pCodEmbarque AND
					EmbarqueCarga.CodEmbarqueCarga = pCodEmbarqueCarga;
					
			-- se estiver saindo
			ELSE
				
				-- atualiza a hora de fim
				UPDATE
					EmbarqueCarga
				SET
					DtaHrFimEntrega = pDtaHr
				WHERE
					EmbarqueCarga.EmpDest_Id = vCurRec.Emp_Id AND
					EmbarqueCarga.CodEmbarque = pCodEmbarque AND
					EmbarqueCarga.CodEmbarqueCarga = pCodEmbarqueCarga;

				-- atualiza o status do embarque
				UPDATE 
					Embarque
				SET
					CodStatEmbarque = 3, -- TODO: vai ter q pegar de uma config
					CodUsrStatEmbarque = 1
				WHERE
					vCurRec.Tp = 'D' AND
					Embarque.DtaHrFim IS NULL AND
					Embarque.DtaHrIni IS NOT NULL AND
					Embarque.CodEmbarque = pCodEmbarque AND
					Embarque.CodEmbarque NOT IN(
						SELECT
							EmbarqueCarga.CodEmbarque
						FROM
							EmbarqueCarga
						WHERE
							EmbarqueCarga.DtaHrFimEntrega IS NULL AND
							EmbarqueCarga.CodEmbarque = pCodEmbarque
					);
					
			END IF;
		END IF;
	END LOOP;
  
	-- checando se o embarque esta mesmo finalizado ou nao
	PERFORM f_checaEmbarqueFinalizado( CAST(pcodembarque AS INTEGER) );
END
	$$;


ALTER FUNCTION public.f_horariomanual(pcodembarquecarga bigint, pcodembarque bigint, ptipoevento text, pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 915 (class 1255 OID 11285507)
-- Name: f_limiteaceiteoferta(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_limiteaceiteoferta(pdtahrincl timestamp with time zone) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
	DECLARE
		vRetorno TIMESTAMP WITH TIME ZONE DEFAULT NULL;
	BEGIN

		IF pDtaHrIncl IS NOT NULL THEN
			vRetorno := pDtaHrIncl + CAST(f_config('TOLERANCIA_PRAZO_ACEITE') || ' MINUTES' AS INTERVAL);
		END IF;
		
		RETURN vRetorno;
	
	END
$$;


ALTER FUNCTION public.f_limiteaceiteoferta(pdtahrincl timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 916 (class 1255 OID 11285508)
-- Name: f_limitesinal(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_limitesinal(p_dtahrprevini timestamp with time zone) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
BEGIN
  return COALESCE(p_dtahrprevini,now()) - CAST(f_config('TOLERANCIA_SINAL_VEICULO') || ' minutes' AS INTERVAL);
END
$$;


ALTER FUNCTION public.f_limitesinal(p_dtahrprevini timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 917 (class 1255 OID 11285509)
-- Name: f_limitesinalveiculo(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_limitesinalveiculo(pdtahr timestamp with time zone) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
	DECLARE
		vRetorno TIMESTAMP WITH TIME ZONE DEFAULT NULL;
	BEGIN

		IF pDtaHr IS NOT NULL THEN
			vRetorno := pDtaHr - CAST(f_config('TOLERANCIA_SINAL_VEICULO') || ' MINUTES' AS INTERVAL);
		END IF;
		
		RETURN vRetorno;
	
	END
$$;


ALTER FUNCTION public.f_limitesinalveiculo(pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 918 (class 1255 OID 11285510)
-- Name: f_linhamensagem(text, text[], text[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_linhamensagem(psql text, plabels text[], pcampos text[]) RETURNS text
    LANGUAGE plpgsql
    AS $$

DECLARE
	vRetorno TEXT;              -- string de retorno
	vRecord RECORD;             -- armazena o resultado da consulta
	vIndex INTEGER;             -- contador de indice
	vTamanho INTEGER;           -- auxiliar para pegar o tamanho dos campos
	vCampos TEXT;               -- representacao de string dos campos selecionados
	vSql TEXT;                  -- consulta que vai ser executada
	vValores TEXT[][];          -- armazena os valores encontrados
	vMatriz TEXT;               -- representacao em string da matriz dos valores encontrados
	vLinhaAtual INTEGER;        -- contador de linha
	vAux TEXT[];                -- auxiliar para acessar um sub-elemento
	vSeparadorColuna TEXT;      -- separador de colunas no caso de texto pleno

BEGIN
	vRetorno := '';	
	vLinhaAtual := 1;
	vSeparadorColuna := ', ';

	-- montaremos uma string com os nomes dos campos
	-- que vamos usar
	vCampos := '';
	FOR vIndex IN 1 .. ARRAY_UPPER( pCampos, 1 ) LOOP
		vCampos := vCampos || pCampos[ vIndex ] || ',';
	END LOOP;

	-- tiramos a ultima virgula
	vCampos := SUBSTR(vCampos, 1, LENGTH(vCampos)-1);

	-- consulta a ser executada
	vSql = 'SELECT ARRAY[' || vCampos || '] as campos FROM (' || pSql || ') as principal';

	-- executa a consulta
	FOR vRecord in EXECUTE vSql LOOP
		-- guarda os valores
		vValores[ vLinhaAtual ] := vRecord.campos;
		-- incrementa a linha
		vLinhaAtual := vLinhaAtual + 1;	
	END LOOP;

	-- se nao tiver dados
	IF COALESCE( ARRAY_UPPER(vValores, 1), 0 ) = 0 THEN
		RAISE NOTICE 'Nenhum dado encontrado';
		RETURN '';
	END IF;

		
	-- quebra de linha
	vRetorno := vRetorno || E'\n';
	-- agora, para cada registro encontrado
	FOR vLinhaAtual IN 1 .. ARRAY_UPPER(vValores, 1) LOOP		
		-- para cada coluna informada
		FOR vIndex IN 1 .. ARRAY_UPPER(pCampos, 1) LOOP
			-- pega o registro
			vAux := vValores[ vLinhaAtual ];			
			-- colocamos no corpo da mensagem
			vRetorno := vRetorno || COALESCE(CAST(vAux[ vIndex ] AS TEXT), '') || vSeparadorColuna;
		END LOOP;
		--vRetorno := vRetorno || ', ';
	END LOOP;

	--retiramos novamente a ultima virgula
	IF vRetorno <> '' THEN
		vRetorno := SUBSTR(vRetorno, 1, LENGTH(vRetorno)-2);	
	END IF;

	RETURN vRetorno || E'\n';
END
$$;


ALTER FUNCTION public.f_linhamensagem(psql text, plabels text[], pcampos text[]) OWNER TO postgres;

--
-- TOC entry 919 (class 1255 OID 11285511)
-- Name: f_ofertarcargas(bigint[], integer, integer, text, integer, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_ofertarcargas(pcargas bigint[], pcodemptra integer, pcodtpveic integer, pobservacoes text, pcodmotivoocor integer, ptextoocor text, patualizaverificastatcarga boolean) RETURNS TABLE(codstatus integer, codprogcoleta bigint, dtahrlimiteaceite timestamp with time zone, mensagens character varying[], codcargas bigint[], considerarbid boolean)
    LANGUAGE plpgsql
    AS $_$

DECLARE
  vMsgs VARCHAR[];
  vRec RECORD;
  vRecMsg RECORD;
  vTpCargaConsiderada INTEGER := -1;
  vTpOperSemOferta INTEGER[] := '{15,18}'::INTEGER[];
  vStatCargaPermiteOferta INTEGER[] := '{1,9}'::INTEGER[];
  vOferta ProgColeta;
  vDtaHrColeta TIMESTAMPTZ;
  vDtaHrEntrega TIMESTAMPTZ;
  vCodEmpOrig INTEGER;
  vCodEmpDest INTEGER;
  vCodCidUfOrig INTEGER;
  vCodCidUfDest INTEGER;
  vTpOper TpOper;
  vCodEmpEmbar INTEGER[] := '{}';
  vCodTpOper INTEGER[] := '{}';
  vTotal INTEGER := 0;
  vCodTpVeic INTEGER := pCodTpVeic;
  vExpediente RECORD;
  vEmbarcador RECORD;
  vBid RECORD;
  vCodUsrIncl INTEGER := 1;
  vCodBid INTEGER := -1;
  vSpot BOOLEAN := FALSE;
  vStatAgAceite INTEGER := 21;
  vStatReprogramar INTEGER := 9;
  vTranspsOfertadas INTEGER[];
  vSQL TEXT := '';

BEGIN
  vOferta.ConsiderarBID := TRUE;
  vOferta.CargaAgendada := FALSE;
  vOferta.TemDelivery := TRUE;
  vOferta.Venda := FALSE;

  CREATE TEMP TABLE tmp_codigos AS
     SELECT UNNEST(pCargas) as CodCarga
     
     UNION

     SELECT UNNEST(CargaGrupo.Cargas)
       FROM CargaGrupo
      WHERE CargaGrupo.CodCargaGrupo IN (
              SELECT Carga.CodCargaGrupo
                FROM Carga
               WHERE Carga.CodCarga = ANY(pCargas)
            );
 
  CREATE TEMP TABLE tmp_cargas AS
     SELECT Carga.CodCarga,
            Carga.CodStatCarga,
            Carga.CodCargaGrupo,
            Carga.DtaHrIncl,
            Carga.CodTpOper,
            Carga.Venda,
            Carga.TemDelivery,
            Carga.CodEmpEmbar,
            Carga.CodEmpOrig,
            Carga.CodEmpDest,
            Carga.DtaHrPrevColeta,
            Carga.DtaHrPrevFimColeta,
            Carga.DtaHrPrevEntrega,
            Carga.EmpOrig_CodCidUf,
            Carga.EmpDest_CodCidUf,
            Carga.Pendencias,
            Carga.Id,
            Carga.IsAgendamento,
            Carga.CodEmpTNF,
            Carga.DtaHrPrevTNF,
            Carga.CodTpCarga,
            Carga.TempoPrevColeta,
            Carga.Principal,
            Carga.CodEmpJanela,
            (SELECT COUNT(*) = 0 FROM  CargaAutoOferta WHERE CargaAutoOferta.CodCarga = Carga.CodCarga AND f_countArray(CodEmpTra) > 0) as primeira_oferta,
            '{}'::BIGINT[] AS cargas
       FROM Carga
      WHERE Carga.CodCarga IN (SELECT CodCarga FROM tmp_codigos)
   ORDER BY Carga.DtaHrPrevColeta, Carga.DtaHrPrevEntrega;

  UPDATE tmp_cargas
     SET cargas = g.cargas
    FROM CargaGrupo g
   WHERE g.CodCargaGrupo = tmp_cargas.CodCargaGrupo;

  -- OS - 2217
  -- só considera no BID a primeira oferta.
  SELECT COUNT(*) = 0
    INTO vOferta.ConsiderarBID
    FROM Tmp_Cargas
   WHERE NOT Tmp_Cargas.primeira_oferta;


  FOR vRec IN SELECT * FROM Tmp_Cargas ORDER BY Tmp_Cargas.DtaHrPrevColeta, Tmp_Cargas.DtaHrPrevEntrega LOOP
    IF vDtaHrColeta IS NULL THEN
      vDtaHrColeta := vRec.DtaHrPrevColeta;
      vCodEmpOrig := vRec.CodEmpOrig;
      vCodCidUfOrig := vRec.EmpOrig_CodCidUf;
    END IF;

    vDtaHrEntrega := vRec.DtaHrPrevEntrega;
    vCodEmpDest := vRec.CodEmpDest;
    vCodCidUfDest := vRec.EmpDest_CodCidUf;

    -- circuito nao considera BID
    IF vOferta.ConsiderarBid AND vRec.CodTpOper = 18 THEN
      vOferta.ConsiderarBid := FALSE;
    END IF;

    IF vRec.IsAgendamento THEN
      vOferta.CargaAgendada := TRUE;
    END IF;

    IF vRec.Venda THEN
      vOferta.Venda := TRUE;

      IF vRec.TemDelivery = FALSE THEN
        vOferta.TemDelivery := FALSE;
      END IF;
    END IF;

    -- vendo se o status da carga permite oferta.
    IF pAtualizaVerificaStatCarga THEN
      IF NOT (vRec.CodStatCarga = ANY(vStatCargaPermiteOferta)) THEN
        vMsgs := ARRAY_APPEND(vMsgs, FORMAT('%s - error.status_nao_permite_oferta', vRec.Id)::VARCHAR);
      END IF;
    END IF;

    vCodEmpEmbar := f_removeDuplicates(ARRAY_APPEND(vCodEmpEmbar, vRec.CodEmpEmbar));
    vCodTpOper := f_removeDuplicates(ARRAY_APPEND(vCodTpOper, vRec.CodTpOper));

    FOR vRecMsg IN SELECT Id, UNNEST(Pendencias) m FROM Tmp_Cargas LOOP
      vMsgs := ARRAY_APPEND(vMsgs, FORMAT('%s - %s', vRecMsg.Id, vRecMsg.m)::VARCHAR);
    END LOOP;
  END LOOP;

  vMsgs := f_removeDuplicates(vMsgs);

  vTpCargaConsiderada := f_getTpCargaPrioritaria((SELECT ARRAY_AGG(CodTpCarga) FROM tmp_cargas));

  IF vCodTpVeic = -1 THEN
    vCodTpVeic := f_getSugestaoTipoVeiculo((SELECT ARRAY_AGG(CodCarga) FROM tmp_cargas));
  END IF;

  IF vTpCargaConsiderada = -1 THEN
    vMsgs :=  ARRAY_APPEND(vMsgs, 'error.tipo_carga_considerada_nao_encontrada');
  END IF;

  IF pCodEmpTra = -1 THEN
    SELECT ARRAY_AGG(CodTransp)
      INTO vTranspsOfertadas
      FROM (
        SELECT UNNEST(CargaAutoOferta.CodEmpTra) CodTransp
          FROM CargaAutoOferta
         WHERE CargaAutoOferta.CodCarga IN (SELECT Tmp_Cargas.CodCarga FROM Tmp_Cargas)
      ) q;

    pCodEmpTra := f_getSugestaoTransportadoraBid(vCodCidUfOrig, vCodCidUfDest, vTpCargaConsiderada, COALESCE(vTranspsOfertadas,'{}'));

    IF pCodEmpTra = -1 THEN
      vMsgs := ARRAY_APPEND(vMsgs, 'error.transportadora_nao_informada_ou_sem_bid');
    END IF;
  END IF;

  IF vDtaHrColeta <= NOW() THEN
    vMsgs :=  ARRAY_APPEND(vMsgs, 'error.data_hora_coleta_menor_igual_atual');
  END IF;

  IF vCodTpVeic = -1 THEN
    vMsgs :=  ARRAY_APPEND(vMsgs, 'error.tipo_veiculo_nao_encontrado');
  END IF;

  IF f_countArray(vCodEmpEmbar) != 1 THEN
    vMsgs :=  ARRAY_APPEND(vMsgs, 'error.deve_haver_somente_embarcador');
  END IF;

  IF f_countArray(vCodTpOper) != 1 THEN
    vMsgs :=  ARRAY_APPEND(vMsgs, 'error.deve_haver_somente_um_tipo_de_operacao');
  ELSE
    SELECT * INTO vTpOper FROM TpOper WHERE TpOper.CodTpOper = vCodTpOper[1];

    IF vTpOper.DefineTNF THEN
      SELECT COUNT(*) INTO vTotal
        FROM (SELECT DISTINCT CodEmpTNF, DtaHrPrevTNF FROM Tmp_Cargas) q;

      IF vTotal > 1 THEN
        vMsgs :=  ARRAY_APPEND(vMsgs, 'error.todos_horarios_empresa_tnf_devem_ser_iguais');
      END IF;
    END IF;

    IF vCodTpOper[1] = ANY(vTpOperSemOferta) THEN
      vMsgs :=  ARRAY_APPEND(vMsgs, 'error.tipo_de_operacao_nao_permite_oferta');
    END IF;
  END IF;

  SELECT COUNT(*) INTO vTotal
        FROM (SELECT DISTINCT codempembar, codemporig, dtahrprevcoleta, tempoprevcoleta FROM Tmp_Cargas) q;

  IF vTotal != 1 THEN
    vMsgs :=  ARRAY_APPEND(vMsgs, 'error.campos_com_valores_diferentes');
  END IF;

  IF pCodEmpTra > -1 THEN
    SELECT ex.*
      INTO vExpediente
      FROM Expediente ex, Emp e
     WHERE e.CodExpediente = ex.CodExpediente
       AND e.CodEmp = pCodEmpTra;

    IF vExpediente IS NULL THEN
      vMsgs :=  ARRAY_APPEND(vMsgs, 'error.transportadora_nao_tem_expediente_cadastrado');
    ELSE
      
      IF vTpOper IS DISTINCT FROM NULL AND vTpOper.PrazoAceite IS NOT NULL THEN 
        vOferta.DtaHrLimiteAceite := f_calculaDataFinal(vExpediente.CodExpediente, NOW(), (vTpOper.PrazoAceite || ' minute')::interval);

        IF vOferta.DtaHrLimiteAceite IS NULL THEN
          vMsgs :=  ARRAY_APPEND(vMsgs, 'error.nao_foi_possivel_calcular_o_limite_de_aceite');
        END IF;
      ELSE 
        vMsgs :=  ARRAY_APPEND(vMsgs, 'error.tipo_operacao_nao_definido_para_calculo_de_limite_aceite');
      END IF;
    END IF;
  END IF;

  IF vCodEmpOrig IS NOT NULL THEN
    SELECT codemp, nome, UsarDockScheduling
      INTO vEmbarcador
      FROM Emp
     WHERE Emp.CodEmp = vCodEmpOrig
       AND Emp.Embar;

    IF vEmbarcador.UsarDockScheduling = TRUE THEN
      SELECT COUNT(*)
        INTO vTotal
        FROM Tmp_Cargas
       WHERE CodEmpJanela IS NULL;

      IF vTotal > 0 THEN
        vMsgs :=  ARRAY_APPEND(vMsgs, 'error.embarcador_usa_ds_mas_existem_cargas_nao_alocadas');
      END IF;
    END IF;
  END IF;

  IF vOferta.ConsiderarBid THEN
    SELECT b.CodBid, 
           t.CodBidTransp,
           t.CodEmpTra
      INTO vBid
      FROM Bid b, Bid_Transp t
     WHERE b.CodBid = t.CodBid
       AND b.CodTpCarga = vTpCargaConsiderada
       AND b.CodCidUfOrigem = vCodCidUfOrig
       AND b.CodCidUfDestino = vCodCidUfDest
       AND t.CodEmptra = pCodEmpTra
       AND b.Ativo
       AND b.DtaVigencia <= CURRENT_DATE;

    IF vBid IS NOT NULL THEN
      vOferta.CodBidTransp := vBid.CodBidTransp;
      vCodBid := vBid.CodBid;
    END IF;
  END IF;

  -- inserimos as principais na tentativa de oferta
  -- somente se ainda nao existir.
  INSERT INTO CargaAutoOferta  (codcarga, codbid, codcargagrupo, cargas, codemptra, motivos)
       SELECT codcarga, -1, codcargagrupo, cargas, '{}', '{}'
         FROM tmp_cargas
        WHERE tmp_cargas.principal
          AND NOT EXISTS(SELECT codcarga FROM CargaAutoOferta WHERE CargaAutoOferta.CodCarga = tmp_cargas.CodCarga);

  IF f_countArray(vMsgs) = 0 THEN
    vOferta.CodProgColeta := nextval('sq_codprogcoleta'::regclass);
    vOferta.CodEmpTra := pCodEmpTra;
    vOferta.PrazoContratual := f_config('PRAZO_CONTRATUAL_CARGAOFERTA')::INTEGER;
    vOferta.ForaPrazoContratual := (NOW() + (vOferta.PrazoContratual || ' hour')::INTERVAL) > vDtaHrColeta;
    vOferta.CodUsrIncl := vCodUsrIncl;
    vOferta.DtaHrIncl := NOW();
    vOferta.DtaHrPrevIni := vDtaHrColeta;
    vOferta.DtaHrPrevAtual := vDtaHrColeta;
    vOferta.DtaHrPrevEntrega := vDtaHrEntrega;
    vOferta.CodTpVeic := vCodTpVeic;
    vOferta.CodEmpEmbar := vCodEmpOrig;
    vOferta.CodStatProgColeta := 4;
    vOferta.TotalCarga := 1;
    vOferta.TotalNumVol := 0;
    vOferta.TotalVol := 0;
    vOferta.TotalPeso := 0;
    vOferta.TotalNumPalete := 0;
    vOferta.Notificado := FALSE;
    vOferta.NotificadoEmbarque := FALSE;
    vOferta.CodTpOper := vTpOper.CodTpOper;
    vOferta.Obs := pObservacoes;

    EXECUTE 'INSERT INTO ProgColeta SELECT $1.*' USING vOferta;

    FOR vRec IN SELECT * FROM Tmp_Cargas LOOP
      INSERT INTO ProgColetaCarga (CodProgColeta, CodCarga, CodUsrIncl, DtaHrIncl)
      VALUES (vOferta.CodProgColeta, vRec.CodCarga, vCodUsrIncl, NOW());

      IF vRec.Principal THEN
        UPDATE CargaAutoOferta
           SET CodEmptra = f_removeDuplicates(ARRAY_APPEND(CodEmpTra, pCodEmptra::BIGINT)),
               CodBid = vCodBid
         WHERE CargaAutoOferta.CodCarga = vRec.CodCarga;
      END IF;
    END LOOP;

    -- se tiver ocorrencia
    IF COALESCE(pCodMotivoOcor, -1) > -1 THEN
      INSERT INTO Ocor (CodUsrIncl, DtaHrIncl, CodStatOcor, CodTpPrior, CodTpEntidade, CodEntidade, CodMotivo, Descr)
      VALUES (vCodUsrIncl, NOW(), 1, 3, 1, vOferta.CodProgColeta::INTEGER, pCodMotivoOcor, pTextoOcor);
    END IF;

    -- atualizando bid
    IF vOferta.ConsiderarBID THEN

      -- se for BID
      IF COALESCE(vOferta.CodBidTransp, -1) > -1 THEN
        UPDATE Bid_Transp
           SET QtdOfertado = QtdOfertado + 1,
               QtdRealizado = QtdRealizado + 1,
               Ofertas = Ofertas + vOferta.CodProgColeta::INTEGER
         WHERE Bid_Transp.CodBidTransp = vOferta.CodBidTransp;

         PERFORM f_atualizarConjuntoBid( vOferta.CodBidTransp );
         PERFORM f_atualizaHistoricoBid(CURRENT_DATE, vOferta.CodBidTransp, 1, 0, 1, vOferta.CodProgColeta::INTEGER, -1);
         PERFORM f_atualizaFilaBid(vBid.CodBid);
         
      -- se for SPOT
      ELSE
        vSpot := TRUE;
      END IF;
    ELSE
      vSpot := TRUE;
    END IF;

    IF vSpot THEN
      INSERT INTO Bid_Spot (CodProgColeta, CodCidUfOrigem, CodCidUfDestino, CodTpCarga, DtaOferta, CodEmpTra)
      VALUES (vOferta.CodProgColeta, vCodCidUfOrig, vCodCidUfDest, vTpCargaConsiderada, CURRENT_DATE, pCodEmptra);
    END IF;

    -- atualiza os status das cargas
    IF pAtualizaVerificaStatCarga THEN
      vSQL := vSQL || FORMAT('CodStatCarga = %s, DtaHrStatCarga = ''%s'', CodUsrStatCarga = %s',
        vStatAgAceite, NOW(), vCodUsrIncl
      );
      --UPDATE Carga
      --   SET CodStatCarga = vStatAgAceite,
      --       DtaHrStatCarga = NOW(),
      --       CodUsrStatCarga = vCodUsrIncl
      -- WHERE Carga.CodCarga IN (SELECT CodCarga FROM Tmp_Cargas);
    END IF;

    -- se for oferta unica, atualizamos a transportadora das cargas
    IF pAtualizaVerificaStatCarga OR f_config('BID.REOFERTA_SIMULTANEA') = '0' THEN
      IF vSQL != '' THEN
        vSQL := vSQL || ', ';
      END IF;
      vSQL := vSQL || FORMAT('CodEmptra = %s', pCodEmpTra);

      -- UPDATE Carga
      --    SET CodEmpTra = pCodEmpTra
      --  WHERE Carga.CodCarga IN (SELECT CodCarga FROM Tmp_Cargas);
    END IF;

    IF vSQL != '' THEN
      vSQL := 'UPDATE Carga SET ' || vSQL || ' WHERE Carga.CodCarga IN (SELECT CodCarga FROM Tmp_Cargas)';
      EXECUTE vSQL;
    END IF;

    -- rotinas de atualizacao
    PERFORM f_atualizaAgendamentoRealizado('COLETA', vOferta.CodProgColeta);
    PERFORM f_atualizarDataEntrega('COLETA', vOferta.CodProgColeta);
  END IF;

  -- atualiza as mensagens encontradas
  FOR vRec IN SELECT * FROM Tmp_Cargas LOOP
    IF vRec.Principal THEN
      UPDATE CargaAutoOferta
         SET motivos = COALESCE(vMsgs, '{}')
       WHERE CargaAutoOferta.CodCarga = vRec.CodCarga;
    END IF;
  END LOOP;

  -- retorna o resultado
  RETURN QUERY SELECT CASE WHEN f_countArray(vMsgs) = 0 THEN 1 ELSE 0 END,
                      vOferta.CodProgColeta,
                      vOferta.DtaHrLimiteAceite,
                      vMsgs,
                      (SELECT ARRAY_AGG(codcarga) FROM Tmp_Cargas),
                      vOferta.ConsiderarBID;

  DROP TABLE tmp_codigos;
  DROP TABLE tmp_Cargas;

  RETURN;
END;

$_$;


ALTER FUNCTION public.f_ofertarcargas(pcargas bigint[], pcodemptra integer, pcodtpveic integer, pobservacoes text, pcodmotivoocor integer, ptextoocor text, patualizaverificastatcarga boolean) OWNER TO postgres;

--
-- TOC entry 920 (class 1255 OID 11285513)
-- Name: f_paramsofmodeltoemail(text, text[], text[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_paramsofmodeltoemail(pmodeloemail text, pchaves text[], pvalores text[]) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
    vRec RECORD;
    vIndex INT;
    vRetorno TEXT;
    vValueFound TEXT;
    vCountChaves INT;
BEGIN
    vRetorno := pModeloemail;
    VCountChaves := ARRAY_UPPER(pChaves, 1);
    IF VCountChaves != ARRAY_UPPER(pValores, 1) THEN
       RAISE EXCEPTION 'tamanhos diferentes';
    end if;

    FOR vRec IN SELECT regexp_matches(vRetorno, E'\\[:(.*?)\\]','g') AS 
Value LOOP
      vValueFound := '';

      FOR vIndex IN 1 .. vCountChaves LOOP
      IF pChaves[vIndex] = vRec.Value[1] THEN
        vValueFound := pValores[vIndex];
      EXIT;
      END IF;
      END LOOP;

      vRetorno := REPLACE(vRetorno, '[:' || vRec.Value[1] || ']', 
vValueFound);

    END LOOP;

    RETURN vRetorno;
END $$;


ALTER FUNCTION public.f_paramsofmodeltoemail(pmodeloemail text, pchaves text[], pvalores text[]) OWNER TO postgres;

--
-- TOC entry 921 (class 1255 OID 11285514)
-- Name: f_pos(integer, character varying, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_pos(pcodtecrastr integer, pidequiprastr character varying, pdtahrini timestamp with time zone, pdtahrfim timestamp with time zone) RETURNS TABLE(codposini character varying, codposfim character varying, dtahrini timestamp with time zone, dtahrfim timestamp with time zone, intervalo numeric, qtde integer, tpptoref integer, nomeptoref character varying, angulo numeric, dist numeric, long numeric, lat numeric, veloc integer, ignicao integer)
    LANGUAGE plpgsql
    AS $$

DECLARE
  vCurRec RECORD;
  vCurPto GEOMETRY;
  vOldPto GEOMETRY = null;
  vNewPos BOOLEAN = true;
  vQtdPos INTEGER;
  vCodPosIni VARCHAR(30);
  vCodPosFim VARCHAR(30);
  vTpPtoRef INTEGER;
  vNomePtoRef VARCHAR(255);
  vAngulo DECIMAL(4,1);
  vDist DECIMAL(8,2);
  vDtaHrIni TIMESTAMP WITH TIME ZONE;
  vDtaHrFim TIMESTAMP WITH TIME ZONE;
  vLong DECIMAL(15,13);
  vLat DECIMAL(15,13);
  vVeloc INTEGER;
  vIgnicao INTEGER;
  
BEGIN
  FOR vCurRec IN
    SELECT
      REPLACE(Pos.Tbl, 'pos_', '') || '.' || Pos.CodPos AS CodPos,
      Pos.TpPtoRef,
      Pos.NomePtoRef,
      Pos.Angulo,
      Pos.Dist,
      Pos.DtaHr,
      Pos.Long,
      Pos.Lat,
      ST_MakePoint(Pos.Long, Pos.Lat) AS Pto,
      Pos.Veloc,
      Pos.Ignicao

    FROM 
      F_Pos_Ex(pCodTecRastr, pIdEquipRastr, pDtaHrIni, pDtaHrFim) AS Pos

    UNION SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL

    ORDER BY 6 --Pos.DtaHr
    
  LOOP
    vCurPto := vCurRec.Pto;

    IF vOldPto IS NOT NULL THEN
      IF ST_Distance_Sphere(vOldPto, vCurPto) < 50 THEN
        vCodPosFim := vCurRec.CodPos;
        vDtaHrFim := vCurRec.DtaHr;
        vQtdPos := vQtdPos + 1;
      ELSE
        RETURN QUERY SELECT vCodPosIni, vCodPosFim, vDtaHrIni, vDtaHrFim, 
          ROUND(EXTRACT(EPOCH FROM vDtaHrFim - vDtaHrIni)::NUMERIC / 60, 2),
          vQtdPos, vTpPtoRef, vNomePtoRef, vAngulo, vDist, vLong, vLat, 
          vVeloc, vIgnicao;

        vNewPos := true;
      END IF;
    END IF;

    IF vNewPos THEN
      vCodPosIni := vCurRec.CodPos;
      vCodPosFim := vCurRec.CodPos;
      vDtaHrIni := vCurRec.DtaHr;
      vDtaHrFim := vCurRec.DtaHr;
      vQtdPos := 1;

      vNewPos := false;
      vOldPto := vCurPto;
    END IF;
      
    vTpPtoRef := vCurRec.TpPtoRef;
    vNomePtoRef := vCurRec.NomePtoRef;
    vAngulo := vCurRec.Angulo;
    vDist := vCurRec.Dist;
    vLong := vCurRec.Long;
    vLat := vCurRec.Lat;
    vVeloc := vCurRec.Veloc;
    vIgnicao := vCurRec.Ignicao;
  END LOOP;
END
$$;


ALTER FUNCTION public.f_pos(pcodtecrastr integer, pidequiprastr character varying, pdtahrini timestamp with time zone, pdtahrfim timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 923 (class 1255 OID 11285515)
-- Name: f_pos_ex(integer, character varying, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_pos_ex(pcodtecrastr integer, pidequiprastr character varying, pdtahrini timestamp with time zone, pdtahrfim timestamp with time zone) RETURNS TABLE(tbl character varying, codpos bigint, dtahrincl timestamp with time zone, codtecrastr integer, idequiprastr character varying, dtahrtecrastr timestamp with time zone, tpptoref integer, codptoref integer, nomeptoref character varying, angulo numeric, dist numeric, dtahr timestamp with time zone, long numeric, lat numeric, veloc integer, ignicao integer)
    LANGUAGE plpgsql
    AS $$

DECLARE
  vSQL TEXT;

BEGIN
  IF pCodTecRastr < 0 OR pDtaHrIni > pDtaHrFim THEN
    RETURN;
  END IF;

  vSQL := 'SELECT ''pos''::VARCHAR(10), * FROM pos WHERE DtaHr BETWEEN ''' || pDtaHrIni || ''' AND ''' || pDtaHrFim || '''';

  IF pCodTecRastr > 0 THEN
    vSQL := vSQL || ' AND CodTecRastr = ' || pCodTecRastr;
  END IF;

  IF pIdEquipRastr > '' THEN
    vSQL := vSQL || ' AND IdEquipRastr = ' || QUOTE_LITERAL(pIdEquipRastr);
  END IF;

  RETURN QUERY EXECUTE vSQL;
END $$;


ALTER FUNCTION public.f_pos_ex(pcodtecrastr integer, pidequiprastr character varying, pdtahrini timestamp with time zone, pdtahrfim timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 924 (class 1255 OID 11285516)
-- Name: f_recalcularprevisaoentregaembarque(integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_recalcularprevisaoentregaembarque(pcodembarque integer, pdtahr timestamp with time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  vRec RECORD;
  vUpdated BOOLEAN := FALSE;
  VTpOperCircuito INTEGER := 18;
BEGIN

  FOR vRec IN
    UPDATE Embarque
       SET DtaHrRecalculo = pDtaHr,
           DtaHrPrevFim = f_calculaDataEntrega(EmpOrig_CodCidUf, CodEmpDest, ed.CodCidUf, pDtaHr, Embarque.CodTpOper, false)
      FROM TpOper tp, Emp ed
     WHERE Embarque.CodEmbarque = pCodEmbarque
       AND tp.CodTpOper = Embarque.CodTpOper
       AND ed.CodEmp = Embarque.CodEmpDest
       AND Embarque.DtaHrRecalculo IS NULL
       AND Embarque.CodTpOper != VTpOperCircuito
       AND COALESCE(Embarque.SemAgendamento,TRUE) = TRUE
       AND (
             NOT f_diaUtil(CodEmpOrig, EmpOrig_CodCidUf, pDtaHr) OR
             pDtaHr >= CURRENT_DATE + tp.HrLimite OR
             pDtaHr >= Embarque.DtaHrPrevIni
           )
       
    RETURNING Embarque.CodEmbarque,Embarque.DtaHrRecalculo,Embarque.CodTpOper
  LOOP
  
    UPDATE EmbarqueCarga
       SET DtaHrPrevEntrega = f_calculaDataEntrega(EmbarqueCarga.EmpOrig_CodCidUf, EmbarqueCarga.CodEmpDest, ed.CodCidUf, pDtaHr, EmbarqueCarga.CodTpOper, false),
           DtaHrPrevFimEntrega = f_calculaDataEntrega(eo.CodCidUf, EmbarqueCarga.CodEmpDest, ed.CodCidUf, pDtaHr, EmbarqueCarga.CodTpOper, false) + (EmbarqueCarga.TempoPrevEntrega || ' MINUTE')::INTERVAL
      FROM EmpEndereco ed, EmpEndereco eo, Carga c
     WHERE ed.CodEmpEndereco = c.CodEnderecoDest
       AND eo.CodEmpEndereco = c.CodEnderecoOrig
       AND EmbarqueCarga.CodCarga = c.CodCarga
       AND c.IsAgendamento = FALSE
       AND EmbarqueCarga.CodEmbarque = pCodEmbarque;

    UPDATE Carga
       SET DtaHrPrevEntrega = ec.DtaHrPrevEntrega,
           DtaHrPrevFimEntrega = ec.DtaHrPrevFimEntrega
      FROM EmbarqueCarga ec
     WHERE ec.CodEmbarque = pCodEmbarque
       AND Carga.CodCarga = ec.CodCarga;

    vUpdated := TRUE;
  END LOOP;

  RETURN vUpdated;
END;
$$;


ALTER FUNCTION public.f_recalcularprevisaoentregaembarque(pcodembarque integer, pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 925 (class 1255 OID 11285517)
-- Name: f_registrarevento(integer, integer, integer, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_registrarevento(pcodembarque integer, pcodtpevento integer, pcodemp integer, pdtahrfim timestamp with time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
		DECLARE
		vRecTpEvento RECORD;
		vRecProxTpEvento RECORD;
		vPrimeiro BOOLEAN DEFAULT FALSE;
		vRecEvtEmp RECORD;
		vTotal INT;
		
		CONST_INTEGRADOR INT DEFAULT 2;
		
	BEGIN
				SELECT
			COUNT(*)
		INTO
			vTotal
		FROM 
			Embarque
		WHERE 
			Embarque.CodEmbarque = pCodEmbarque
			AND Embarque.CodTpEvento = pCodTpEvento;
		
				IF vTotal <> 1 THEN
			RAISE NOTICE 'O Embarque nao esta no tipo de evento informado: %', pCodTpEvento;
			RETURN FALSE;
		END if;
		
				SELECT
			TpEvento.CodTpEvento
			, TpEvento.OrdemExec
			, TpEvento.ProxCodStatCarga
			, TpEvento.ProxCodStatEmbarque
		INTO
			vRecTpEvento
		FROM
			TpEvento
		WHERE
			TpEvento.CodTpEvento = pCodTpEvento;
		
				IF vRecTpEvento.OrdemExec = 0 THEN
			vPrimeiro := TRUE;
		END IF;
		
				UPDATE
			TpEventoEmbarque
		SET
			DtaHrFim = pDtaHrFim
			, CodUsr = CONST_INTEGRADOR
			, DtaHrIni = CASE WHEN vPrimeiro THEN pDtaHrFim ELSE COALESCE(DtaHrIni, pDtaHrFim) END
		WHERE CodEmbarque = pCodEmbarque
			AND TpEventoEmbarque.CodTpEvento = pCodTpEvento
			AND TpEventoEmbarque.CodEmp = pCodEmp;
		
						SELECT
			t.CodTpEvento
			, t.NomeTpEvento
			, t.CodEmp
			, t.CodEmbarque
		INTO
			vRecProxTpEvento
		FROM
			TpEventoEmbarque t, TpEventoEmbarque t2
		WHERE
			t.OrdemExec = t2.OrdemExec + 1
			AND t.CodEmp = t2.CodEmp
			AND t.CodEmbarque = t2.CodEmbarque
			AND t.CodTpEventoCjto = t2.CodTpEventoCjto
			AND t2.CodEmbarque = pCodEmbarque
			AND t2.CodTpEvento = pCodTpEvento
			AND t2.CodEmp = pCodEmp;
			
										IF vRecProxTpEvento IS NULL THEN
			SELECT 
				t.CodTpEvento
				, t.NomeTpEvento
				, t.CodEmp
				, t.CodEmbarque
			INTO 
				vRecProxTpEvento
			FROM
				TpEventoEmbarque t, EmbarqueCarga ec
			WHERE
				ec.CodEmbarque = pCodEmbarque
				AND ec.CodEmpDest = t.CodEmp
				AND ec.CodEmbarque = t.CodEmbarque
				AND t.OrdemExec = 0
				AND ec.CodEmpDest <> pCodEmp
				AND ec.DtaHrFimEntrega IS NULL
			ORDER BY
				ec.DtaHrPrevEntrega ASC
			LIMIT 1;
		END IF;
		
				IF vRecProxTpEvento IS NOT NULL THEN
		
						UPDATE
				Embarque
			SET
				CodTpEvento = vRecProxTpEvento.CodTpEvento
				, TpEvento_Nome = vRecProxTpEvento.NomeTpEvento
			WHERE
				Embarque.CodEmbarque = pCodEmbarque;
				
						UPDATE
				TpEventoEmbarque
			SET
				DtaHrIni = pDtaHrFim
			WHERE
				TpEventoEmbarque.CodTpEvento = vRecProxTpEvento.CodTpEvento
				AND TpEventoEmbarque.CodEmp = vRecProxTpEvento.CodEmp
				AND TpEventoEmbarque.CodEmbarque = pCodEmbarque;
				
												ELSE
			UPDATE
				Embarque
			SET
				CodTpEvento = NULL
				, TpEvento_Nome = ''
			WHERE
				Embarque.CodEmbarque = pCodEmbarque;
		END IF;
		
				IF vRecTpEvento.ProxCodStatCarga IS NOT NULL THEN
			UPDATE
				Carga
			SET 
				CodStatCarga = vRecTpEvento.ProxCodStatCarga
				, CodUsrAlter = CONST_INTEGRADOR
				, DtaHrAlter = pDtaHrFim
				, DtaHrStatCarga = pDtaHrFim
			WHERE
				Carga.CodUltEmbarque = pCodEmbarque;
		END IF;
		
				IF vRecTpEvento.ProxCodStatEmbarque IS NOT NULL THEN
			UPDATE
				Embarque
			SET 
				CodStatEmbarque = vRecTpEvento.ProxCodStatEmbarque
				, CodUsrAlter = CONST_INTEGRADOR
				, DtaHrAlter = pDtaHrFim
				, DtaHrStatEmbarque = pDtaHrFim
			WHERE
				Embarque.CodEmbarque = pCodEmbarque;
		END IF;
		
				RETURN TRUE;
		
	END
$$;


ALTER FUNCTION public.f_registrarevento(pcodembarque integer, pcodtpevento integer, pcodemp integer, pdtahrfim timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 926 (class 1255 OID 11285518)
-- Name: f_registrarevento(integer, integer, integer, timestamp with time zone, numeric, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_registrarevento(pcodembarque integer, pcodtpevento integer, pcodemp integer, pdtahrfim timestamp with time zone, plong numeric, plat numeric) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
  DECLARE
    vRecTpEvento RECORD;
    vRecProxTpEvento RECORD;
    vPrimeiro BOOLEAN DEFAULT FALSE;
    vRecEvtEmp RECORD;
    vTotal INT;
    vEmbarque RECORD;
    vPodeContinuar BOOLEAN := FALSE;
    
    CONST_INTEGRADOR INT DEFAULT 2;
    
  BEGIN
    SELECT
      Embarque.CodEmbarque,
      Embarque.CodTpEvento
    INTO
      vEmbarque
    FROM 
      Embarque
    WHERE 
      Embarque.CodEmbarque = pCodEmbarque;
    
    -- se o embarque estiver com o tipo de evento nulo
    IF vEmbarque.CodTpEvento IS NULL THEN
      -- tem o tipo de evento registrado e da mesma empresa?
      SELECT
        tp.*, t.CodEmp, t.CodEmbarque, t.NomeTpEvento
      INTO vRecProxTpEvento
      FROM TpEventoEmbarque t, TpEventoEmbarque t2, TpEvento tp
      WHERE
        t.OrdemExec = t2.OrdemExec + 1
        AND t.CodEmp = t2.CodEmp
        AND t.CodEmbarque = t2.CodEmbarque
        AND t.CodTpEventoCjto = t2.CodTpEventoCjto
        AND t2.CodEmbarque = pCodEmbarque
        AND t2.CodTpEvento = pCodTpEvento
        AND t2.CodEmp = pCodEmp
        AND tp.CodTpEvento = t.CodTpEvento;
      
      -- se não tiver, sai (nao tem etapas de carregamento/descarregamento)
      IF vRecProxTpEvento.CodTpEvento IS NULL THEN
        RETURN FALSE;
      END IF;
      
      SELECT * 
      INTO vRecTpEvento
      FROM TpEvento
      WHERE TpEvento.CodTpEvento = pCodTpEvento;
      
      vPodeContinuar := TRUE;
    END IF; -- fim não tem tipo informado
    
    -- se estiver no tipo informado
    IF vEmbarque.CodTpEvento = pCodTpEvento THEN
      vPodeContinuar := TRUE;
      SELECT
        TpEvento.CodTpEvento
        , TpEvento.OrdemExec
        , TpEvento.ProxCodStatCarga
        , TpEvento.ProxCodStatEmbarque
      INTO
        vRecTpEvento
      FROM
        TpEvento
      WHERE
        TpEvento.CodTpEvento = pCodTpEvento;
      
      IF vRecTpEvento.OrdemExec = 0 THEN
        vPrimeiro := TRUE;
      END IF;
      
      UPDATE
        TpEventoEmbarque
      SET
        DtaHrFim = pDtaHrFim
        , CodUsr = CONST_INTEGRADOR
        , DtaHrIni = CASE WHEN vPrimeiro THEN pDtaHrFim ELSE COALESCE(DtaHrIni, pDtaHrFim) END
        , Pos_Lat = pLat
        , Pos_Long = pLong
      WHERE CodEmbarque = pCodEmbarque
        AND TpEventoEmbarque.CodTpEvento = pCodTpEvento
        AND TpEventoEmbarque.CodEmp = pCodEmp;
      
      SELECT
        t.CodTpEvento
        , t.NomeTpEvento
        , t.CodEmp
        , t.CodEmbarque
      INTO
        vRecProxTpEvento
      FROM
        TpEventoEmbarque t, TpEventoEmbarque t2
      WHERE
        t.OrdemExec = t2.OrdemExec + 1
        AND t.CodEmp = t2.CodEmp
        AND t.CodEmbarque = t2.CodEmbarque
        AND t.CodTpEventoCjto = t2.CodTpEventoCjto
        AND t2.CodEmbarque = pCodEmbarque
        AND t2.CodTpEvento = pCodTpEvento
        AND t2.CodEmp = pCodEmp;
    END IF; -- fim tem tipo informado
    
    IF vPodeContinuar THEN
      IF vRecProxTpEvento IS NULL THEN
        SELECT 
          t.CodTpEvento
          , t.NomeTpEvento
          , t.CodEmp
          , t.CodEmbarque
        INTO 
          vRecProxTpEvento
        FROM
          TpEventoEmbarque t, EmbarqueCarga ec
        WHERE
          ec.CodEmbarque = pCodEmbarque
          AND ec.CodEmpDest = t.CodEmp
          AND ec.CodEmbarque = t.CodEmbarque
          AND t.OrdemExec = 0
          AND ec.CodEmpDest <> pCodEmp
          AND ec.DtaHrFimEntrega IS NULL
        ORDER BY
          ec.DtaHrPrevEntrega ASC
        LIMIT 1;
      END IF;
      
      IF vRecProxTpEvento.CodTpEvento IS NOT NULL THEN
        UPDATE
          Embarque
        SET
          CodTpEvento = vRecProxTpEvento.CodTpEvento
          , TpEvento_Nome = vRecProxTpEvento.NomeTpEvento

        WHERE
          Embarque.CodEmbarque = pCodEmbarque;
          
        UPDATE
          TpEventoEmbarque
        SET
          DtaHrIni = pDtaHrFim
          , Pos_Lat = pLat
          , Pos_Long = pLong
        WHERE
          TpEventoEmbarque.CodTpEvento = vRecProxTpEvento.CodTpEvento
          AND TpEventoEmbarque.CodEmp = vRecProxTpEvento.CodEmp
          AND TpEventoEmbarque.CodEmbarque = pCodEmbarque;
          
      ELSE
        UPDATE
          Embarque
        SET
          CodTpEvento = NULL
          , TpEvento_Nome = ''
        WHERE
          Embarque.CodEmbarque = pCodEmbarque;
      END IF;
      
      IF vRecTpEvento.ProxCodStatCarga IS NOT NULL THEN
        UPDATE
          Carga
        SET 
          CodStatCarga = vRecTpEvento.ProxCodStatCarga
          , CodUsrAlter = CONST_INTEGRADOR
          , DtaHrAlter = pDtaHrFim
          , DtaHrStatCarga = pDtaHrFim
        WHERE
          Carga.CodUltEmbarque = pCodEmbarque;
      END IF;
      
      IF vRecTpEvento.ProxCodStatEmbarque IS NOT NULL THEN
        UPDATE
          Embarque
        SET 
          CodStatEmbarque = vRecTpEvento.ProxCodStatEmbarque
          , CodUsrAlter = CONST_INTEGRADOR
          , DtaHrAlter = pDtaHrFim
          , DtaHrStatEmbarque = pDtaHrFim
        WHERE
          Embarque.CodEmbarque = pCodEmbarque;
      END IF;
    END IF;
    
    RETURN TRUE;
    
  END
$$;


ALTER FUNCTION public.f_registrarevento(pcodembarque integer, pcodtpevento integer, pcodemp integer, pdtahrfim timestamp with time zone, plong numeric, plat numeric) OWNER TO postgres;

--
-- TOC entry 927 (class 1255 OID 11285519)
-- Name: f_removeduplicates(anyarray); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_removeduplicates(p_lista anyarray) RETURNS anyarray
    LANGUAGE plpgsql
    AS $_$
begin
  SELECT ARRAY_AGG(REC)
  INTO $1
  FROM (
    SELECT DISTINCT UNNEST(P_LISTA) REC
    ORDER BY 1
  ) S;

  return $1;
end;
$_$;


ALTER FUNCTION public.f_removeduplicates(p_lista anyarray) OWNER TO postgres;

--
-- TOC entry 928 (class 1255 OID 11285520)
-- Name: f_removeelements(anyarray, anyarray); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_removeelements(p_lista anyarray, p_remover anyarray) RETURNS anyarray
    LANGUAGE plpgsql
    AS $$
begin
  return f_removeElements(p_lista, p_remover, false);
end;
$$;


ALTER FUNCTION public.f_removeelements(p_lista anyarray, p_remover anyarray) OWNER TO postgres;

--
-- TOC entry 929 (class 1255 OID 11285521)
-- Name: f_removeelements(anyarray, anyarray, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_removeelements(p_lista anyarray, p_remover anyarray, p_unique boolean) RETURNS anyarray
    LANGUAGE plpgsql
    AS $_$
begin
  SELECT ARRAY_AGG(REC)
  INTO $1
  FROM (
    SELECT UNNEST(P_LISTA) REC
    ORDER BY 1
  ) s
  WHERE REC NOT IN (SELECT UNNEST(p_remover) REM)
  ;
  
  IF p_unique THEN
    $1 := f_removeDuplicates($1);
  END IF;

  return $1;
end;
$_$;


ALTER FUNCTION public.f_removeelements(p_lista anyarray, p_remover anyarray, p_unique boolean) OWNER TO postgres;

--
-- TOC entry 930 (class 1255 OID 11285522)
-- Name: f_removenullfromarray(anyarray); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_removenullfromarray(anyarray) RETURNS anyarray
    LANGUAGE plpgsql
    AS $_$
BEGIN
	SELECT ARRAY(
		SELECT x FROM 
		UNNEST($1) x
		WHERE x IS NOT NULL
	)
	INTO $1;

	RETURN $1;
END;
$_$;


ALTER FUNCTION public.f_removenullfromarray(anyarray) OWNER TO postgres;

--
-- TOC entry 931 (class 1255 OID 11285523)
-- Name: f_retornadifhhmm(timestamp with time zone, timestamp with time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_retornadifhhmm(p_data1 timestamp with time zone, p_data2 timestamp with time zone, p_casas integer DEFAULT 2) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
  vRetorno varchar(10);
  vDataMaior timestamp with time zone;
  vDataMenor timestamp with time zone;
 BEGIN
  IF p_data1 >= p_data2 THEN
   vDataMaior = p_data1;
   vDataMenor = p_data2;
  ELSE
   vDataMaior = p_data2;
   vDataMenor = p_data1;
  END IF;
 
  SELECT 
   lpad( CAST( FLOOR(extract( epoch from vDataMaior - vDataMenor) / 3600) AS text), p_casas, '0') || ':' || lpad( CAST( extract( minutes from CAST((vDataMaior - vDataMenor) AS INTERVAL) )  AS text) , 2, '0')
  INTO 
   vRetorno;
  
  RETURN vRetorno;
 
 END
$$;


ALTER FUNCTION public.f_retornadifhhmm(p_data1 timestamp with time zone, p_data2 timestamp with time zone, p_casas integer) OWNER TO postgres;

--
-- TOC entry 932 (class 1255 OID 11285524)
-- Name: f_retornahhmm(numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_retornahhmm(p_prazo numeric) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 BEGIN
  RETURN TO_CHAR( CAST( p_prazo || 'MINUTE' AS INTERVAL) , 'HH24:MI' );
 END
$$;


ALTER FUNCTION public.f_retornahhmm(p_prazo numeric) OWNER TO postgres;

--
-- TOC entry 933 (class 1255 OID 11285525)
-- Name: f_sinalveiculo(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_sinalveiculo(pdtahr timestamp with time zone) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
	-- Verifica se o ultimo sinal do veiculo esta dentro 
	-- da tolerancia permitida
DECLARE
	vRetorno BOOLEAN DEFAULT FALSE;
	
BEGIN

	IF pDtaHr IS NULL THEN
		vRetorno := FALSE;
	ELSE
		vRetorno := (NOW() - pDtaHr) <= CAST( f_config('TOLERANCIA_SINAL_VEICULO') || ' MINUTES' AS INTERVAL);
	END IF;
	
	RETURN vRetorno;

END
$$;


ALTER FUNCTION public.f_sinalveiculo(pdtahr timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 922 (class 1255 OID 11285526)
-- Name: f_sinalveiculo(timestamp with time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_sinalveiculo(pdtahrultpos timestamp with time zone, pcodtecrastr integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	vRetorno INTEGER;
	vDiff INTEGER;
	vRec RECORD;
BEGIN
	IF pDtaHrUltPos IS NULL THEN
		vRetorno := -1;
	ELSE 
		vDiff := ROUND( (EXTRACT(EPOCH FROM NOW()) - EXTRACT(EPOCH FROM pDtaHrUltPos))::NUMERIC / 60,0);

		SELECT TecRastr.ToleranciaSinal
		INTO vRec
		FROM TecRastr
		WHERE TecRastr.CodTecRastr = pCodTecRastr;

		IF vDiff <= vRec.ToleranciaSinal THEN
			vRetorno := 1;
		ELSE 
			vRetorno := 0;
		END IF;
	END IF;

	RETURN vRetorno;
END;
$$;


ALTER FUNCTION public.f_sinalveiculo(pdtahrultpos timestamp with time zone, pcodtecrastr integer) OWNER TO postgres;

--
-- TOC entry 888 (class 1255 OID 11285527)
-- Name: f_stringlisttorecord(text, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_stringlisttorecord(pstringlist text, pdelimiter character varying) RETURNS TABLE(item text)
    LANGUAGE plpgsql
    AS $$
DECLARE
  vIndex INT;
  arrSize INT;
  arrValue TEXT[];
BEGIN
  arrValue := STRING_TO_ARRAY(pStringList, pDelimiter);
  arrSize := ARRAY_UPPER(arrValue, 1);
  FOR vIndex IN 1..arrSize LOOP
    RETURN QUERY SELECT arrValue[vIndex];
  END LOOP;
END $$;


ALTER FUNCTION public.f_stringlisttorecord(pstringlist text, pdelimiter character varying) OWNER TO postgres;

--
-- TOC entry 934 (class 1255 OID 11285528)
-- Name: f_tabelamensagem(text, text[], text[], boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_tabelamensagem(psql text, plabels text[], pcampos text[], phtml boolean) RETURNS text
    LANGUAGE plpgsql
    AS $$

DECLARE
	vRetorno TEXT;              -- string de retorno
	vRecord RECORD;             -- armazena o resultado da consulta
	vColWidth INTEGER[];        -- largura das colunas
	vTotalWidth INTEGER;        -- soma das larguras das colunas
	vIndex INTEGER;             -- contador de indice
	vTamanho INTEGER;           -- auxiliar para pegar o tamanho dos campos
	vCampos TEXT;               -- representacao de string dos campos selecionados
	vSql TEXT;                  -- consulta que vai ser executada
	vValores TEXT[][];          -- armazena os valores encontrados
	vMatriz TEXT;               -- representacao em string da matriz dos valores encontrados
	vLinhaAtual INTEGER;        -- contador de linha
	vAux TEXT[];                -- auxiliar para acessar um sub-elemento
	vSeparadorColuna TEXT;      -- separador de colunas no caso de texto pleno

BEGIN
	vRetorno := '';
	vTotalWidth := 0;
	vLinhaAtual := 1;
	vSeparadorColuna := '   ';

	-- montaremos uma string com os nomes dos campos
	-- que vamos usar
	vCampos := '';
	FOR vIndex IN 1 .. ARRAY_UPPER( pCampos, 1 ) LOOP
		vCampos := vCampos || pCampos[ vIndex ] || ',';
	END LOOP;

	-- tiramos a ultima virgula
	vCampos := SUBSTR(vCampos, 1, LENGTH(vCampos)-1);

	-- consulta a ser executada
	vSql = 'SELECT ARRAY[' || vCampos || '] as campos FROM (' || pSql || ') as principal';

	-- executa a consulta
	FOR vRecord in EXECUTE vSql LOOP

		-- para cada campo
		FOR vIndex IN 1 .. ARRAY_UPPER(pCampos, 1) LOOP
			-- pega o tamanho do valor
			vTamanho := LENGTH( vRecord.campos[ vIndex ] );

			-- se o tamanho do valor for menor que o do label
			IF vTamanho < LENGTH(pLabels[vIndex]) THEN
				-- pega a o tamanho do label
				vTamanho = LENGTH(pLabels[Vindex]);
			END IF;

			-- se o valor atual for maior que o anterior para esta coluna
			IF COALESCE(vColWidth[ vIndex ],0) < vTamanho THEN
			
				-- pega o tamanho atual
				vColWidth[ vIndex ] = vTamanho;
				vTotalWidth := vTotalWidth + vTamanho;
			END IF;
		END LOOP;

		-- guarda os valores
		vValores[ vLinhaAtual ] := vRecord.campos;

		-- incrementa a linha
		vLinhaAtual := vLinhaAtual + 1;
	
	END LOOP;

	-- se nao tiver dados
	IF COALESCE( ARRAY_UPPER(vValores, 1), 0 ) = 0 THEN
		RAISE NOTICE 'Nenhum dado encontrado';
		RETURN '';
	END IF;

	-- se nao for HTML
	IF pHtml = FALSE THEN
		-- montando o cabecalho
		FOR vIndex IN 1 .. ARRAY_UPPER(pLabels, 1) LOOP
			vRetorno := vRetorno || RPAD(pLabels[ vIndex ], vColWidth[vIndex] + LENGTH(vSeparadorColuna), ' ');
		END LOOP;

		-- quebra de linha
		vRetorno := vRetorno || E'\n';

		-- montando a linha separadora do cabecalho
		FOR vIndex IN 1 .. ARRAY_UPPER(pLabels, 1) LOOP
			vRetorno := vRetorno || RPAD('', vColWidth[vIndex], '-') || vSeparadorColuna;
		END LOOP;

		-- quebra de linha
		vRetorno := vRetorno || E'\n';

		-- agora, para cada registro encontrado
		FOR vLinhaAtual IN 1 .. ARRAY_UPPER(vValores, 1) LOOP
		
			-- para cada coluna informada
			FOR vIndex IN 1 .. ARRAY_UPPER(pCampos, 1) LOOP
				-- pega o registro
				vAux := vValores[ vLinhaAtual ];
				
				-- colocamos no corpo da mensagem
				vRetorno := vRetorno || RPAD(COALESCE(vAux[ vIndex ], ''), vColWidth[vIndex], ' ') || vSeparadorColuna;
			END LOOP;

			vRetorno := vRetorno || E'\n';
		END LOOP;
		
	-- se for HTML
	ELSE
		vRetorno := E'<table width="100%" class="tabela_mensagem">' ||
			E'<thead><tr>\n';
			
		-- montando o cabecalho
		FOR vIndex IN 1 .. ARRAY_UPPER(pLabels, 1) LOOP
			vRetorno := vRetorno || '<th align="left">' || pLabels[ vIndex ] || '</th>';
		END LOOP;

		vRetorno := vRetorno || E'</tr></thead><tbody>\n';

		-- agora, para cada registro encontrado
		FOR vLinhaAtual IN 1 .. ARRAY_UPPER(vValores, 1) LOOP

			vRetorno := vRetorno || '<tr>';
		
			-- para cada coluna informada
			FOR vIndex IN 1 .. ARRAY_UPPER(pCampos, 1) LOOP
				-- pegamos os valores do registro
				vAux := vValores[ vLinhaAtual ];
				
				-- colocamos no corpo da mensagem
				vRetorno := vRetorno || '<td>' || COALESCE(vAux[ vIndex ], '') || '</td>';
				
			END LOOP;

			vRetorno := vRetorno || E'</tr>\n';
		END LOOP;

		vRetorno := vRetorno || '</tbody></table>';
	END IF;

	RETURN vRetorno;
END
$$;


ALTER FUNCTION public.f_tabelamensagem(psql text, plabels text[], pcampos text[], phtml boolean) OWNER TO postgres;

--
-- TOC entry 935 (class 1255 OID 11285529)
-- Name: f_temp(integer, character varying, integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_temp(pcodtecrastr integer, pidequiprastr character varying, psensor integer, pdtahrini timestamp with time zone, pdtahrfim timestamp with time zone) RETURNS TABLE(tbl character varying, codtemp bigint, dtahrincl timestamp with time zone, codtecrastr integer, idequiprastr character varying, dtahrtecrastr timestamp with time zone, dtahr timestamp with time zone, long numeric, lat numeric, sensor integer, temperatura numeric)
    LANGUAGE plpgsql
    AS $$

DECLARE
  vSQL TEXT;

BEGIN
  IF pCodTecRastr < 0 OR pDtaHrIni > pDtaHrFim THEN
    RETURN;
  END IF;

  vSQL := 'SELECT ''temp''::VARCHAR(10), * FROM temp WHERE DtaHr BETWEEN ''' || pDtaHrIni || ''' AND ''' || pDtaHrFim || '''';

  IF pCodTecRastr > 0 THEN
    vSQL := vSQL || ' AND CodTecRastr = ' || pCodTecRastr;
  END IF;

  IF pIdEquipRastr > '' THEN
    vSQL := vSQL || ' AND IdEquipRastr = ' || QUOTE_LITERAL(pIdEquipRastr);
  END IF;

  IF pSensor > 0 THEN
    vSQL := vSQL || ' AND Sensor = ' || pSensor;
  END IF;

  RETURN QUERY EXECUTE vSQL;
END $$;


ALTER FUNCTION public.f_temp(pcodtecrastr integer, pidequiprastr character varying, psensor integer, pdtahrini timestamp with time zone, pdtahrfim timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 936 (class 1255 OID 11285530)
-- Name: f_updateptoref(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_updateptoref() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  vResult INT;

BEGIN
  LOCK TABLE PtoRef;

  TRUNCATE PtoRef;

  INSERT INTO PtoRef
    SELECT
      1 AS TpPtoRef,
      CidUF.CodCidUF,
      CidUF.Nome,
      ST_SetSRID(ST_MakePoint(CidUF.Pos_Long, CidUF.Pos_Lat), 29101)
    FROM
      CidUF
    WHERE
      CidUF.Pos_Long <> 0 AND
      CidUF.Pos_Lat <> 0
  
    UNION 

    SELECT
      2 AS TpPtoRef,
      Emp.CodEmp,
      Emp.Nome,
      ST_SetSRID(ST_MakePoint(Emp.Pos_Long, Emp.Pos_Lat), 29101)
    FROM
      Emp
    WHERE
      Emp.Pos_Long <> 0 AND
      Emp.Pos_Lat <> 0;

  GET DIAGNOSTICS vResult := ROW_COUNT;

  RETURN vResult;
END
$$;


ALTER FUNCTION public.f_updateptoref() OWNER TO postgres;

--
-- TOC entry 937 (class 1255 OID 11285531)
-- Name: f_verificacargas(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_verificacargas(plistacargas text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
	-- funcao para verificar se todas as cargas 
	-- estao com os dados semelhantes, ou seja,
	-- todas as cargas tem que ter:
	-- - a mesma origem
	-- - a mesma transportadora
	-- - a mesma embarcadora
	-- - a mesma data/hora de coleta
	-- - uma previsa de entrega
	-- - um tipo de carga
	-- - um tipo de operacao
	

	vTudoOk BOOLEAN;        -- indica que pode usar, nao ha problemas
	vPrimeiraCarga RECORD;  -- primeira carga da lista
	vCurRec RECORD;         -- carga atual dentro do loop
BEGIN
	-- ja inicia como tudo ok
	vTudoOk := TRUE;
	
	-- selecionamos a primeira carga
	SELECT 
			*
		INTO
			vPrimeiraCarga
		FROM
			Carga
		WHERE 
			Carga.CodCarga IN ( (SELECT CAST(Item AS BIGINT) FROM F_StringListToRecord(pListaCargas, ',')) )
		ORDER BY
			Carga.DtaHrPrevEntrega ASC
		LIMIT 1;
	
	-- pegamos as demais cargas
	FOR vCurRec IN 
		SELECT 
			*
		FROM
			Carga
		WHERE 
			Carga.CodCarga IN ( (SELECT CAST(Item AS BIGINT) FROM F_StringListToRecord(pListaCargas, ',')) )
	LOOP
		-- se ainda estiver tudo ok
		IF vTudoOk THEN
			-- se nao eh a mesma origem
			IF vCurRec.CodEmpOrig <> vPrimeiraCarga.CodEmpOrig THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao eh a mesma transportadora
			IF vCurRec.CodEmpTra <> vPrimeiraCarga.CodEmpTra THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao eh o mesmo horario de coleta
			IF vCurRec.DtaHrPrevColeta <> vPrimeiraCarga.DtaHrPrevColeta THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao eh o mesmo embarcador
			IF vCurRec.CodEmpEmbar <> vPrimeiraCarga.CodEmpEmbar THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao tem origem
			IF vCurRec.CodEmpOrig IS NULL THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao tem transportadora
			IF vCurRec.CodEmpTra IS NULL THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao tem embarcadora
			IF vCurRec.CodEmpEmbar IS NULL THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao tem horario de coleta
			IF vCurRec.DtaHrPrevColeta IS NULL THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao tem previsa de entrega
			IF vCurRec.DtaHrPrevEntrega IS NULL THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao tem tipo de carga
			IF vCurRec.CodTpCarga IS NULL THEN
				vTudoOk := FALSE;
			END IF;
			
			-- se nao tem tipo de operacao
			IF vCurRec.CodTpOper IS NULL THEN
				vTudoOk := FALSE;
			END IF;
		END IF;
	END LOOP;
		
	RETURN vTudoOk;

END
$$;


ALTER FUNCTION public.f_verificacargas(plistacargas text) OWNER TO postgres;

--
-- TOC entry 938 (class 1255 OID 11285532)
-- Name: f_vincequiprastr(integer, character, integer, character varying, boolean, integer, bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION f_vincequiprastr(pcodusr integer, pstatus character, pcodtecrastr integer, pidequiprastr character varying, peh_rastrmovel boolean, pcodtpentidade integer, pcodentidade bigint) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  pIdEquipRastr := TRIM(pIdEquipRastr);

  UPDATE
    VincEquipRastr
  SET
    Status = pStatus, 
    DtaHrStatus = NOW()
  WHERE
    VincEquipRastr.CodTecRastr = pCodTecRastr AND
    VincEquipRastr.IdEquipRastr = pIdEquipRastr AND
    VincEquipRastr.Eh_RastrMovel = pEh_RastrMovel AND
    VincEquipRastr.CodTpEntidade = pCodTpEntidade AND
    VincEquipRastr.CodEntidade = pCodEntidade;

  IF NOT FOUND AND pStatus = 'I' THEN
    INSERT INTO
      VincEquipRastr
    (
      CodUsrIncl,
      CodTecRastr,
      IdEquipRastr,
      Eh_RastrMovel,
      CodTpEntidade,
      CodEntidade
    ) VALUES (
      pCodUsr,
      pCodTecRastr,
      pIdEquipRastr,
      pEh_RastrMovel,
      pCodTpEntidade,
      pCodEntidade
    );
  END IF;
END
$$;


ALTER FUNCTION public.f_vincequiprastr(pcodusr integer, pstatus character, pcodtecrastr integer, pidequiprastr character varying, peh_rastrmovel boolean, pcodtpentidade integer, pcodentidade bigint) OWNER TO postgres;

--
-- TOC entry 939 (class 1255 OID 11285533)
-- Name: factor(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION factor(chip) RETURNS real
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getFactor';


ALTER FUNCTION public.factor(chip) OWNER TO postgres;

--
-- TOC entry 940 (class 1255 OID 11285534)
-- Name: find_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION find_extent(text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.find_extent(text, text) OWNER TO postgres;

--
-- TOC entry 941 (class 1255 OID 11285535)
-- Name: find_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION find_extent(text, text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.find_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 946 (class 1255 OID 11285536)
-- Name: find_srid(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION find_srid(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;

	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$_$;


ALTER FUNCTION public.find_srid(character varying, character varying, character varying) OWNER TO postgres;

--
-- TOC entry 7007 (class 0 OID 0)
-- Dependencies: 946
-- Name: FUNCTION find_srid(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION find_srid(character varying, character varying, character varying) IS 'args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(<db/schema>, <table>, <column>) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.';


--
-- TOC entry 947 (class 1255 OID 11285540)
-- Name: fix_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fix_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	mislinked record;
	result text;
	linked integer;
	deleted integer;
	foundschema integer;
BEGIN

	-- Since 7.3 schema support has been added.
	-- Previous postgis versions used to put the database name in
	-- the schema column. This needs to be fixed, so we try to
	-- set the correct schema for each geometry_colums record
	-- looking at table, column, type and srid.
	UPDATE geometry_columns SET f_table_schema = n.nspname
		FROM pg_namespace n, pg_class c, pg_attribute a,
			pg_constraint sridcheck, pg_constraint typecheck
			WHERE ( f_table_schema is NULL
		OR f_table_schema = ''
			OR f_table_schema NOT IN (
					SELECT nspname::varchar
					FROM pg_namespace nn, pg_class cc, pg_attribute aa
					WHERE cc.relnamespace = nn.oid
					AND cc.relname = f_table_name::name
					AND aa.attrelid = cc.oid
					AND aa.attname = f_geometry_column::name))
			AND f_table_name::name = c.relname
			AND c.oid = a.attrelid
			AND c.relnamespace = n.oid
			AND f_geometry_column::name = a.attname

			AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid(% = %)'
			AND sridcheck.consrc ~ textcat(' = ', srid::text)

			AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype(%) = ''%''::text) OR (% IS NULL))'
			AND typecheck.consrc ~ textcat(' = ''', type::text)

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS foundschema = ROW_COUNT;

	-- no linkage to system table needed
	return 'fixed:'||foundschema::text;

END;
$$;


ALTER FUNCTION public.fix_geometry_columns() OWNER TO postgres;

--
-- TOC entry 948 (class 1255 OID 11285541)
-- Name: force_2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_2d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_2d';


ALTER FUNCTION public.force_2d(geometry) OWNER TO postgres;

--
-- TOC entry 949 (class 1255 OID 11285542)
-- Name: force_3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_3d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.force_3d(geometry) OWNER TO postgres;

--
-- TOC entry 950 (class 1255 OID 11285546)
-- Name: force_3dm(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_3dm(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_3dm';


ALTER FUNCTION public.force_3dm(geometry) OWNER TO postgres;

--
-- TOC entry 951 (class 1255 OID 11285547)
-- Name: force_3dz(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_3dz(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.force_3dz(geometry) OWNER TO postgres;

--
-- TOC entry 952 (class 1255 OID 11285548)
-- Name: force_4d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_4d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_4d';


ALTER FUNCTION public.force_4d(geometry) OWNER TO postgres;

--
-- TOC entry 953 (class 1255 OID 11285549)
-- Name: force_collection(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION force_collection(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_collection';


ALTER FUNCTION public.force_collection(geometry) OWNER TO postgres;

--
-- TOC entry 954 (class 1255 OID 11285550)
-- Name: forcerhr(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION forcerhr(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_forceRHR_poly';


ALTER FUNCTION public.forcerhr(geometry) OWNER TO postgres;

--
-- TOC entry 955 (class 1255 OID 11285551)
-- Name: g_int_compress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_int_compress(internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_int_compress';


ALTER FUNCTION public.g_int_compress(internal) OWNER TO postgres;

--
-- TOC entry 956 (class 1255 OID 11285552)
-- Name: g_int_consistent(internal, integer[], integer, oid, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_int_consistent(internal, integer[], integer, oid, internal) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_int_consistent';


ALTER FUNCTION public.g_int_consistent(internal, integer[], integer, oid, internal) OWNER TO postgres;

--
-- TOC entry 957 (class 1255 OID 11285553)
-- Name: g_int_decompress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_int_decompress(internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_int_decompress';


ALTER FUNCTION public.g_int_decompress(internal) OWNER TO postgres;

--
-- TOC entry 958 (class 1255 OID 11285554)
-- Name: g_int_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_int_penalty(internal, internal, internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_int_penalty';


ALTER FUNCTION public.g_int_penalty(internal, internal, internal) OWNER TO postgres;

--
-- TOC entry 959 (class 1255 OID 11285555)
-- Name: g_int_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_int_picksplit(internal, internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_int_picksplit';


ALTER FUNCTION public.g_int_picksplit(internal, internal) OWNER TO postgres;

--
-- TOC entry 960 (class 1255 OID 11285556)
-- Name: g_int_same(integer[], integer[], internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_int_same(integer[], integer[], internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_int_same';


ALTER FUNCTION public.g_int_same(integer[], integer[], internal) OWNER TO postgres;

--
-- TOC entry 961 (class 1255 OID 11285557)
-- Name: g_int_union(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_int_union(internal, internal) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_int_union';


ALTER FUNCTION public.g_int_union(internal, internal) OWNER TO postgres;

--
-- TOC entry 962 (class 1255 OID 11285558)
-- Name: g_intbig_compress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_intbig_compress(internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_intbig_compress';


ALTER FUNCTION public.g_intbig_compress(internal) OWNER TO postgres;

--
-- TOC entry 963 (class 1255 OID 11285559)
-- Name: g_intbig_consistent(internal, internal, integer, oid, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_intbig_consistent(internal, internal, integer, oid, internal) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_intbig_consistent';


ALTER FUNCTION public.g_intbig_consistent(internal, internal, integer, oid, internal) OWNER TO postgres;

--
-- TOC entry 964 (class 1255 OID 11285560)
-- Name: g_intbig_decompress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_intbig_decompress(internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_intbig_decompress';


ALTER FUNCTION public.g_intbig_decompress(internal) OWNER TO postgres;

--
-- TOC entry 965 (class 1255 OID 11285561)
-- Name: g_intbig_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_intbig_penalty(internal, internal, internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_intbig_penalty';


ALTER FUNCTION public.g_intbig_penalty(internal, internal, internal) OWNER TO postgres;

--
-- TOC entry 966 (class 1255 OID 11285562)
-- Name: g_intbig_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_intbig_picksplit(internal, internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_intbig_picksplit';


ALTER FUNCTION public.g_intbig_picksplit(internal, internal) OWNER TO postgres;

--
-- TOC entry 967 (class 1255 OID 11285563)
-- Name: g_intbig_same(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_intbig_same(internal, internal, internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_intbig_same';


ALTER FUNCTION public.g_intbig_same(internal, internal, internal) OWNER TO postgres;

--
-- TOC entry 968 (class 1255 OID 11285564)
-- Name: g_intbig_union(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION g_intbig_union(internal, internal) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'g_intbig_union';


ALTER FUNCTION public.g_intbig_union(internal, internal) OWNER TO postgres;

--
-- TOC entry 969 (class 1255 OID 11285565)
-- Name: gen_random_bytes(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gen_random_bytes(integer) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pg_random_bytes';


ALTER FUNCTION public.gen_random_bytes(integer) OWNER TO postgres;

--
-- TOC entry 970 (class 1255 OID 11285566)
-- Name: gen_salt(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gen_salt(text) RETURNS text
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pg_gen_salt';


ALTER FUNCTION public.gen_salt(text) OWNER TO postgres;

--
-- TOC entry 971 (class 1255 OID 11285567)
-- Name: gen_salt(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gen_salt(text, integer) RETURNS text
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pg_gen_salt_rounds';


ALTER FUNCTION public.gen_salt(text, integer) OWNER TO postgres;

--
-- TOC entry 896 (class 1255 OID 11285568)
-- Name: geography(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography(geometry) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_from_geometry';


ALTER FUNCTION public.geography(geometry) OWNER TO postgres;

--
-- TOC entry 905 (class 1255 OID 11285569)
-- Name: geography(geography, integer, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography(geography, integer, boolean) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_enforce_typmod';


ALTER FUNCTION public.geography(geography, integer, boolean) OWNER TO postgres;

--
-- TOC entry 942 (class 1255 OID 11285570)
-- Name: geography_cmp(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_cmp(geography, geography) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_cmp';


ALTER FUNCTION public.geography_cmp(geography, geography) OWNER TO postgres;

--
-- TOC entry 943 (class 1255 OID 11285571)
-- Name: geography_eq(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_eq(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_eq';


ALTER FUNCTION public.geography_eq(geography, geography) OWNER TO postgres;

--
-- TOC entry 944 (class 1255 OID 11285572)
-- Name: geography_ge(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_ge(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_ge';


ALTER FUNCTION public.geography_ge(geography, geography) OWNER TO postgres;

--
-- TOC entry 945 (class 1255 OID 11285573)
-- Name: geography_gist_compress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_compress(internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_compress';


ALTER FUNCTION public.geography_gist_compress(internal) OWNER TO postgres;

--
-- TOC entry 861 (class 1255 OID 11285574)
-- Name: geography_gist_consistent(internal, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_consistent(internal, geometry, integer) RETURNS boolean
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_consistent';


ALTER FUNCTION public.geography_gist_consistent(internal, geometry, integer) OWNER TO postgres;

--
-- TOC entry 878 (class 1255 OID 11285575)
-- Name: geography_gist_decompress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_decompress(internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_decompress';


ALTER FUNCTION public.geography_gist_decompress(internal) OWNER TO postgres;

--
-- TOC entry 972 (class 1255 OID 11285576)
-- Name: geography_gist_join_selectivity(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_join_selectivity(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_join_selectivity';


ALTER FUNCTION public.geography_gist_join_selectivity(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 973 (class 1255 OID 11285577)
-- Name: geography_gist_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_penalty(internal, internal, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_penalty';


ALTER FUNCTION public.geography_gist_penalty(internal, internal, internal) OWNER TO postgres;

--
-- TOC entry 974 (class 1255 OID 11285578)
-- Name: geography_gist_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_picksplit(internal, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_picksplit';


ALTER FUNCTION public.geography_gist_picksplit(internal, internal) OWNER TO postgres;

--
-- TOC entry 975 (class 1255 OID 11285579)
-- Name: geography_gist_same(box2d, box2d, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_same(box2d, box2d, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_same';


ALTER FUNCTION public.geography_gist_same(box2d, box2d, internal) OWNER TO postgres;

--
-- TOC entry 976 (class 1255 OID 11285580)
-- Name: geography_gist_selectivity(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_selectivity(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_selectivity';


ALTER FUNCTION public.geography_gist_selectivity(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 977 (class 1255 OID 11285581)
-- Name: geography_gist_union(bytea, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gist_union(bytea, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'geography_gist_union';


ALTER FUNCTION public.geography_gist_union(bytea, internal) OWNER TO postgres;

--
-- TOC entry 978 (class 1255 OID 11285582)
-- Name: geography_gt(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_gt(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_gt';


ALTER FUNCTION public.geography_gt(geography, geography) OWNER TO postgres;

--
-- TOC entry 979 (class 1255 OID 11285583)
-- Name: geography_le(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_le(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_le';


ALTER FUNCTION public.geography_le(geography, geography) OWNER TO postgres;

--
-- TOC entry 980 (class 1255 OID 11285584)
-- Name: geography_lt(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_lt(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_lt';


ALTER FUNCTION public.geography_lt(geography, geography) OWNER TO postgres;

--
-- TOC entry 981 (class 1255 OID 11285585)
-- Name: geography_overlaps(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_overlaps(geography, geography) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_overlaps';


ALTER FUNCTION public.geography_overlaps(geography, geography) OWNER TO postgres;

--
-- TOC entry 982 (class 1255 OID 11285586)
-- Name: geography_typmod_dims(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_dims(integer) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_typmod_dims';


ALTER FUNCTION public.geography_typmod_dims(integer) OWNER TO postgres;

--
-- TOC entry 983 (class 1255 OID 11285587)
-- Name: geography_typmod_srid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_srid(integer) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_typmod_srid';


ALTER FUNCTION public.geography_typmod_srid(integer) OWNER TO postgres;

--
-- TOC entry 984 (class 1255 OID 11285588)
-- Name: geography_typmod_type(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geography_typmod_type(integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_typmod_type';


ALTER FUNCTION public.geography_typmod_type(integer) OWNER TO postgres;

--
-- TOC entry 985 (class 1255 OID 11285589)
-- Name: geomcollfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromtext(text) OWNER TO postgres;

--
-- TOC entry 986 (class 1255 OID 11285590)
-- Name: geomcollfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 987 (class 1255 OID 11285591)
-- Name: geomcollfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 988 (class 1255 OID 11285592)
-- Name: geomcollfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomcollfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.geomcollfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 989 (class 1255 OID 11285593)
-- Name: geometry(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_bytea';


ALTER FUNCTION public.geometry(bytea) OWNER TO postgres;

--
-- TOC entry 990 (class 1255 OID 11285594)
-- Name: geometry(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(box2d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_to_LWGEOM';


ALTER FUNCTION public.geometry(box2d) OWNER TO postgres;

--
-- TOC entry 991 (class 1255 OID 11285595)
-- Name: geometry(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(box3d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.geometry(box3d) OWNER TO postgres;

--
-- TOC entry 992 (class 1255 OID 11285596)
-- Name: geometry(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(box3d_extent) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.geometry(box3d_extent) OWNER TO postgres;

--
-- TOC entry 993 (class 1255 OID 11285597)
-- Name: geometry(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(chip) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_to_LWGEOM';


ALTER FUNCTION public.geometry(chip) OWNER TO postgres;

--
-- TOC entry 994 (class 1255 OID 11285598)
-- Name: geometry(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(geography) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geometry_from_geography';


ALTER FUNCTION public.geometry(geography) OWNER TO postgres;

--
-- TOC entry 995 (class 1255 OID 11285599)
-- Name: geometry(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.geometry(text) OWNER TO postgres;

--
-- TOC entry 996 (class 1255 OID 11285600)
-- Name: geometry_above(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_above(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_above';


ALTER FUNCTION public.geometry_above(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 997 (class 1255 OID 11285601)
-- Name: geometry_below(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_below(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_below';


ALTER FUNCTION public.geometry_below(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 998 (class 1255 OID 11285602)
-- Name: geometry_cmp(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_cmp(geometry, geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_cmp';


ALTER FUNCTION public.geometry_cmp(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 999 (class 1255 OID 11285603)
-- Name: geometry_contain(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_contain(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_contain';


ALTER FUNCTION public.geometry_contain(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1000 (class 1255 OID 11285604)
-- Name: geometry_contained(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_contained(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_contained';


ALTER FUNCTION public.geometry_contained(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1001 (class 1255 OID 11285605)
-- Name: geometry_eq(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_eq(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_eq';


ALTER FUNCTION public.geometry_eq(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1002 (class 1255 OID 11285606)
-- Name: geometry_ge(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_ge(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_ge';


ALTER FUNCTION public.geometry_ge(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1003 (class 1255 OID 11285607)
-- Name: geometry_gist_joinsel(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_gist_joinsel(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_joinsel';


ALTER FUNCTION public.geometry_gist_joinsel(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 1004 (class 1255 OID 11285608)
-- Name: geometry_gist_sel(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_gist_sel(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_sel';


ALTER FUNCTION public.geometry_gist_sel(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 1005 (class 1255 OID 11285609)
-- Name: geometry_gt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_gt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_gt';


ALTER FUNCTION public.geometry_gt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1006 (class 1255 OID 11285610)
-- Name: geometry_le(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_le(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_le';


ALTER FUNCTION public.geometry_le(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1007 (class 1255 OID 11285611)
-- Name: geometry_left(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_left(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_left';


ALTER FUNCTION public.geometry_left(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1008 (class 1255 OID 11285612)
-- Name: geometry_lt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_lt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_lt';


ALTER FUNCTION public.geometry_lt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1009 (class 1255 OID 11285613)
-- Name: geometry_overabove(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overabove(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overabove';


ALTER FUNCTION public.geometry_overabove(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1010 (class 1255 OID 11285614)
-- Name: geometry_overbelow(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overbelow(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overbelow';


ALTER FUNCTION public.geometry_overbelow(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1011 (class 1255 OID 11285615)
-- Name: geometry_overlap(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overlap(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overlap';


ALTER FUNCTION public.geometry_overlap(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1012 (class 1255 OID 11285616)
-- Name: geometry_overleft(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overleft(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overleft';


ALTER FUNCTION public.geometry_overleft(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1013 (class 1255 OID 11285617)
-- Name: geometry_overright(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_overright(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overright';


ALTER FUNCTION public.geometry_overright(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1014 (class 1255 OID 11285618)
-- Name: geometry_right(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_right(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_right';


ALTER FUNCTION public.geometry_right(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1015 (class 1255 OID 11285619)
-- Name: geometry_same(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_same(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_samebox';


ALTER FUNCTION public.geometry_same(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1016 (class 1255 OID 11285620)
-- Name: geometry_samebox(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometry_samebox(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_samebox';


ALTER FUNCTION public.geometry_samebox(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1017 (class 1255 OID 11285621)
-- Name: geometryfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometryfromtext(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.geometryfromtext(text) OWNER TO postgres;

--
-- TOC entry 1018 (class 1255 OID 11285622)
-- Name: geometryfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometryfromtext(text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.geometryfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1019 (class 1255 OID 11285623)
-- Name: geometryn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geometryn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_geometryn_collection';


ALTER FUNCTION public.geometryn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 1020 (class 1255 OID 11285624)
-- Name: geomfromewkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromewkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOMFromWKB';


ALTER FUNCTION public.geomfromewkb(bytea) OWNER TO postgres;

--
-- TOC entry 1021 (class 1255 OID 11285625)
-- Name: geomfromewkt(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromewkt(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.geomfromewkt(text) OWNER TO postgres;

--
-- TOC entry 1022 (class 1255 OID 11285626)
-- Name: geomfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geometryfromtext($1)$_$;


ALTER FUNCTION public.geomfromtext(text) OWNER TO postgres;

--
-- TOC entry 1023 (class 1255 OID 11285627)
-- Name: geomfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geometryfromtext($1, $2)$_$;


ALTER FUNCTION public.geomfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1024 (class 1255 OID 11285628)
-- Name: geomfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromwkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_WKB';


ALTER FUNCTION public.geomfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1025 (class 1255 OID 11285629)
-- Name: geomfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT setSRID(GeomFromWKB($1), $2)$_$;


ALTER FUNCTION public.geomfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1026 (class 1255 OID 11285630)
-- Name: geomunion(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION geomunion(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geomunion';


ALTER FUNCTION public.geomunion(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1027 (class 1255 OID 11285631)
-- Name: get_proj4_from_srid(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION get_proj4_from_srid(integer) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$_$;


ALTER FUNCTION public.get_proj4_from_srid(integer) OWNER TO postgres;

--
-- TOC entry 1028 (class 1255 OID 11285632)
-- Name: getbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION getbbox(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.getbbox(geometry) OWNER TO postgres;

--
-- TOC entry 1029 (class 1255 OID 11285633)
-- Name: getsrid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION getsrid(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_getSRID';


ALTER FUNCTION public.getsrid(geometry) OWNER TO postgres;

--
-- TOC entry 1030 (class 1255 OID 11285634)
-- Name: gettransactionid(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gettransactionid() RETURNS xid
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'getTransactionID';


ALTER FUNCTION public.gettransactionid() OWNER TO postgres;

--
-- TOC entry 1031 (class 1255 OID 11285635)
-- Name: ginint4_consistent(internal, smallint, internal, integer, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ginint4_consistent(internal, smallint, internal, integer, internal, internal) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'ginint4_consistent';


ALTER FUNCTION public.ginint4_consistent(internal, smallint, internal, integer, internal, internal) OWNER TO postgres;

--
-- TOC entry 1032 (class 1255 OID 11285636)
-- Name: ginint4_queryextract(internal, internal, smallint, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ginint4_queryextract(internal, internal, smallint, internal, internal) RETURNS internal
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'ginint4_queryextract';


ALTER FUNCTION public.ginint4_queryextract(internal, internal, smallint, internal, internal) OWNER TO postgres;

--
-- TOC entry 1033 (class 1255 OID 11285637)
-- Name: hasbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION hasbbox(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_hasBBOX';


ALTER FUNCTION public.hasbbox(geometry) OWNER TO postgres;

--
-- TOC entry 1034 (class 1255 OID 11285638)
-- Name: height(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION height(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getHeight';


ALTER FUNCTION public.height(chip) OWNER TO postgres;

--
-- TOC entry 1035 (class 1255 OID 11285639)
-- Name: hmac(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION hmac(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_hmac';


ALTER FUNCTION public.hmac(bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 1036 (class 1255 OID 11285640)
-- Name: hmac(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION hmac(text, text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pg_hmac';


ALTER FUNCTION public.hmac(text, text, text) OWNER TO postgres;

--
-- TOC entry 1037 (class 1255 OID 11285641)
-- Name: icount(integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION icount(integer[]) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'icount';


ALTER FUNCTION public.icount(integer[]) OWNER TO postgres;

--
-- TOC entry 1038 (class 1255 OID 11285642)
-- Name: idx(integer[], integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION idx(integer[], integer) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'idx';


ALTER FUNCTION public.idx(integer[], integer) OWNER TO postgres;

--
-- TOC entry 1039 (class 1255 OID 11285643)
-- Name: intarray_del_elem(integer[], integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intarray_del_elem(integer[], integer) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'intarray_del_elem';


ALTER FUNCTION public.intarray_del_elem(integer[], integer) OWNER TO postgres;

--
-- TOC entry 1040 (class 1255 OID 11285644)
-- Name: intarray_push_array(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intarray_push_array(integer[], integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'intarray_push_array';


ALTER FUNCTION public.intarray_push_array(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 1041 (class 1255 OID 11285645)
-- Name: intarray_push_elem(integer[], integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intarray_push_elem(integer[], integer) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'intarray_push_elem';


ALTER FUNCTION public.intarray_push_elem(integer[], integer) OWNER TO postgres;

--
-- TOC entry 1042 (class 1255 OID 11285646)
-- Name: interiorringn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION interiorringn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_interiorringn_polygon';


ALTER FUNCTION public.interiorringn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 1043 (class 1255 OID 11285647)
-- Name: intersection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intersection(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'intersection';


ALTER FUNCTION public.intersection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1044 (class 1255 OID 11285648)
-- Name: intersects(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intersects(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'intersects';


ALTER FUNCTION public.intersects(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1045 (class 1255 OID 11285649)
-- Name: intset(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intset(integer) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'intset';


ALTER FUNCTION public.intset(integer) OWNER TO postgres;

--
-- TOC entry 1046 (class 1255 OID 11285650)
-- Name: intset_subtract(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intset_subtract(integer[], integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'intset_subtract';


ALTER FUNCTION public.intset_subtract(integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 1047 (class 1255 OID 11285651)
-- Name: intset_union_elem(integer[], integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION intset_union_elem(integer[], integer) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'intset_union_elem';


ALTER FUNCTION public.intset_union_elem(integer[], integer) OWNER TO postgres;

--
-- TOC entry 1048 (class 1255 OID 11285652)
-- Name: isclosed(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isclosed(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_isclosed_linestring';


ALTER FUNCTION public.isclosed(geometry) OWNER TO postgres;

--
-- TOC entry 1049 (class 1255 OID 11285653)
-- Name: isempty(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isempty(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_isempty';


ALTER FUNCTION public.isempty(geometry) OWNER TO postgres;

--
-- TOC entry 1050 (class 1255 OID 11285654)
-- Name: isring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isring(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'isring';


ALTER FUNCTION public.isring(geometry) OWNER TO postgres;

--
-- TOC entry 1051 (class 1255 OID 11285655)
-- Name: issimple(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION issimple(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'issimple';


ALTER FUNCTION public.issimple(geometry) OWNER TO postgres;

--
-- TOC entry 1052 (class 1255 OID 11285656)
-- Name: isvalid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION isvalid(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'isvalid';


ALTER FUNCTION public.isvalid(geometry) OWNER TO postgres;

--
-- TOC entry 1053 (class 1255 OID 11285657)
-- Name: length(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_length_linestring';


ALTER FUNCTION public.length(geometry) OWNER TO postgres;

--
-- TOC entry 1054 (class 1255 OID 11285658)
-- Name: length2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_length2d_linestring';


ALTER FUNCTION public.length2d(geometry) OWNER TO postgres;

--
-- TOC entry 1055 (class 1255 OID 11285659)
-- Name: length2d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length2d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_length2d_ellipsoid';


ALTER FUNCTION public.length2d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 1056 (class 1255 OID 11285660)
-- Name: length3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_length_linestring';


ALTER FUNCTION public.length3d(geometry) OWNER TO postgres;

--
-- TOC entry 1057 (class 1255 OID 11285661)
-- Name: length3d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length3d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.length3d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 1058 (class 1255 OID 11285662)
-- Name: length_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION length_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.length_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 1059 (class 1255 OID 11285663)
-- Name: line_interpolate_point(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION line_interpolate_point(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_interpolate_point';


ALTER FUNCTION public.line_interpolate_point(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1060 (class 1255 OID 11285664)
-- Name: line_locate_point(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION line_locate_point(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_locate_point';


ALTER FUNCTION public.line_locate_point(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1061 (class 1255 OID 11285665)
-- Name: line_substring(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION line_substring(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_substring';


ALTER FUNCTION public.line_substring(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1062 (class 1255 OID 11285666)
-- Name: linefrommultipoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefrommultipoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_from_mpoint';


ALTER FUNCTION public.linefrommultipoint(geometry) OWNER TO postgres;

--
-- TOC entry 1063 (class 1255 OID 11285667)
-- Name: linefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'LINESTRING'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromtext(text) OWNER TO postgres;

--
-- TOC entry 1064 (class 1255 OID 11285668)
-- Name: linefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'LINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1065 (class 1255 OID 11285669)
-- Name: linefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1066 (class 1255 OID 11285670)
-- Name: linefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1067 (class 1255 OID 11285671)
-- Name: linemerge(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linemerge(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'linemerge';


ALTER FUNCTION public.linemerge(geometry) OWNER TO postgres;

--
-- TOC entry 1068 (class 1255 OID 11285672)
-- Name: linestringfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT LineFromText($1)$_$;


ALTER FUNCTION public.linestringfromtext(text) OWNER TO postgres;

--
-- TOC entry 1069 (class 1255 OID 11285673)
-- Name: linestringfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT LineFromText($1, $2)$_$;


ALTER FUNCTION public.linestringfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1070 (class 1255 OID 11285674)
-- Name: linestringfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linestringfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1071 (class 1255 OID 11285675)
-- Name: linestringfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION linestringfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.linestringfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1072 (class 1255 OID 11285676)
-- Name: locate_along_measure(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION locate_along_measure(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT locate_between_measures($1, $2, $2) $_$;


ALTER FUNCTION public.locate_along_measure(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1073 (class 1255 OID 11285677)
-- Name: locate_between_measures(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION locate_between_measures(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_locate_between_m';


ALTER FUNCTION public.locate_between_measures(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1074 (class 1255 OID 11285678)
-- Name: lockrow(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $_$;


ALTER FUNCTION public.lockrow(text, text, text) OWNER TO postgres;

--
-- TOC entry 7008 (class 0 OID 0)
-- Dependencies: 1074
-- Name: FUNCTION lockrow(text, text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION lockrow(text, text, text) IS 'args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table';


--
-- TOC entry 1075 (class 1255 OID 11285679)
-- Name: lockrow(text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, text) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $_$;


ALTER FUNCTION public.lockrow(text, text, text, text) OWNER TO postgres;

--
-- TOC entry 1076 (class 1255 OID 11285680)
-- Name: lockrow(text, text, text, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, timestamp without time zone) RETURNS integer
    LANGUAGE sql STRICT
    AS $_$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $_$;


ALTER FUNCTION public.lockrow(text, text, text, timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 7009 (class 0 OID 0)
-- Dependencies: 1076
-- Name: FUNCTION lockrow(text, text, text, timestamp without time zone); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION lockrow(text, text, text, timestamp without time zone) IS 'args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';


--
-- TOC entry 1080 (class 1255 OID 11285681)
-- Name: lockrow(text, text, text, text, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lockrow(text, text, text, text, timestamp without time zone) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE 'toid: %', mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$_$;


ALTER FUNCTION public.lockrow(text, text, text, text, timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 7010 (class 0 OID 0)
-- Dependencies: 1080
-- Name: FUNCTION lockrow(text, text, text, text, timestamp without time zone); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) IS 'args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table';


--
-- TOC entry 1081 (class 1255 OID 11285682)
-- Name: longtransactionsenabled(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION longtransactionsenabled() RETURNS boolean
    LANGUAGE plpgsql
    AS $$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$$;


ALTER FUNCTION public.longtransactionsenabled() OWNER TO postgres;

--
-- TOC entry 1082 (class 1255 OID 11285683)
-- Name: lwgeom_gist_compress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_compress(internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_compress';


ALTER FUNCTION public.lwgeom_gist_compress(internal) OWNER TO postgres;

--
-- TOC entry 1083 (class 1255 OID 11285684)
-- Name: lwgeom_gist_consistent(internal, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_consistent(internal, geometry, integer) RETURNS boolean
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_consistent';


ALTER FUNCTION public.lwgeom_gist_consistent(internal, geometry, integer) OWNER TO postgres;

--
-- TOC entry 1084 (class 1255 OID 11285685)
-- Name: lwgeom_gist_decompress(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_decompress(internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_decompress';


ALTER FUNCTION public.lwgeom_gist_decompress(internal) OWNER TO postgres;

--
-- TOC entry 1085 (class 1255 OID 11285686)
-- Name: lwgeom_gist_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_penalty(internal, internal, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_penalty';


ALTER FUNCTION public.lwgeom_gist_penalty(internal, internal, internal) OWNER TO postgres;

--
-- TOC entry 1086 (class 1255 OID 11285687)
-- Name: lwgeom_gist_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_picksplit(internal, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_picksplit';


ALTER FUNCTION public.lwgeom_gist_picksplit(internal, internal) OWNER TO postgres;

--
-- TOC entry 1087 (class 1255 OID 11285688)
-- Name: lwgeom_gist_same(box2d, box2d, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_same(box2d, box2d, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_same';


ALTER FUNCTION public.lwgeom_gist_same(box2d, box2d, internal) OWNER TO postgres;

--
-- TOC entry 1088 (class 1255 OID 11285689)
-- Name: lwgeom_gist_union(bytea, internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION lwgeom_gist_union(bytea, internal) RETURNS internal
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_union';


ALTER FUNCTION public.lwgeom_gist_union(bytea, internal) OWNER TO postgres;

--
-- TOC entry 1089 (class 1255 OID 11285690)
-- Name: m(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION m(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_m_point';


ALTER FUNCTION public.m(geometry) OWNER TO postgres;

--
-- TOC entry 1090 (class 1255 OID 11285691)
-- Name: makebox2d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makebox2d(geometry, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_construct';


ALTER FUNCTION public.makebox2d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1091 (class 1255 OID 11285692)
-- Name: makebox3d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makebox3d(geometry, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_construct';


ALTER FUNCTION public.makebox3d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1092 (class 1255 OID 11285693)
-- Name: makeline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makeline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makeline';


ALTER FUNCTION public.makeline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1093 (class 1255 OID 11285694)
-- Name: makeline_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makeline_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makeline_garray';


ALTER FUNCTION public.makeline_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 1094 (class 1255 OID 11285695)
-- Name: makepoint(double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepoint(double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.makepoint(double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1095 (class 1255 OID 11285696)
-- Name: makepoint(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepoint(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.makepoint(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1096 (class 1255 OID 11285697)
-- Name: makepoint(double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepoint(double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.makepoint(double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1097 (class 1255 OID 11285698)
-- Name: makepointm(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepointm(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint3dm';


ALTER FUNCTION public.makepointm(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1098 (class 1255 OID 11285699)
-- Name: makepolygon(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepolygon(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.makepolygon(geometry) OWNER TO postgres;

--
-- TOC entry 1099 (class 1255 OID 11285700)
-- Name: makepolygon(geometry, geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION makepolygon(geometry, geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.makepolygon(geometry, geometry[]) OWNER TO postgres;

--
-- TOC entry 1100 (class 1255 OID 11285701)
-- Name: max_distance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION max_distance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_maxdistance2d_linestring';


ALTER FUNCTION public.max_distance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1101 (class 1255 OID 11285702)
-- Name: mem_size(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mem_size(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_mem_size';


ALTER FUNCTION public.mem_size(geometry) OWNER TO postgres;

--
-- TOC entry 1102 (class 1255 OID 11285703)
-- Name: mlinefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTILINESTRING'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromtext(text) OWNER TO postgres;

--
-- TOC entry 1103 (class 1255 OID 11285704)
-- Name: mlinefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1104 (class 1255 OID 11285705)
-- Name: mlinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1105 (class 1255 OID 11285706)
-- Name: mlinefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mlinefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mlinefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1106 (class 1255 OID 11285707)
-- Name: mpointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTIPOINT'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromtext(text) OWNER TO postgres;

--
-- TOC entry 1107 (class 1255 OID 11285708)
-- Name: mpointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1,$2)) = 'MULTIPOINT'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1108 (class 1255 OID 11285709)
-- Name: mpointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1077 (class 1255 OID 11285710)
-- Name: mpointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1078 (class 1255 OID 11285711)
-- Name: mpolyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'MULTIPOLYGON'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromtext(text) OWNER TO postgres;

--
-- TOC entry 1079 (class 1255 OID 11285712)
-- Name: mpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1110 (class 1255 OID 11285713)
-- Name: mpolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1111 (class 1255 OID 11285714)
-- Name: mpolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION mpolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.mpolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1112 (class 1255 OID 11285715)
-- Name: multi(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multi(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_multi';


ALTER FUNCTION public.multi(geometry) OWNER TO postgres;

--
-- TOC entry 1113 (class 1255 OID 11285716)
-- Name: multilinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multilinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1114 (class 1255 OID 11285717)
-- Name: multilinefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multilinefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1115 (class 1255 OID 11285718)
-- Name: multilinestringfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinestringfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_MLineFromText($1)$_$;


ALTER FUNCTION public.multilinestringfromtext(text) OWNER TO postgres;

--
-- TOC entry 1116 (class 1255 OID 11285719)
-- Name: multilinestringfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multilinestringfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MLineFromText($1, $2)$_$;


ALTER FUNCTION public.multilinestringfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1117 (class 1255 OID 11285720)
-- Name: multipointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPointFromText($1)$_$;


ALTER FUNCTION public.multipointfromtext(text) OWNER TO postgres;

--
-- TOC entry 1118 (class 1255 OID 11285721)
-- Name: multipointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPointFromText($1, $2)$_$;


ALTER FUNCTION public.multipointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1119 (class 1255 OID 11285722)
-- Name: multipointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1120 (class 1255 OID 11285723)
-- Name: multipointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1121 (class 1255 OID 11285724)
-- Name: multipolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1122 (class 1255 OID 11285725)
-- Name: multipolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.multipolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1123 (class 1255 OID 11285726)
-- Name: multipolygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1)$_$;


ALTER FUNCTION public.multipolygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 1124 (class 1255 OID 11285727)
-- Name: multipolygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION multipolygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1, $2)$_$;


ALTER FUNCTION public.multipolygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1125 (class 1255 OID 11285728)
-- Name: ndims(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ndims(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_ndims';


ALTER FUNCTION public.ndims(geometry) OWNER TO postgres;

--
-- TOC entry 1126 (class 1255 OID 11285729)
-- Name: noop(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION noop(geometry) RETURNS geometry
    LANGUAGE c STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_noop';


ALTER FUNCTION public.noop(geometry) OWNER TO postgres;

--
-- TOC entry 1127 (class 1255 OID 11285730)
-- Name: normal_rand(integer, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION normal_rand(integer, double precision, double precision) RETURNS SETOF double precision
    LANGUAGE c STRICT
    AS '$libdir/tablefunc', 'normal_rand';


ALTER FUNCTION public.normal_rand(integer, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1128 (class 1255 OID 11285731)
-- Name: npoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION npoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_npoints';


ALTER FUNCTION public.npoints(geometry) OWNER TO postgres;

--
-- TOC entry 1129 (class 1255 OID 11285732)
-- Name: nrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION nrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_nrings';


ALTER FUNCTION public.nrings(geometry) OWNER TO postgres;

--
-- TOC entry 1130 (class 1255 OID 11285733)
-- Name: numgeometries(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numgeometries(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numgeometries_collection';


ALTER FUNCTION public.numgeometries(geometry) OWNER TO postgres;

--
-- TOC entry 1131 (class 1255 OID 11285734)
-- Name: numinteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numinteriorring(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.numinteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 1132 (class 1255 OID 11285735)
-- Name: numinteriorrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numinteriorrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.numinteriorrings(geometry) OWNER TO postgres;

--
-- TOC entry 1133 (class 1255 OID 11285736)
-- Name: numpoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION numpoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numpoints_linestring';


ALTER FUNCTION public.numpoints(geometry) OWNER TO postgres;

--
-- TOC entry 1134 (class 1255 OID 11285737)
-- Name: overlaps(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION "overlaps"(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'overlaps';


ALTER FUNCTION public."overlaps"(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1135 (class 1255 OID 11285738)
-- Name: perimeter(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION perimeter(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_perimeter_poly';


ALTER FUNCTION public.perimeter(geometry) OWNER TO postgres;

--
-- TOC entry 1136 (class 1255 OID 11285739)
-- Name: perimeter2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION perimeter2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_perimeter2d_poly';


ALTER FUNCTION public.perimeter2d(geometry) OWNER TO postgres;

--
-- TOC entry 1137 (class 1255 OID 11285743)
-- Name: perimeter3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION perimeter3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_perimeter_poly';


ALTER FUNCTION public.perimeter3d(geometry) OWNER TO postgres;

--
-- TOC entry 1138 (class 1255 OID 11285744)
-- Name: pgis_geometry_accum_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_accum_finalfn(pgis_abs) RETURNS geometry[]
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'pgis_geometry_accum_finalfn';


ALTER FUNCTION public.pgis_geometry_accum_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 1139 (class 1255 OID 11285745)
-- Name: pgis_geometry_accum_transfn(pgis_abs, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) RETURNS pgis_abs
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'pgis_geometry_accum_transfn';


ALTER FUNCTION public.pgis_geometry_accum_transfn(pgis_abs, geometry) OWNER TO postgres;

--
-- TOC entry 1140 (class 1255 OID 11285746)
-- Name: pgis_geometry_collect_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_collect_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'pgis_geometry_collect_finalfn';


ALTER FUNCTION public.pgis_geometry_collect_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 1141 (class 1255 OID 11285747)
-- Name: pgis_geometry_makeline_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'pgis_geometry_makeline_finalfn';


ALTER FUNCTION public.pgis_geometry_makeline_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 1142 (class 1255 OID 11285748)
-- Name: pgis_geometry_polygonize_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'pgis_geometry_polygonize_finalfn';


ALTER FUNCTION public.pgis_geometry_polygonize_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 1143 (class 1255 OID 11285749)
-- Name: pgis_geometry_union_finalfn(pgis_abs); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgis_geometry_union_finalfn(pgis_abs) RETURNS geometry
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'pgis_geometry_union_finalfn';


ALTER FUNCTION public.pgis_geometry_union_finalfn(pgis_abs) OWNER TO postgres;

--
-- TOC entry 1144 (class 1255 OID 11285750)
-- Name: pgp_key_id(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_key_id(bytea) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_key_id_w';


ALTER FUNCTION public.pgp_key_id(bytea) OWNER TO postgres;

--
-- TOC entry 1109 (class 1255 OID 11285751)
-- Name: pgp_pub_decrypt(bytea, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt(bytea, bytea) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_text';


ALTER FUNCTION public.pgp_pub_decrypt(bytea, bytea) OWNER TO postgres;

--
-- TOC entry 1145 (class 1255 OID 11285752)
-- Name: pgp_pub_decrypt(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt(bytea, bytea, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_text';


ALTER FUNCTION public.pgp_pub_decrypt(bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 1146 (class 1255 OID 11285753)
-- Name: pgp_pub_decrypt(bytea, bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt(bytea, bytea, text, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_text';


ALTER FUNCTION public.pgp_pub_decrypt(bytea, bytea, text, text) OWNER TO postgres;

--
-- TOC entry 1147 (class 1255 OID 11285754)
-- Name: pgp_pub_decrypt_bytea(bytea, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt_bytea(bytea, bytea) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_bytea';


ALTER FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea) OWNER TO postgres;

--
-- TOC entry 1148 (class 1255 OID 11285755)
-- Name: pgp_pub_decrypt_bytea(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_bytea';


ALTER FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 1149 (class 1255 OID 11285756)
-- Name: pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_decrypt_bytea';


ALTER FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text, text) OWNER TO postgres;

--
-- TOC entry 1150 (class 1255 OID 11285757)
-- Name: pgp_pub_encrypt(text, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt(text, bytea) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_text';


ALTER FUNCTION public.pgp_pub_encrypt(text, bytea) OWNER TO postgres;

--
-- TOC entry 1151 (class 1255 OID 11285758)
-- Name: pgp_pub_encrypt(text, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt(text, bytea, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_text';


ALTER FUNCTION public.pgp_pub_encrypt(text, bytea, text) OWNER TO postgres;

--
-- TOC entry 1152 (class 1255 OID 11285759)
-- Name: pgp_pub_encrypt_bytea(bytea, bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt_bytea(bytea, bytea) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_bytea';


ALTER FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea) OWNER TO postgres;

--
-- TOC entry 1153 (class 1255 OID 11285760)
-- Name: pgp_pub_encrypt_bytea(bytea, bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_pub_encrypt_bytea';


ALTER FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea, text) OWNER TO postgres;

--
-- TOC entry 1154 (class 1255 OID 11285761)
-- Name: pgp_sym_decrypt(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt(bytea, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_text';


ALTER FUNCTION public.pgp_sym_decrypt(bytea, text) OWNER TO postgres;

--
-- TOC entry 1155 (class 1255 OID 11285762)
-- Name: pgp_sym_decrypt(bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt(bytea, text, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_text';


ALTER FUNCTION public.pgp_sym_decrypt(bytea, text, text) OWNER TO postgres;

--
-- TOC entry 1156 (class 1255 OID 11285763)
-- Name: pgp_sym_decrypt_bytea(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt_bytea(bytea, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_bytea';


ALTER FUNCTION public.pgp_sym_decrypt_bytea(bytea, text) OWNER TO postgres;

--
-- TOC entry 1157 (class 1255 OID 11285764)
-- Name: pgp_sym_decrypt_bytea(bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_decrypt_bytea(bytea, text, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_decrypt_bytea';


ALTER FUNCTION public.pgp_sym_decrypt_bytea(bytea, text, text) OWNER TO postgres;

--
-- TOC entry 1158 (class 1255 OID 11285765)
-- Name: pgp_sym_encrypt(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt(text, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_text';


ALTER FUNCTION public.pgp_sym_encrypt(text, text) OWNER TO postgres;

--
-- TOC entry 1159 (class 1255 OID 11285766)
-- Name: pgp_sym_encrypt(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt(text, text, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_text';


ALTER FUNCTION public.pgp_sym_encrypt(text, text, text) OWNER TO postgres;

--
-- TOC entry 1160 (class 1255 OID 11285767)
-- Name: pgp_sym_encrypt_bytea(bytea, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt_bytea(bytea, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_bytea';


ALTER FUNCTION public.pgp_sym_encrypt_bytea(bytea, text) OWNER TO postgres;

--
-- TOC entry 1161 (class 1255 OID 11285768)
-- Name: pgp_sym_encrypt_bytea(bytea, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pgp_sym_encrypt_bytea(bytea, text, text) RETURNS bytea
    LANGUAGE c STRICT
    AS '$libdir/pgcrypto', 'pgp_sym_encrypt_bytea';


ALTER FUNCTION public.pgp_sym_encrypt_bytea(bytea, text, text) OWNER TO postgres;

--
-- TOC entry 1162 (class 1255 OID 11285769)
-- Name: point_inside_circle(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION point_inside_circle(geometry, double precision, double precision, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_inside_circle_point';


ALTER FUNCTION public.point_inside_circle(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1163 (class 1255 OID 11285770)
-- Name: pointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'POINT'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromtext(text) OWNER TO postgres;

--
-- TOC entry 1164 (class 1255 OID 11285771)
-- Name: pointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'POINT'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1165 (class 1255 OID 11285772)
-- Name: pointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POINT'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1166 (class 1255 OID 11285773)
-- Name: pointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'POINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.pointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1167 (class 1255 OID 11285774)
-- Name: pointn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_pointn_linestring';


ALTER FUNCTION public.pointn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 1168 (class 1255 OID 11285775)
-- Name: pointonsurface(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION pointonsurface(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'pointonsurface';


ALTER FUNCTION public.pointonsurface(geometry) OWNER TO postgres;

--
-- TOC entry 1169 (class 1255 OID 11285776)
-- Name: polyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = 'POLYGON'
	THEN GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromtext(text) OWNER TO postgres;

--
-- TOC entry 1170 (class 1255 OID 11285777)
-- Name: polyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'POLYGON'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1171 (class 1255 OID 11285778)
-- Name: polyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1172 (class 1255 OID 11285779)
-- Name: polyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'POLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1173 (class 1255 OID 11285780)
-- Name: polygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT PolyFromText($1)$_$;


ALTER FUNCTION public.polygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 1174 (class 1255 OID 11285781)
-- Name: polygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT PolyFromText($1, $2)$_$;


ALTER FUNCTION public.polygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1175 (class 1255 OID 11285782)
-- Name: polygonfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polygonfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1176 (class 1255 OID 11285783)
-- Name: polygonfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = 'POLYGON'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.polygonfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1177 (class 1255 OID 11285784)
-- Name: polygonize_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION polygonize_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'polygonize_garray';


ALTER FUNCTION public.polygonize_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 1179 (class 1255 OID 11285785)
-- Name: populate_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION populate_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;

BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;

	EXECUTE 'TRUNCATE geometry_columns';

	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
	AND t.typname = 'geometry'
	AND a.attisdropped = false
	AND a.atttypid = t.oid
	AND a.attrelid = c.oid
	AND c.relnamespace = n.oid
	AND n.nspname NOT ILIKE 'pg_temp%';

	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';

	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	-- Add views to geometry columns table
	RAISE DEBUG 'Processing Views.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
	LOOP

	inserted := inserted + populate_geometry_columns(gcs.oid);
	END LOOP;

	IF oldcount > inserted THEN
	stale = oldcount-inserted;
	ELSE
	stale = 0;
	END IF;

	RETURN 'probed:' ||probed|| ' inserted:'||inserted|| ' conflicts:'||probed-inserted|| ' deleted:'||stale;
END

$$;


ALTER FUNCTION public.populate_geometry_columns() OWNER TO postgres;

--
-- TOC entry 7011 (class 0 OID 0)
-- Dependencies: 1179
-- Name: FUNCTION populate_geometry_columns(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION populate_geometry_columns() IS 'Ensures geometry columns have appropriate spatial constraints and exist in the geometry_columns table.';


--
-- TOC entry 1180 (class 1255 OID 11285786)
-- Name: populate_geometry_columns(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION populate_geometry_columns(tbl_oid oid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;

BEGIN
	inserted := 0;

	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP

	RAISE DEBUG 'Processing table %.%.%', gcs.nspname, gcs.relname, gcs.attname;

	DELETE FROM geometry_columns
	  WHERE f_table_schema = quote_ident(gcs.nspname)
	  AND f_table_name = quote_ident(gcs.relname)
	  AND f_geometry_column = quote_ident(gcs.attname);

	gc_is_valid := true;

	-- Try to find srid check from system tables (pg_constraint)
	gsrid :=
		(SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %');
	IF (gsrid IS NULL) THEN
		-- Try to find srid from the geometry itself
		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		-- Try to apply srid check to column
		IF (gsrid IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || '
						 CHECK (srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find ndims check from system tables (pg_constraint)
	gndims :=
		(SELECT replace(split_part(s.consrc, ' = ', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %');
	IF (gndims IS NULL) THEN
		-- Try to find ndims from the geometry itself
		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		-- Try to apply ndims check to column
		IF (gndims IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
						 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
						 CHECK (ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
			EXCEPTION
				WHEN check_violation THEN
					RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
					gc_is_valid := false;
			END;
		END IF;
	END IF;

	-- Try to find geotype check from system tables (pg_constraint)
	gtype :=
		(SELECT replace(split_part(s.consrc, '''', 2), ')', '')
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = gcs.nspname
		 AND c.relname = gcs.relname
		 AND a.attname = gcs.attname
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %');
	IF (gtype IS NULL) THEN
		-- Try to find geotype from the geometry itself
		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;
		--IF (gtype IS NULL) THEN
		--    gtype := 'GEOMETRY';
		--END IF;

		-- Try to apply geometrytype check to column
		IF (gtype IS NOT NULL) THEN
			BEGIN
				EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
				CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
			EXCEPTION
				WHEN check_violation THEN
					-- No geometry check can be applied. This column contains a number of geometry types.
					RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
			END;
		END IF;
	END IF;

	IF (gsrid IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gndims IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the number of dimensions', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSIF (gtype IS NULL) THEN
		RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine the geometry type', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
	ELSE
		-- Only insert into geometry_columns if table constraints could be applied.
		IF (gc_is_valid) THEN
			INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type)
			VALUES ('', gcs.nspname, gcs.relname, gcs.attname, gndims, gsrid, gtype);
			inserted := inserted + 1;
		END IF;
	END IF;
	END LOOP;

	-- Add views to geometry columns table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'v'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
		RAISE DEBUG 'Processing view %.%.%', gcs.nspname, gcs.relname, gcs.attname;

		EXECUTE 'SELECT ndims(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gndims := gc.ndims;

		EXECUTE 'SELECT srid(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gsrid := gc.srid;

		EXECUTE 'SELECT geometrytype(' || quote_ident(gcs.attname) || ')
				 FROM ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
				 WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1'
			INTO gc;
		gtype := gc.geometrytype;

		IF (gndims IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine ndims', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gsrid IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine srid', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSIF (gtype IS NULL) THEN
			RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not determine gtype', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname);
		ELSE
			query := 'INSERT INTO geometry_columns (f_table_catalog,f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type) ' ||
					 'VALUES ('''', ' || quote_literal(gcs.nspname) || ',' || quote_literal(gcs.relname) || ',' || quote_literal(gcs.attname) || ',' || gndims || ',' || gsrid || ',' || quote_literal(gtype) || ')';
			EXECUTE query;
			inserted := inserted + 1;
		END IF;
	END LOOP;

	RETURN inserted;
END

$$;


ALTER FUNCTION public.populate_geometry_columns(tbl_oid oid) OWNER TO postgres;

--
-- TOC entry 7012 (class 0 OID 0)
-- Dependencies: 1180
-- Name: FUNCTION populate_geometry_columns(tbl_oid oid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION populate_geometry_columns(tbl_oid oid) IS 'args: relation_oid - Ensures geometry columns have appropriate spatial constraints and exist in the geometry_columns table.';


--
-- TOC entry 1181 (class 1255 OID 11285788)
-- Name: postgis_addbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_addbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_addBBOX';


ALTER FUNCTION public.postgis_addbbox(geometry) OWNER TO postgres;

--
-- TOC entry 7013 (class 0 OID 0)
-- Dependencies: 1181
-- Name: FUNCTION postgis_addbbox(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_addbbox(geometry) IS 'args: geomA - Add bounding box to the geometry.';


--
-- TOC entry 1182 (class 1255 OID 11285789)
-- Name: postgis_cache_bbox(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_cache_bbox() RETURNS trigger
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'cache_bbox';


ALTER FUNCTION public.postgis_cache_bbox() OWNER TO postgres;

--
-- TOC entry 1183 (class 1255 OID 11285790)
-- Name: postgis_dropbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_dropbbox(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dropBBOX';


ALTER FUNCTION public.postgis_dropbbox(geometry) OWNER TO postgres;

--
-- TOC entry 7014 (class 0 OID 0)
-- Dependencies: 1183
-- Name: FUNCTION postgis_dropbbox(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_dropbbox(geometry) IS 'args: geomA - Drop the bounding box cache from the geometry.';


--
-- TOC entry 1184 (class 1255 OID 11285791)
-- Name: postgis_full_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_full_version() RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
	libver text;
	projver text;
	geosver text;
	libxmlver text;
	usestats bool;
	dbproc text;
	relproc text;
	fullver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_uses_stats() INTO usestats;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;

	fullver = 'POSTGIS="' || libver || '"';

	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;

	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;

	IF usestats THEN
		fullver = fullver || ' USE_STATS';
	END IF;

	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';

	IF dbproc != relproc THEN
		fullver = fullver || ' (procs from ' || dbproc || ' need upgrade)';
	END IF;

	RETURN fullver;
END
$$;


ALTER FUNCTION public.postgis_full_version() OWNER TO postgres;

--
-- TOC entry 7015 (class 0 OID 0)
-- Dependencies: 1184
-- Name: FUNCTION postgis_full_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_full_version() IS 'Reports full postgis version and build configuration infos.';


--
-- TOC entry 1185 (class 1255 OID 11285792)
-- Name: postgis_geos_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_geos_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_geos_version';


ALTER FUNCTION public.postgis_geos_version() OWNER TO postgres;

--
-- TOC entry 7016 (class 0 OID 0)
-- Dependencies: 1185
-- Name: FUNCTION postgis_geos_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_geos_version() IS 'Returns the version number of the GEOS library.';


--
-- TOC entry 1186 (class 1255 OID 11285793)
-- Name: postgis_getbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_getbbox(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.postgis_getbbox(geometry) OWNER TO postgres;

--
-- TOC entry 1187 (class 1255 OID 11285794)
-- Name: postgis_gist_joinsel(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_gist_joinsel(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_joinsel';


ALTER FUNCTION public.postgis_gist_joinsel(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 1188 (class 1255 OID 11285795)
-- Name: postgis_gist_sel(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_gist_sel(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_sel';


ALTER FUNCTION public.postgis_gist_sel(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 1189 (class 1255 OID 11285796)
-- Name: postgis_hasbbox(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_hasbbox(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_hasBBOX';


ALTER FUNCTION public.postgis_hasbbox(geometry) OWNER TO postgres;

--
-- TOC entry 7017 (class 0 OID 0)
-- Dependencies: 1189
-- Name: FUNCTION postgis_hasbbox(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_hasbbox(geometry) IS 'args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.';


--
-- TOC entry 1190 (class 1255 OID 11285797)
-- Name: postgis_lib_build_date(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_lib_build_date() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_lib_build_date';


ALTER FUNCTION public.postgis_lib_build_date() OWNER TO postgres;

--
-- TOC entry 7018 (class 0 OID 0)
-- Dependencies: 1190
-- Name: FUNCTION postgis_lib_build_date(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_lib_build_date() IS 'Returns build date of the PostGIS library.';


--
-- TOC entry 1191 (class 1255 OID 11285798)
-- Name: postgis_lib_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_lib_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_lib_version';


ALTER FUNCTION public.postgis_lib_version() OWNER TO postgres;

--
-- TOC entry 7019 (class 0 OID 0)
-- Dependencies: 1191
-- Name: FUNCTION postgis_lib_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_lib_version() IS 'Returns the version number of the PostGIS library.';


--
-- TOC entry 1192 (class 1255 OID 11285799)
-- Name: postgis_libxml_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_libxml_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_libxml_version';


ALTER FUNCTION public.postgis_libxml_version() OWNER TO postgres;

--
-- TOC entry 7020 (class 0 OID 0)
-- Dependencies: 1192
-- Name: FUNCTION postgis_libxml_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_libxml_version() IS 'Returns the version number of the libxml2 library.';


--
-- TOC entry 1193 (class 1255 OID 11285800)
-- Name: postgis_noop(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_noop(geometry) RETURNS geometry
    LANGUAGE c STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_noop';


ALTER FUNCTION public.postgis_noop(geometry) OWNER TO postgres;

--
-- TOC entry 1194 (class 1255 OID 11285801)
-- Name: postgis_proj_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_proj_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_proj_version';


ALTER FUNCTION public.postgis_proj_version() OWNER TO postgres;

--
-- TOC entry 7021 (class 0 OID 0)
-- Dependencies: 1194
-- Name: FUNCTION postgis_proj_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_proj_version() IS 'Returns the version number of the PROJ4 library.';


--
-- TOC entry 1195 (class 1255 OID 11285802)
-- Name: postgis_scripts_build_date(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_build_date() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$SELECT '2010-07-30 16:52:45'::text AS version$$;


ALTER FUNCTION public.postgis_scripts_build_date() OWNER TO postgres;

--
-- TOC entry 7022 (class 0 OID 0)
-- Dependencies: 1195
-- Name: FUNCTION postgis_scripts_build_date(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_scripts_build_date() IS 'Returns build date of the PostGIS scripts.';


--
-- TOC entry 1196 (class 1255 OID 11285803)
-- Name: postgis_scripts_installed(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_installed() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$SELECT '2.0 r5718'::text AS version$$;


ALTER FUNCTION public.postgis_scripts_installed() OWNER TO postgres;

--
-- TOC entry 7023 (class 0 OID 0)
-- Dependencies: 1196
-- Name: FUNCTION postgis_scripts_installed(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_scripts_installed() IS 'Returns version of the postgis scripts installed in this database.';


--
-- TOC entry 1197 (class 1255 OID 11285804)
-- Name: postgis_scripts_released(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_scripts_released() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_scripts_released';


ALTER FUNCTION public.postgis_scripts_released() OWNER TO postgres;

--
-- TOC entry 7024 (class 0 OID 0)
-- Dependencies: 1197
-- Name: FUNCTION postgis_scripts_released(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_scripts_released() IS 'Returns the version number of the postgis.sql script released with the installed postgis lib.';


--
-- TOC entry 1198 (class 1255 OID 11285805)
-- Name: postgis_transform_geometry(geometry, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_transform_geometry(geometry, text, text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'transform_geom';


ALTER FUNCTION public.postgis_transform_geometry(geometry, text, text, integer) OWNER TO postgres;

--
-- TOC entry 1199 (class 1255 OID 11285806)
-- Name: postgis_uses_stats(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_uses_stats() RETURNS boolean
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_uses_stats';


ALTER FUNCTION public.postgis_uses_stats() OWNER TO postgres;

--
-- TOC entry 7025 (class 0 OID 0)
-- Dependencies: 1199
-- Name: FUNCTION postgis_uses_stats(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_uses_stats() IS 'Returns TRUE if STATS usage has been enabled.';


--
-- TOC entry 1200 (class 1255 OID 11285807)
-- Name: postgis_version(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION postgis_version() RETURNS text
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'postgis_version';


ALTER FUNCTION public.postgis_version() OWNER TO postgres;

--
-- TOC entry 7026 (class 0 OID 0)
-- Dependencies: 1200
-- Name: FUNCTION postgis_version(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION postgis_version() IS 'Returns PostGIS version number and compile-time options.';


--
-- TOC entry 1201 (class 1255 OID 11285808)
-- Name: probe_geometry_columns(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION probe_geometry_columns() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
	inserted integer;
	oldcount integer;
	probed integer;
	stale integer;
BEGIN

	SELECT count(*) INTO oldcount FROM geometry_columns;

	SELECT count(*) INTO probed
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck

		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'
		;

	INSERT INTO geometry_columns SELECT
		''::varchar as f_table_catalogue,
		n.nspname::varchar as f_table_schema,
		c.relname::varchar as f_table_name,
		a.attname::varchar as f_geometry_column,
		2 as coord_dimension,
		trim(both  ' =)' from
			replace(replace(split_part(
				sridcheck.consrc, ' = ', 2), ')', ''), '(', ''))::integer AS srid,
		trim(both ' =)''' from substr(typecheck.consrc,
			strpos(typecheck.consrc, '='),
			strpos(typecheck.consrc, '::')-
			strpos(typecheck.consrc, '=')
			))::varchar as type
		FROM pg_class c, pg_attribute a, pg_type t,
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck
		WHERE t.typname = 'geometry'
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE '(st_srid('||a.attname||') = %)'
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
		'((geometrytype('||a.attname||') = ''%''::text) OR (% IS NULL))'

			AND NOT EXISTS (
					SELECT oid FROM geometry_columns gc
					WHERE c.relname::varchar = gc.f_table_name
					AND n.nspname::varchar = gc.f_table_schema
					AND a.attname::varchar = gc.f_geometry_column
			);

	GET DIAGNOSTICS inserted = ROW_COUNT;

	IF oldcount > probed THEN
		stale = oldcount-probed;
	ELSE
		stale = 0;
	END IF;

	RETURN 'probed:'||probed::text||
		' inserted:'||inserted::text||
		' conflicts:'||(probed-inserted)::text||
		' stale:'||stale::text;
END

$$;


ALTER FUNCTION public.probe_geometry_columns() OWNER TO postgres;

--
-- TOC entry 7027 (class 0 OID 0)
-- Dependencies: 1201
-- Name: FUNCTION probe_geometry_columns(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION probe_geometry_columns() IS 'Scans all tables with PostGIS geometry constraints and adds them to the geometry_columns table if they are not there.';


--
-- TOC entry 1202 (class 1255 OID 11285809)
-- Name: querytree(query_int); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION querytree(query_int) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'querytree';


ALTER FUNCTION public.querytree(query_int) OWNER TO postgres;

--
-- TOC entry 1203 (class 1255 OID 11285810)
-- Name: rboolop(query_int, integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rboolop(query_int, integer[]) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'rboolop';


ALTER FUNCTION public.rboolop(query_int, integer[]) OWNER TO postgres;

--
-- TOC entry 7028 (class 0 OID 0)
-- Dependencies: 1203
-- Name: FUNCTION rboolop(query_int, integer[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION rboolop(query_int, integer[]) IS 'boolean operation with array';


--
-- TOC entry 1178 (class 1255 OID 11285811)
-- Name: relate(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION relate(geometry, geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'relate_full';


ALTER FUNCTION public.relate(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1204 (class 1255 OID 11285812)
-- Name: relate(geometry, geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION relate(geometry, geometry, text) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'relate_pattern';


ALTER FUNCTION public.relate(geometry, geometry, text) OWNER TO postgres;

--
-- TOC entry 1205 (class 1255 OID 11285813)
-- Name: removepoint(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION removepoint(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_removepoint';


ALTER FUNCTION public.removepoint(geometry, integer) OWNER TO postgres;

--
-- TOC entry 1206 (class 1255 OID 11285814)
-- Name: rename_geometry_table_constraints(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rename_geometry_table_constraints() RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $$
SELECT 'rename_geometry_table_constraint() is obsoleted'::text
$$;


ALTER FUNCTION public.rename_geometry_table_constraints() OWNER TO postgres;

--
-- TOC entry 1207 (class 1255 OID 11285815)
-- Name: reverse(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION reverse(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_reverse';


ALTER FUNCTION public.reverse(geometry) OWNER TO postgres;

--
-- TOC entry 1208 (class 1255 OID 11285816)
-- Name: rotate(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotate(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT rotateZ($1, $2)$_$;


ALTER FUNCTION public.rotate(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1209 (class 1255 OID 11285817)
-- Name: rotatex(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotatex(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$_$;


ALTER FUNCTION public.rotatex(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1210 (class 1255 OID 11285818)
-- Name: rotatey(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotatey(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$_$;


ALTER FUNCTION public.rotatey(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1211 (class 1255 OID 11285819)
-- Name: rotatez(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION rotatez(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$_$;


ALTER FUNCTION public.rotatez(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1212 (class 1255 OID 11285820)
-- Name: scale(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION scale(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT scale($1, $2, $3, 1)$_$;


ALTER FUNCTION public.scale(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1213 (class 1255 OID 11285821)
-- Name: scale(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION scale(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$_$;


ALTER FUNCTION public.scale(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1214 (class 1255 OID 11285822)
-- Name: se_envelopesintersect(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_envelopesintersect(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ 
	SELECT $1 && $2
	$_$;


ALTER FUNCTION public.se_envelopesintersect(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1215 (class 1255 OID 11285823)
-- Name: se_is3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_is3d(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_hasz';


ALTER FUNCTION public.se_is3d(geometry) OWNER TO postgres;

--
-- TOC entry 1216 (class 1255 OID 11285824)
-- Name: se_ismeasured(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_ismeasured(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_hasm';


ALTER FUNCTION public.se_ismeasured(geometry) OWNER TO postgres;

--
-- TOC entry 1217 (class 1255 OID 11285825)
-- Name: se_locatealong(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_locatealong(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT locate_between_measures($1, $2, $2) $_$;


ALTER FUNCTION public.se_locatealong(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1218 (class 1255 OID 11285826)
-- Name: se_locatebetween(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_locatebetween(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_locate_between_m';


ALTER FUNCTION public.se_locatebetween(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1219 (class 1255 OID 11285827)
-- Name: se_m(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_m(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_m_point';


ALTER FUNCTION public.se_m(geometry) OWNER TO postgres;

--
-- TOC entry 1220 (class 1255 OID 11285828)
-- Name: se_z(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION se_z(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_z_point';


ALTER FUNCTION public.se_z(geometry) OWNER TO postgres;

--
-- TOC entry 1221 (class 1255 OID 11285829)
-- Name: segmentize(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION segmentize(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_segmentize2d';


ALTER FUNCTION public.segmentize(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1222 (class 1255 OID 11285830)
-- Name: setfactor(chip, real); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setfactor(chip, real) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_setFactor';


ALTER FUNCTION public.setfactor(chip, real) OWNER TO postgres;

--
-- TOC entry 1223 (class 1255 OID 11285831)
-- Name: setpoint(geometry, integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setpoint(geometry, integer, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_setpoint_linestring';


ALTER FUNCTION public.setpoint(geometry, integer, geometry) OWNER TO postgres;

--
-- TOC entry 1224 (class 1255 OID 11285832)
-- Name: setsrid(chip, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setsrid(chip, integer) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_setSRID';


ALTER FUNCTION public.setsrid(chip, integer) OWNER TO postgres;

--
-- TOC entry 1225 (class 1255 OID 11285833)
-- Name: setsrid(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION setsrid(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_setSRID';


ALTER FUNCTION public.setsrid(geometry, integer) OWNER TO postgres;

--
-- TOC entry 1226 (class 1255 OID 11285834)
-- Name: shift_longitude(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION shift_longitude(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_longitude_shift';


ALTER FUNCTION public.shift_longitude(geometry) OWNER TO postgres;

--
-- TOC entry 1227 (class 1255 OID 11285835)
-- Name: simplify(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION simplify(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_simplify2d';


ALTER FUNCTION public.simplify(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1228 (class 1255 OID 11285836)
-- Name: snaptogrid(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT SnapToGrid($1, 0, 0, $2, $2)$_$;


ALTER FUNCTION public.snaptogrid(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 1229 (class 1255 OID 11285837)
-- Name: snaptogrid(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT SnapToGrid($1, 0, 0, $2, $3)$_$;


ALTER FUNCTION public.snaptogrid(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1230 (class 1255 OID 11285838)
-- Name: snaptogrid(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_snaptogrid';


ALTER FUNCTION public.snaptogrid(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1231 (class 1255 OID 11285839)
-- Name: snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_snaptogrid_pointoff';


ALTER FUNCTION public.snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1232 (class 1255 OID 11285840)
-- Name: sort(integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sort(integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'sort';


ALTER FUNCTION public.sort(integer[]) OWNER TO postgres;

--
-- TOC entry 1233 (class 1255 OID 11285841)
-- Name: sort(integer[], text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sort(integer[], text) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'sort';


ALTER FUNCTION public.sort(integer[], text) OWNER TO postgres;

--
-- TOC entry 1234 (class 1255 OID 11285845)
-- Name: sort_asc(integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sort_asc(integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'sort_asc';


ALTER FUNCTION public.sort_asc(integer[]) OWNER TO postgres;

--
-- TOC entry 1235 (class 1255 OID 11285846)
-- Name: sort_desc(integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION sort_desc(integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'sort_desc';


ALTER FUNCTION public.sort_desc(integer[]) OWNER TO postgres;

--
-- TOC entry 1236 (class 1255 OID 11285847)
-- Name: srid(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION srid(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getSRID';


ALTER FUNCTION public.srid(chip) OWNER TO postgres;

--
-- TOC entry 1237 (class 1255 OID 11285854)
-- Name: srid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION srid(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_getSRID';


ALTER FUNCTION public.srid(geometry) OWNER TO postgres;

--
-- TOC entry 1238 (class 1255 OID 11285855)
-- Name: st_addmeasure(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_addmeasure(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ST_AddMeasure';


ALTER FUNCTION public.st_addmeasure(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7029 (class 0 OID 0)
-- Dependencies: 1238
-- Name: FUNCTION st_addmeasure(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_addmeasure(geometry, double precision, double precision) IS 'args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points. If the geometry has no measure dimension, one is added. If the geometry has a measure dimension, it is over-written with new values. Only LINESTRINGS and MULTILINESTRINGS are supported.';


--
-- TOC entry 1239 (class 1255 OID 11285859)
-- Name: st_addpoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_addpoint(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.st_addpoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7030 (class 0 OID 0)
-- Dependencies: 1239
-- Name: FUNCTION st_addpoint(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_addpoint(geometry, geometry) IS 'args: linestring, point - Adds a point to a LineString before point <position> (0-based index).';


--
-- TOC entry 1240 (class 1255 OID 11285860)
-- Name: st_addpoint(geometry, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_addpoint(geometry, geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_addpoint';


ALTER FUNCTION public.st_addpoint(geometry, geometry, integer) OWNER TO postgres;

--
-- TOC entry 7031 (class 0 OID 0)
-- Dependencies: 1240
-- Name: FUNCTION st_addpoint(geometry, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_addpoint(geometry, geometry, integer) IS 'args: linestring, point, position - Adds a point to a LineString before point <position> (0-based index).';


--
-- TOC entry 1241 (class 1255 OID 11285861)
-- Name: st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$_$;


ALTER FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7032 (class 0 OID 0)
-- Dependencies: 1241
-- Name: FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) IS 'args: geomA, a, b, d, e, xoff, yoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';


--
-- TOC entry 1242 (class 1255 OID 11285862)
-- Name: st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_affine';


ALTER FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7033 (class 0 OID 0)
-- Dependencies: 1242
-- Name: FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) IS 'args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.';


--
-- TOC entry 1243 (class 1255 OID 11285863)
-- Name: st_area(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(geography) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_Area($1, true)$_$;


ALTER FUNCTION public.st_area(geography) OWNER TO postgres;

--
-- TOC entry 7034 (class 0 OID 0)
-- Dependencies: 1243
-- Name: FUNCTION st_area(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_area(geography) IS 'args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';


--
-- TOC entry 1244 (class 1255 OID 11285864)
-- Name: st_area(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.st_area(geometry) OWNER TO postgres;

--
-- TOC entry 7035 (class 0 OID 0)
-- Dependencies: 1244
-- Name: FUNCTION st_area(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_area(geometry) IS 'args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';


--
-- TOC entry 1245 (class 1255 OID 11285865)
-- Name: st_area(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Area($1::geometry);  $_$;


ALTER FUNCTION public.st_area(text) OWNER TO postgres;

--
-- TOC entry 1246 (class 1255 OID 11285866)
-- Name: st_area(geography, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area(geography, boolean) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'geography_area';


ALTER FUNCTION public.st_area(geography, boolean) OWNER TO postgres;

--
-- TOC entry 7036 (class 0 OID 0)
-- Dependencies: 1246
-- Name: FUNCTION st_area(geography, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_area(geography, boolean) IS 'args: g1, use_spheroid - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.';


--
-- TOC entry 1247 (class 1255 OID 11285867)
-- Name: st_area2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_area2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_area_polygon';


ALTER FUNCTION public.st_area2d(geometry) OWNER TO postgres;

--
-- TOC entry 1248 (class 1255 OID 11285868)
-- Name: st_asbinary(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(geography) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_as_binary';


ALTER FUNCTION public.st_asbinary(geography) OWNER TO postgres;

--
-- TOC entry 7037 (class 0 OID 0)
-- Dependencies: 1248
-- Name: FUNCTION st_asbinary(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asbinary(geography) IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';


--
-- TOC entry 1249 (class 1255 OID 11285869)
-- Name: st_asbinary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.st_asbinary(geometry) OWNER TO postgres;

--
-- TOC entry 7038 (class 0 OID 0)
-- Dependencies: 1249
-- Name: FUNCTION st_asbinary(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asbinary(geometry) IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';


--
-- TOC entry 1250 (class 1255 OID 11285874)
-- Name: st_asbinary(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(text) RETURNS bytea
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsBinary($1::geometry);  $_$;


ALTER FUNCTION public.st_asbinary(text) OWNER TO postgres;

--
-- TOC entry 1251 (class 1255 OID 11285875)
-- Name: st_asbinary(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asbinary(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asBinary';


ALTER FUNCTION public.st_asbinary(geometry, text) OWNER TO postgres;

--
-- TOC entry 7039 (class 0 OID 0)
-- Dependencies: 1251
-- Name: FUNCTION st_asbinary(geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asbinary(geometry, text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.';


--
-- TOC entry 1252 (class 1255 OID 11285876)
-- Name: st_asewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asewkb(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.st_asewkb(geometry) OWNER TO postgres;

--
-- TOC entry 7040 (class 0 OID 0)
-- Dependencies: 1252
-- Name: FUNCTION st_asewkb(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asewkb(geometry) IS 'args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';


--
-- TOC entry 1253 (class 1255 OID 11285877)
-- Name: st_asewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asewkb(geometry, text) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'WKBFromLWGEOM';


ALTER FUNCTION public.st_asewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 7041 (class 0 OID 0)
-- Dependencies: 1253
-- Name: FUNCTION st_asewkb(geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asewkb(geometry, text) IS 'args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.';


--
-- TOC entry 1254 (class 1255 OID 11285878)
-- Name: st_asewkt(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asewkt(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asEWKT';


ALTER FUNCTION public.st_asewkt(geometry) OWNER TO postgres;

--
-- TOC entry 7042 (class 0 OID 0)
-- Dependencies: 1254
-- Name: FUNCTION st_asewkt(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asewkt(geometry) IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.';


--
-- TOC entry 1255 (class 1255 OID 11285879)
-- Name: st_asgeojson(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geography) OWNER TO postgres;

--
-- TOC entry 7043 (class 0 OID 0)
-- Dependencies: 1255
-- Name: FUNCTION st_asgeojson(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geography) IS 'args: g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1256 (class 1255 OID 11285880)
-- Name: st_asgeojson(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geometry) OWNER TO postgres;

--
-- TOC entry 7044 (class 0 OID 0)
-- Dependencies: 1256
-- Name: FUNCTION st_asgeojson(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geometry) IS 'args: g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1257 (class 1255 OID 11285881)
-- Name: st_asgeojson(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsGeoJson($1::geometry);  $_$;


ALTER FUNCTION public.st_asgeojson(text) OWNER TO postgres;

--
-- TOC entry 1258 (class 1255 OID 11285882)
-- Name: st_asgeojson(integer, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geography) OWNER TO postgres;

--
-- TOC entry 7045 (class 0 OID 0)
-- Dependencies: 1258
-- Name: FUNCTION st_asgeojson(integer, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geography) IS 'args: version, g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1259 (class 1255 OID 11285883)
-- Name: st_asgeojson(integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, 15, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geometry) OWNER TO postgres;

--
-- TOC entry 7046 (class 0 OID 0)
-- Dependencies: 1259
-- Name: FUNCTION st_asgeojson(integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geometry) IS 'args: version, g1 - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1260 (class 1255 OID 11285884)
-- Name: st_asgeojson(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geography, integer) OWNER TO postgres;

--
-- TOC entry 7047 (class 0 OID 0)
-- Dependencies: 1260
-- Name: FUNCTION st_asgeojson(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geography, integer) IS 'args: g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1261 (class 1255 OID 11285885)
-- Name: st_asgeojson(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, 0)$_$;


ALTER FUNCTION public.st_asgeojson(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7048 (class 0 OID 0)
-- Dependencies: 1261
-- Name: FUNCTION st_asgeojson(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geometry, integer) IS 'args: g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1262 (class 1255 OID 11285886)
-- Name: st_asgeojson(integer, geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geography, integer) OWNER TO postgres;

--
-- TOC entry 7049 (class 0 OID 0)
-- Dependencies: 1262
-- Name: FUNCTION st_asgeojson(integer, geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geography, integer) IS 'args: version, g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1263 (class 1255 OID 11285887)
-- Name: st_asgeojson(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 7050 (class 0 OID 0)
-- Dependencies: 1263
-- Name: FUNCTION st_asgeojson(integer, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geometry, integer) IS 'args: version, g1, max_decimal_digits - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1264 (class 1255 OID 11285888)
-- Name: st_asgeojson(geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, $3)$_$;


ALTER FUNCTION public.st_asgeojson(geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 7051 (class 0 OID 0)
-- Dependencies: 1264
-- Name: FUNCTION st_asgeojson(geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geography, integer, integer) IS 'args: g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1265 (class 1255 OID 11285889)
-- Name: st_asgeojson(geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson(1, $1, $2, $3)$_$;


ALTER FUNCTION public.st_asgeojson(geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 7052 (class 0 OID 0)
-- Dependencies: 1265
-- Name: FUNCTION st_asgeojson(geometry, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(geometry, integer, integer) IS 'args: g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1266 (class 1255 OID 11285890)
-- Name: st_asgeojson(integer, geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 7053 (class 0 OID 0)
-- Dependencies: 1266
-- Name: FUNCTION st_asgeojson(integer, geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geography, integer, integer) IS 'args: version, g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1267 (class 1255 OID 11285891)
-- Name: st_asgeojson(integer, geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgeojson(integer, geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGeoJson($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_asgeojson(integer, geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 7054 (class 0 OID 0)
-- Dependencies: 1267
-- Name: FUNCTION st_asgeojson(integer, geometry, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgeojson(integer, geometry, integer, integer) IS 'args: version, g1, max_decimal_digits, options - Return the geometry as a GeoJSON element.';


--
-- TOC entry 1268 (class 1255 OID 11285892)
-- Name: st_asgml(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geography) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT _ST_AsGML(2, $1, 15, 0, null)$_$;


ALTER FUNCTION public.st_asgml(geography) OWNER TO postgres;

--
-- TOC entry 7055 (class 0 OID 0)
-- Dependencies: 1268
-- Name: FUNCTION st_asgml(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geography) IS 'args: g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1269 (class 1255 OID 11285893)
-- Name: st_asgml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, 15, 0, null)$_$;


ALTER FUNCTION public.st_asgml(geometry) OWNER TO postgres;

--
-- TOC entry 7056 (class 0 OID 0)
-- Dependencies: 1269
-- Name: FUNCTION st_asgml(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geometry) IS 'args: g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1270 (class 1255 OID 11285894)
-- Name: st_asgml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsGML($1::geometry);  $_$;


ALTER FUNCTION public.st_asgml(text) OWNER TO postgres;

--
-- TOC entry 1271 (class 1255 OID 11285895)
-- Name: st_asgml(integer, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, 15, 0, null)$_$;


ALTER FUNCTION public.st_asgml(integer, geography) OWNER TO postgres;

--
-- TOC entry 7057 (class 0 OID 0)
-- Dependencies: 1271
-- Name: FUNCTION st_asgml(integer, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geography) IS 'args: version, g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1272 (class 1255 OID 11285896)
-- Name: st_asgml(integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, 15, 0, null)$_$;


ALTER FUNCTION public.st_asgml(integer, geometry) OWNER TO postgres;

--
-- TOC entry 7058 (class 0 OID 0)
-- Dependencies: 1272
-- Name: FUNCTION st_asgml(integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geometry) IS 'args: version, g1 - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1273 (class 1255 OID 11285897)
-- Name: st_asgml(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, 0, null)$_$;


ALTER FUNCTION public.st_asgml(geography, integer) OWNER TO postgres;

--
-- TOC entry 7059 (class 0 OID 0)
-- Dependencies: 1273
-- Name: FUNCTION st_asgml(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geography, integer) IS 'args: g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1274 (class 1255 OID 11285898)
-- Name: st_asgml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, 0, null)$_$;


ALTER FUNCTION public.st_asgml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7060 (class 0 OID 0)
-- Dependencies: 1274
-- Name: FUNCTION st_asgml(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(geometry, integer) IS 'args: g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1275 (class 1255 OID 11285899)
-- Name: st_asgml(integer, geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, 0, null)$_$;


ALTER FUNCTION public.st_asgml(integer, geography, integer) OWNER TO postgres;

--
-- TOC entry 7061 (class 0 OID 0)
-- Dependencies: 1275
-- Name: FUNCTION st_asgml(integer, geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geography, integer) IS 'args: version, g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1276 (class 1255 OID 11285900)
-- Name: st_asgml(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, 0, null)$_$;


ALTER FUNCTION public.st_asgml(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 7062 (class 0 OID 0)
-- Dependencies: 1276
-- Name: FUNCTION st_asgml(integer, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geometry, integer) IS 'args: version, g1, precision - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1277 (class 1255 OID 11285901)
-- Name: st_asgml(geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, $3, null)$_$;


ALTER FUNCTION public.st_asgml(geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 1278 (class 1255 OID 11285902)
-- Name: st_asgml(geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML(2, $1, $2, $3, null)$_$;


ALTER FUNCTION public.st_asgml(geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 1279 (class 1255 OID 11285903)
-- Name: st_asgml(integer, geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geography, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, $4, null)$_$;


ALTER FUNCTION public.st_asgml(integer, geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 7063 (class 0 OID 0)
-- Dependencies: 1279
-- Name: FUNCTION st_asgml(integer, geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geography, integer, integer) IS 'args: version, g1, precision, options - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1280 (class 1255 OID 11285904)
-- Name: st_asgml(integer, geometry, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geometry, integer, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, $4, null)$_$;


ALTER FUNCTION public.st_asgml(integer, geometry, integer, integer) OWNER TO postgres;

--
-- TOC entry 7064 (class 0 OID 0)
-- Dependencies: 1280
-- Name: FUNCTION st_asgml(integer, geometry, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_asgml(integer, geometry, integer, integer) IS 'args: version, g1, precision, options - Return the geometry as a GML version 2 or 3 element.';


--
-- TOC entry 1281 (class 1255 OID 11285905)
-- Name: st_asgml(integer, geography, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geography, integer, integer, text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, $4, $5)$_$;


ALTER FUNCTION public.st_asgml(integer, geography, integer, integer, text) OWNER TO postgres;

--
-- TOC entry 1282 (class 1255 OID 11285909)
-- Name: st_asgml(integer, geometry, integer, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_asgml(integer, geometry, integer, integer, text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsGML($1, $2, $3, $4, $5)$_$;


ALTER FUNCTION public.st_asgml(integer, geometry, integer, integer, text) OWNER TO postgres;

--
-- TOC entry 1283 (class 1255 OID 11285910)
-- Name: st_ashexewkb(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ashexewkb(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.st_ashexewkb(geometry) OWNER TO postgres;

--
-- TOC entry 7065 (class 0 OID 0)
-- Dependencies: 1283
-- Name: FUNCTION st_ashexewkb(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ashexewkb(geometry) IS 'args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';


--
-- TOC entry 1284 (class 1255 OID 11285911)
-- Name: st_ashexewkb(geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ashexewkb(geometry, text) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asHEXEWKB';


ALTER FUNCTION public.st_ashexewkb(geometry, text) OWNER TO postgres;

--
-- TOC entry 7066 (class 0 OID 0)
-- Dependencies: 1284
-- Name: FUNCTION st_ashexewkb(geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ashexewkb(geometry, text) IS 'args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.';


--
-- TOC entry 1285 (class 1255 OID 11285915)
-- Name: st_askml(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, $1, 15, null)$_$;


ALTER FUNCTION public.st_askml(geography) OWNER TO postgres;

--
-- TOC entry 7067 (class 0 OID 0)
-- Dependencies: 1285
-- Name: FUNCTION st_askml(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geography) IS 'args: g1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1286 (class 1255 OID 11285919)
-- Name: st_askml(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, ST_Transform($1,4326), 15, null)$_$;


ALTER FUNCTION public.st_askml(geometry) OWNER TO postgres;

--
-- TOC entry 7068 (class 0 OID 0)
-- Dependencies: 1286
-- Name: FUNCTION st_askml(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geometry) IS 'args: g1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1287 (class 1255 OID 11285927)
-- Name: st_askml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsKML($1::geometry);  $_$;


ALTER FUNCTION public.st_askml(text) OWNER TO postgres;

--
-- TOC entry 1288 (class 1255 OID 11285931)
-- Name: st_askml(integer, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geography) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, $2, 15, null)$_$;


ALTER FUNCTION public.st_askml(integer, geography) OWNER TO postgres;

--
-- TOC entry 7069 (class 0 OID 0)
-- Dependencies: 1288
-- Name: FUNCTION st_askml(integer, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geography) IS 'args: version, geom1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1289 (class 1255 OID 11285932)
-- Name: st_askml(integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, ST_Transform($2,4326), 15, null)$_$;


ALTER FUNCTION public.st_askml(integer, geometry) OWNER TO postgres;

--
-- TOC entry 7070 (class 0 OID 0)
-- Dependencies: 1289
-- Name: FUNCTION st_askml(integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geometry) IS 'args: version, geom1 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1290 (class 1255 OID 11285934)
-- Name: st_askml(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, $1, $2, null)$_$;


ALTER FUNCTION public.st_askml(geography, integer) OWNER TO postgres;

--
-- TOC entry 7071 (class 0 OID 0)
-- Dependencies: 1290
-- Name: FUNCTION st_askml(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geography, integer) IS 'args: g1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1291 (class 1255 OID 11285935)
-- Name: st_askml(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML(2, ST_Transform($1,4326), $2, null)$_$;


ALTER FUNCTION public.st_askml(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7072 (class 0 OID 0)
-- Dependencies: 1291
-- Name: FUNCTION st_askml(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(geometry, integer) IS 'args: g1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1292 (class 1255 OID 11285938)
-- Name: st_askml(integer, geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geography, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, $2, $3, null)$_$;


ALTER FUNCTION public.st_askml(integer, geography, integer) OWNER TO postgres;

--
-- TOC entry 7073 (class 0 OID 0)
-- Dependencies: 1292
-- Name: FUNCTION st_askml(integer, geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geography, integer) IS 'args: version, geom1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1293 (class 1255 OID 11285963)
-- Name: st_askml(integer, geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geometry, integer) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, ST_Transform($2,4326), $3, null)$_$;


ALTER FUNCTION public.st_askml(integer, geometry, integer) OWNER TO postgres;

--
-- TOC entry 7074 (class 0 OID 0)
-- Dependencies: 1293
-- Name: FUNCTION st_askml(integer, geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_askml(integer, geometry, integer) IS 'args: version, geom1, precision - Return the geometry as a KML element. Several variants. Default version=2, default precision=15';


--
-- TOC entry 1294 (class 1255 OID 11285976)
-- Name: st_askml(integer, geography, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geography, integer, text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_askml(integer, geography, integer, text) OWNER TO postgres;

--
-- TOC entry 1295 (class 1255 OID 11285980)
-- Name: st_askml(integer, geometry, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_askml(integer, geometry, integer, text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_AsKML($1, ST_Transform($2,4326), $3, $4)$_$;


ALTER FUNCTION public.st_askml(integer, geometry, integer, text) OWNER TO postgres;

--
-- TOC entry 1296 (class 1255 OID 11285985)
-- Name: st_aslatlontext(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_aslatlontext(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsLatLonText($1, '') $_$;


ALTER FUNCTION public.st_aslatlontext(geometry) OWNER TO postgres;

--
-- TOC entry 1297 (class 1255 OID 11285990)
-- Name: st_assvg(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geography) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_as_svg';


ALTER FUNCTION public.st_assvg(geography) OWNER TO postgres;

--
-- TOC entry 7075 (class 0 OID 0)
-- Dependencies: 1297
-- Name: FUNCTION st_assvg(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geography) IS 'args: g1 - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 1298 (class 1255 OID 11285991)
-- Name: st_assvg(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsSVG($1::geometry);  $_$;


ALTER FUNCTION public.st_assvg(text) OWNER TO postgres;

--
-- TOC entry 1299 (class 1255 OID 11285992)
-- Name: st_assvg(geography, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geography, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_as_svg';


ALTER FUNCTION public.st_assvg(geography, integer) OWNER TO postgres;

--
-- TOC entry 7076 (class 0 OID 0)
-- Dependencies: 1299
-- Name: FUNCTION st_assvg(geography, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geography, integer) IS 'args: g1, rel - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 1300 (class 1255 OID 11285993)
-- Name: st_assvg(geography, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_assvg(geography, integer, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_as_svg';


ALTER FUNCTION public.st_assvg(geography, integer, integer) OWNER TO postgres;

--
-- TOC entry 7077 (class 0 OID 0)
-- Dependencies: 1300
-- Name: FUNCTION st_assvg(geography, integer, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_assvg(geography, integer, integer) IS 'args: g1, rel, maxdecimaldigits - Returns a Geometry in SVG path data given a geometry or geography object.';


--
-- TOC entry 1301 (class 1255 OID 11285994)
-- Name: st_astext(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_astext(geography) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_as_text';


ALTER FUNCTION public.st_astext(geography) OWNER TO postgres;

--
-- TOC entry 7078 (class 0 OID 0)
-- Dependencies: 1301
-- Name: FUNCTION st_astext(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_astext(geography) IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';


--
-- TOC entry 1302 (class 1255 OID 11285995)
-- Name: st_astext(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_astext(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_asText';


ALTER FUNCTION public.st_astext(geometry) OWNER TO postgres;

--
-- TOC entry 7079 (class 0 OID 0)
-- Dependencies: 1302
-- Name: FUNCTION st_astext(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_astext(geometry) IS 'args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.';


--
-- TOC entry 1303 (class 1255 OID 11285996)
-- Name: st_astext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_astext(text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_AsText($1::geometry);  $_$;


ALTER FUNCTION public.st_astext(text) OWNER TO postgres;

--
-- TOC entry 1304 (class 1255 OID 11285997)
-- Name: st_azimuth(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_azimuth(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_azimuth';


ALTER FUNCTION public.st_azimuth(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7080 (class 0 OID 0)
-- Dependencies: 1304
-- Name: FUNCTION st_azimuth(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_azimuth(geometry, geometry) IS 'args: pointA, pointB - Returns the angle in radians from the horizontal of the vector defined by pointA and pointB';


--
-- TOC entry 1305 (class 1255 OID 11285998)
-- Name: st_bdmpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_bdmpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := multi(ST_BuildArea(mline));

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.st_bdmpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7081 (class 0 OID 0)
-- Dependencies: 1305
-- Name: FUNCTION st_bdmpolyfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_bdmpolyfromtext(text, integer) IS 'args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.';


--
-- TOC entry 1306 (class 1255 OID 11286000)
-- Name: st_bdpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_bdpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;

	geom := ST_BuildArea(mline);

	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;

	RETURN geom;
END;
$_$;


ALTER FUNCTION public.st_bdpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7082 (class 0 OID 0)
-- Dependencies: 1306
-- Name: FUNCTION st_bdpolyfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_bdpolyfromtext(text, integer) IS 'args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.';


--
-- TOC entry 1307 (class 1255 OID 11286001)
-- Name: st_boundary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_boundary(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'boundary';


ALTER FUNCTION public.st_boundary(geometry) OWNER TO postgres;

--
-- TOC entry 7083 (class 0 OID 0)
-- Dependencies: 1307
-- Name: FUNCTION st_boundary(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_boundary(geometry) IS 'args: geomA - Returns the closure of the combinatorial boundary of this Geometry.';


--
-- TOC entry 1308 (class 1255 OID 11286002)
-- Name: st_box(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box(box3d) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_BOX';


ALTER FUNCTION public.st_box(box3d) OWNER TO postgres;

--
-- TOC entry 1309 (class 1255 OID 11286003)
-- Name: st_box(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box(geometry) RETURNS box
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX';


ALTER FUNCTION public.st_box(geometry) OWNER TO postgres;

--
-- TOC entry 1310 (class 1255 OID 11286004)
-- Name: st_box2d(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d(box3d) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.st_box2d(box3d) OWNER TO postgres;

--
-- TOC entry 1311 (class 1255 OID 11286005)
-- Name: st_box2d(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d(box3d_extent) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_BOX2DFLOAT4';


ALTER FUNCTION public.st_box2d(box3d_extent) OWNER TO postgres;

--
-- TOC entry 1312 (class 1255 OID 11286006)
-- Name: st_box2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d(geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX2DFLOAT4';


ALTER FUNCTION public.st_box2d(geometry) OWNER TO postgres;

--
-- TOC entry 1313 (class 1255 OID 11286007)
-- Name: st_box2d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d_in(cstring) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_in';


ALTER FUNCTION public.st_box2d_in(cstring) OWNER TO postgres;

--
-- TOC entry 1314 (class 1255 OID 11286011)
-- Name: st_box2d_out(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box2d_out(box2d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_out';


ALTER FUNCTION public.st_box2d_out(box2d) OWNER TO postgres;

--
-- TOC entry 1315 (class 1255 OID 11286012)
-- Name: st_box3d(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d(box2d) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_to_BOX3D';


ALTER FUNCTION public.st_box3d(box2d) OWNER TO postgres;

--
-- TOC entry 1316 (class 1255 OID 11286013)
-- Name: st_box3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d(geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_BOX3D';


ALTER FUNCTION public.st_box3d(geometry) OWNER TO postgres;

--
-- TOC entry 1317 (class 1255 OID 11286014)
-- Name: st_box3d_extent(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d_extent(box3d_extent) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_extent_to_BOX3D';


ALTER FUNCTION public.st_box3d_extent(box3d_extent) OWNER TO postgres;

--
-- TOC entry 1318 (class 1255 OID 11286015)
-- Name: st_box3d_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d_in(cstring) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_in';


ALTER FUNCTION public.st_box3d_in(cstring) OWNER TO postgres;

--
-- TOC entry 1319 (class 1255 OID 11286016)
-- Name: st_box3d_out(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_box3d_out(box3d) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_out';


ALTER FUNCTION public.st_box3d_out(box3d) OWNER TO postgres;

--
-- TOC entry 1320 (class 1255 OID 11286017)
-- Name: st_buffer(geography, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geography, double precision) RETURNS geography
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), _ST_BestSRID($1)), $2), 4326))$_$;


ALTER FUNCTION public.st_buffer(geography, double precision) OWNER TO postgres;

--
-- TOC entry 7084 (class 0 OID 0)
-- Dependencies: 1320
-- Name: FUNCTION st_buffer(geography, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geography, double precision) IS 'args: g1, radius_of_buffer_in_meters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 1321 (class 1255 OID 11286018)
-- Name: st_buffer(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'buffer';


ALTER FUNCTION public.st_buffer(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7085 (class 0 OID 0)
-- Dependencies: 1321
-- Name: FUNCTION st_buffer(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geometry, double precision) IS 'args: g1, radius_of_buffer - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 1322 (class 1255 OID 11286019)
-- Name: st_buffer(text, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(text, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Buffer($1::geometry, $2);  $_$;


ALTER FUNCTION public.st_buffer(text, double precision) OWNER TO postgres;

--
-- TOC entry 1323 (class 1255 OID 11286020)
-- Name: st_buffer(geometry, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geometry, double precision, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT _ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $_$;


ALTER FUNCTION public.st_buffer(geometry, double precision, integer) OWNER TO postgres;

--
-- TOC entry 7086 (class 0 OID 0)
-- Dependencies: 1323
-- Name: FUNCTION st_buffer(geometry, double precision, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geometry, double precision, integer) IS 'args: g1, radius_of_buffer, num_seg_quarter_circle - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 1324 (class 1255 OID 11286021)
-- Name: st_buffer(geometry, double precision, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buffer(geometry, double precision, text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT _ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $_$;


ALTER FUNCTION public.st_buffer(geometry, double precision, text) OWNER TO postgres;

--
-- TOC entry 7087 (class 0 OID 0)
-- Dependencies: 1324
-- Name: FUNCTION st_buffer(geometry, double precision, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buffer(geometry, double precision, text) IS 'args: g1, radius_of_buffer, buffer_style_parameters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#';


--
-- TOC entry 1325 (class 1255 OID 11286025)
-- Name: st_buildarea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_buildarea(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_buildarea';


ALTER FUNCTION public.st_buildarea(geometry) OWNER TO postgres;

--
-- TOC entry 7088 (class 0 OID 0)
-- Dependencies: 1325
-- Name: FUNCTION st_buildarea(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_buildarea(geometry) IS 'args: A - Creates an areal geometry formed by the constituent linework of given geometry';


--
-- TOC entry 1326 (class 1255 OID 11286029)
-- Name: st_bytea(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_bytea(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_bytea';


ALTER FUNCTION public.st_bytea(geometry) OWNER TO postgres;

--
-- TOC entry 1327 (class 1255 OID 11286033)
-- Name: st_centroid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_centroid(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'centroid';


ALTER FUNCTION public.st_centroid(geometry) OWNER TO postgres;

--
-- TOC entry 7089 (class 0 OID 0)
-- Dependencies: 1327
-- Name: FUNCTION st_centroid(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_centroid(geometry) IS 'args: g1 - Returns the geometric center of a geometry.';


--
-- TOC entry 1328 (class 1255 OID 11286037)
-- Name: st_chip_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_chip_in(cstring) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_in';


ALTER FUNCTION public.st_chip_in(cstring) OWNER TO postgres;

--
-- TOC entry 1329 (class 1255 OID 11286038)
-- Name: st_chip_out(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_chip_out(chip) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_out';


ALTER FUNCTION public.st_chip_out(chip) OWNER TO postgres;

--
-- TOC entry 1330 (class 1255 OID 11286039)
-- Name: st_closestpoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_closestpoint(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_closestpoint';


ALTER FUNCTION public.st_closestpoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7090 (class 0 OID 0)
-- Dependencies: 1330
-- Name: FUNCTION st_closestpoint(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_closestpoint(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.';


--
-- TOC entry 1331 (class 1255 OID 11286040)
-- Name: st_collect(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_collect(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_collect_garray';


ALTER FUNCTION public.st_collect(geometry[]) OWNER TO postgres;

--
-- TOC entry 7091 (class 0 OID 0)
-- Dependencies: 1331
-- Name: FUNCTION st_collect(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_collect(geometry[]) IS 'args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.';


--
-- TOC entry 1332 (class 1255 OID 11286041)
-- Name: st_collect(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_collect(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'LWGEOM_collect';


ALTER FUNCTION public.st_collect(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7092 (class 0 OID 0)
-- Dependencies: 1332
-- Name: FUNCTION st_collect(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_collect(geometry, geometry) IS 'args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.';


--
-- TOC entry 1333 (class 1255 OID 11286042)
-- Name: st_collectionextract(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_collectionextract(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ST_CollectionExtract';


ALTER FUNCTION public.st_collectionextract(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7093 (class 0 OID 0)
-- Dependencies: 1333
-- Name: FUNCTION st_collectionextract(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_collectionextract(geometry, integer) IS 'args: collection, type - Given a GEOMETRYCOLLECTION, returns a MULTI* geometry consisting only of the specified type. Sub-geometries that are not the specified type are ignored. If there are no sub-geometries of the right type, an EMPTY collection will be returned. Only points, lines and polygons are supported. Type numbers are 1 == POINT, 2 == LINESTRING, 3 == POLYGON.';


--
-- TOC entry 1334 (class 1255 OID 11286043)
-- Name: st_combine_bbox(box2d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_combine_bbox(box2d, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_combine';


ALTER FUNCTION public.st_combine_bbox(box2d, geometry) OWNER TO postgres;

--
-- TOC entry 1335 (class 1255 OID 11286044)
-- Name: st_combine_bbox(box3d, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_combine_bbox(box3d, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.st_combine_bbox(box3d, geometry) OWNER TO postgres;

--
-- TOC entry 1336 (class 1255 OID 11286045)
-- Name: st_combine_bbox(box3d_extent, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_combine_bbox(box3d_extent, geometry) RETURNS box3d_extent
    LANGUAGE c IMMUTABLE
    AS '$libdir/postgis-1.5', 'BOX3D_combine';


ALTER FUNCTION public.st_combine_bbox(box3d_extent, geometry) OWNER TO postgres;

--
-- TOC entry 1337 (class 1255 OID 11286046)
-- Name: st_compression(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_compression(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getCompression';


ALTER FUNCTION public.st_compression(chip) OWNER TO postgres;

--
-- TOC entry 1338 (class 1255 OID 11286047)
-- Name: st_contains(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_contains(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Contains($1,$2)$_$;


ALTER FUNCTION public.st_contains(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7094 (class 0 OID 0)
-- Dependencies: 1338
-- Name: FUNCTION st_contains(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_contains(geometry, geometry) IS 'args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.';


--
-- TOC entry 1339 (class 1255 OID 11286048)
-- Name: st_containsproperly(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_containsproperly(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_ContainsProperly($1,$2)$_$;


ALTER FUNCTION public.st_containsproperly(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7095 (class 0 OID 0)
-- Dependencies: 1339
-- Name: FUNCTION st_containsproperly(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_containsproperly(geometry, geometry) IS 'args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.';


--
-- TOC entry 1340 (class 1255 OID 11286049)
-- Name: st_convexhull(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_convexhull(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'convexhull';


ALTER FUNCTION public.st_convexhull(geometry) OWNER TO postgres;

--
-- TOC entry 7096 (class 0 OID 0)
-- Dependencies: 1340
-- Name: FUNCTION st_convexhull(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_convexhull(geometry) IS 'args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.';


--
-- TOC entry 1341 (class 1255 OID 11286050)
-- Name: st_coorddim(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coorddim(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_ndims';


ALTER FUNCTION public.st_coorddim(geometry) OWNER TO postgres;

--
-- TOC entry 7097 (class 0 OID 0)
-- Dependencies: 1341
-- Name: FUNCTION st_coorddim(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_coorddim(geometry) IS 'args: geomA - Return the coordinate dimension of the ST_Geometry value.';


--
-- TOC entry 1342 (class 1255 OID 11286051)
-- Name: st_coveredby(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coveredby(geography, geography) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Covers($2, $1)$_$;


ALTER FUNCTION public.st_coveredby(geography, geography) OWNER TO postgres;

--
-- TOC entry 7098 (class 0 OID 0)
-- Dependencies: 1342
-- Name: FUNCTION st_coveredby(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_coveredby(geography, geography) IS 'args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';


--
-- TOC entry 1343 (class 1255 OID 11286052)
-- Name: st_coveredby(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coveredby(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_CoveredBy($1,$2)$_$;


ALTER FUNCTION public.st_coveredby(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7099 (class 0 OID 0)
-- Dependencies: 1343
-- Name: FUNCTION st_coveredby(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_coveredby(geometry, geometry) IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B';


--
-- TOC entry 1344 (class 1255 OID 11286053)
-- Name: st_coveredby(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_coveredby(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_coveredby(text, text) OWNER TO postgres;

--
-- TOC entry 1345 (class 1255 OID 11286054)
-- Name: st_covers(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_covers(geography, geography) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Covers($1, $2)$_$;


ALTER FUNCTION public.st_covers(geography, geography) OWNER TO postgres;

--
-- TOC entry 7100 (class 0 OID 0)
-- Dependencies: 1345
-- Name: FUNCTION st_covers(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_covers(geography, geography) IS 'args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A. For geography: if geography point B is not outside Polygon Geography A';


--
-- TOC entry 1346 (class 1255 OID 11286055)
-- Name: st_covers(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_covers(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Covers($1,$2)$_$;


ALTER FUNCTION public.st_covers(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7101 (class 0 OID 0)
-- Dependencies: 1346
-- Name: FUNCTION st_covers(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_covers(geometry, geometry) IS 'args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A. For geography: if geography point B is not outside Polygon Geography A';


--
-- TOC entry 1347 (class 1255 OID 11286056)
-- Name: st_covers(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_covers(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_Covers($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_covers(text, text) OWNER TO postgres;

--
-- TOC entry 1348 (class 1255 OID 11286057)
-- Name: st_crosses(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_crosses(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Crosses($1,$2)$_$;


ALTER FUNCTION public.st_crosses(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7102 (class 0 OID 0)
-- Dependencies: 1348
-- Name: FUNCTION st_crosses(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_crosses(geometry, geometry) IS 'args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.';


--
-- TOC entry 1349 (class 1255 OID 11286058)
-- Name: st_curvetoline(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_curvetoline(geometry) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_CurveToLine($1, 32)$_$;


ALTER FUNCTION public.st_curvetoline(geometry) OWNER TO postgres;

--
-- TOC entry 7103 (class 0 OID 0)
-- Dependencies: 1349
-- Name: FUNCTION st_curvetoline(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_curvetoline(geometry) IS 'args: curveGeom - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';


--
-- TOC entry 1350 (class 1255 OID 11286059)
-- Name: st_curvetoline(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_curvetoline(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_curve_segmentize';


ALTER FUNCTION public.st_curvetoline(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7104 (class 0 OID 0)
-- Dependencies: 1350
-- Name: FUNCTION st_curvetoline(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_curvetoline(geometry, integer) IS 'args: curveGeom, segments_per_qtr_circle - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON';


--
-- TOC entry 1351 (class 1255 OID 11286060)
-- Name: st_datatype(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_datatype(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getDatatype';


ALTER FUNCTION public.st_datatype(chip) OWNER TO postgres;

--
-- TOC entry 1352 (class 1255 OID 11286061)
-- Name: st_dfullywithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dfullywithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DFullyWithin(ST_ConvexHull($1), ST_ConvexHull($2), $3)$_$;


ALTER FUNCTION public.st_dfullywithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7105 (class 0 OID 0)
-- Dependencies: 1352
-- Name: FUNCTION st_dfullywithin(geometry, geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dfullywithin(geometry, geometry, double precision) IS 'args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another';


--
-- TOC entry 1353 (class 1255 OID 11286062)
-- Name: st_difference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_difference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'difference';


ALTER FUNCTION public.st_difference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7106 (class 0 OID 0)
-- Dependencies: 1353
-- Name: FUNCTION st_difference(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_difference(geometry, geometry) IS 'args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.';


--
-- TOC entry 1354 (class 1255 OID 11286063)
-- Name: st_dimension(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dimension(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dimension';


ALTER FUNCTION public.st_dimension(geometry) OWNER TO postgres;

--
-- TOC entry 7107 (class 0 OID 0)
-- Dependencies: 1354
-- Name: FUNCTION st_dimension(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dimension(geometry) IS 'args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.';


--
-- TOC entry 1355 (class 1255 OID 11286064)
-- Name: st_disjoint(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_disjoint(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'disjoint';


ALTER FUNCTION public.st_disjoint(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7108 (class 0 OID 0)
-- Dependencies: 1355
-- Name: FUNCTION st_disjoint(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_disjoint(geometry, geometry) IS 'args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.';


--
-- TOC entry 1356 (class 1255 OID 11286065)
-- Name: st_distance(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(geography, geography) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_Distance($1, $2, 0.0, true)$_$;


ALTER FUNCTION public.st_distance(geography, geography) OWNER TO postgres;

--
-- TOC entry 7109 (class 0 OID 0)
-- Dependencies: 1356
-- Name: FUNCTION st_distance(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance(geography, geography) IS 'args: gg1, gg2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';


--
-- TOC entry 1357 (class 1255 OID 11286066)
-- Name: st_distance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_mindistance2d';


ALTER FUNCTION public.st_distance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7110 (class 0 OID 0)
-- Dependencies: 1357
-- Name: FUNCTION st_distance(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance(geometry, geometry) IS 'args: g1, g2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';


--
-- TOC entry 1358 (class 1255 OID 11286067)
-- Name: st_distance(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(text, text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Distance($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_distance(text, text) OWNER TO postgres;

--
-- TOC entry 1359 (class 1255 OID 11286068)
-- Name: st_distance(geography, geography, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance(geography, geography, boolean) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_Distance($1, $2, 0.0, $3)$_$;


ALTER FUNCTION public.st_distance(geography, geography, boolean) OWNER TO postgres;

--
-- TOC entry 7111 (class 0 OID 0)
-- Dependencies: 1359
-- Name: FUNCTION st_distance(geography, geography, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance(geography, geography, boolean) IS 'args: gg1, gg2, use_spheroid - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.';


--
-- TOC entry 1360 (class 1255 OID 11286069)
-- Name: st_distance_sphere(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance_sphere(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_distance_sphere';


ALTER FUNCTION public.st_distance_sphere(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7112 (class 0 OID 0)
-- Dependencies: 1360
-- Name: FUNCTION st_distance_sphere(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance_sphere(geometry, geometry) IS 'args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius of 6370986 meters. Faster than ST_Distance_Spheroid, but less accurate. PostGIS versions prior to 1.5 only implemented for points.';


--
-- TOC entry 1361 (class 1255 OID 11286070)
-- Name: st_distance_spheroid(geometry, geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_distance_spheroid(geometry, geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_distance_ellipsoid';


ALTER FUNCTION public.st_distance_spheroid(geometry, geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 7113 (class 0 OID 0)
-- Dependencies: 1361
-- Name: FUNCTION st_distance_spheroid(geometry, geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_distance_spheroid(geometry, geometry, spheroid) IS 'args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.';


--
-- TOC entry 1362 (class 1255 OID 11286071)
-- Name: st_dump(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dump(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dump';


ALTER FUNCTION public.st_dump(geometry) OWNER TO postgres;

--
-- TOC entry 7114 (class 0 OID 0)
-- Dependencies: 1362
-- Name: FUNCTION st_dump(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dump(geometry) IS 'args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.';


--
-- TOC entry 1363 (class 1255 OID 11286072)
-- Name: st_dumppoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dumppoints(geometry) RETURNS SETOF geometry_dump
    LANGUAGE sql
    AS $_$
  SELECT * FROM _ST_DumpPoints($1, NULL);
$_$;


ALTER FUNCTION public.st_dumppoints(geometry) OWNER TO postgres;

--
-- TOC entry 7115 (class 0 OID 0)
-- Dependencies: 1363
-- Name: FUNCTION st_dumppoints(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dumppoints(geometry) IS 'args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.';


--
-- TOC entry 1364 (class 1255 OID 11286073)
-- Name: st_dumprings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dumprings(geometry) RETURNS SETOF geometry_dump
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_dump_rings';


ALTER FUNCTION public.st_dumprings(geometry) OWNER TO postgres;

--
-- TOC entry 7116 (class 0 OID 0)
-- Dependencies: 1364
-- Name: FUNCTION st_dumprings(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dumprings(geometry) IS 'args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.';


--
-- TOC entry 1365 (class 1255 OID 11286074)
-- Name: st_dwithin(geography, geography, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(geography, geography, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, true)$_$;


ALTER FUNCTION public.st_dwithin(geography, geography, double precision) OWNER TO postgres;

--
-- TOC entry 7117 (class 0 OID 0)
-- Dependencies: 1365
-- Name: FUNCTION st_dwithin(geography, geography, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dwithin(geography, geography, double precision) IS 'args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';


--
-- TOC entry 1366 (class 1255 OID 11286075)
-- Name: st_dwithin(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(geometry, geometry, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)$_$;


ALTER FUNCTION public.st_dwithin(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7118 (class 0 OID 0)
-- Dependencies: 1366
-- Name: FUNCTION st_dwithin(geometry, geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dwithin(geometry, geometry, double precision) IS 'args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';


--
-- TOC entry 1367 (class 1255 OID 11286076)
-- Name: st_dwithin(text, text, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(text, text, double precision) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $_$;


ALTER FUNCTION public.st_dwithin(text, text, double precision) OWNER TO postgres;

--
-- TOC entry 1368 (class 1255 OID 11286077)
-- Name: st_dwithin(geography, geography, double precision, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_dwithin(geography, geography, double precision, boolean) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_dwithin(geography, geography, double precision, boolean) OWNER TO postgres;

--
-- TOC entry 7119 (class 0 OID 0)
-- Dependencies: 1368
-- Name: FUNCTION st_dwithin(geography, geography, double precision, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_dwithin(geography, geography, double precision, boolean) IS 'args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.';


--
-- TOC entry 1369 (class 1255 OID 11286078)
-- Name: st_endpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_endpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_endpoint_linestring';


ALTER FUNCTION public.st_endpoint(geometry) OWNER TO postgres;

--
-- TOC entry 7120 (class 0 OID 0)
-- Dependencies: 1369
-- Name: FUNCTION st_endpoint(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_endpoint(geometry) IS 'args: g - Returns the last point of a LINESTRING geometry as a POINT.';


--
-- TOC entry 1370 (class 1255 OID 11286079)
-- Name: st_envelope(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_envelope(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_envelope';


ALTER FUNCTION public.st_envelope(geometry) OWNER TO postgres;

--
-- TOC entry 7121 (class 0 OID 0)
-- Dependencies: 1370
-- Name: FUNCTION st_envelope(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_envelope(geometry) IS 'args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.';


--
-- TOC entry 1371 (class 1255 OID 11286080)
-- Name: st_equals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_equals(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT $1 && $2 AND _ST_Equals($1,$2)$_$;


ALTER FUNCTION public.st_equals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7122 (class 0 OID 0)
-- Dependencies: 1371
-- Name: FUNCTION st_equals(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_equals(geometry, geometry) IS 'args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.';


--
-- TOC entry 1372 (class 1255 OID 11286081)
-- Name: st_estimated_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_estimated_extent(text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '$libdir/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.st_estimated_extent(text, text) OWNER TO postgres;

--
-- TOC entry 7123 (class 0 OID 0)
-- Dependencies: 1372
-- Name: FUNCTION st_estimated_extent(text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_estimated_extent(text, text) IS 'args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';


--
-- TOC entry 1373 (class 1255 OID 11286082)
-- Name: st_estimated_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_estimated_extent(text, text, text) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT SECURITY DEFINER
    AS '$libdir/postgis-1.5', 'LWGEOM_estimated_extent';


ALTER FUNCTION public.st_estimated_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 7124 (class 0 OID 0)
-- Dependencies: 1373
-- Name: FUNCTION st_estimated_extent(text, text, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_estimated_extent(text, text, text) IS 'args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.';


--
-- TOC entry 1374 (class 1255 OID 11286083)
-- Name: st_expand(box2d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_expand(box2d, double precision) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_expand';


ALTER FUNCTION public.st_expand(box2d, double precision) OWNER TO postgres;

--
-- TOC entry 7125 (class 0 OID 0)
-- Dependencies: 1374
-- Name: FUNCTION st_expand(box2d, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_expand(box2d, double precision) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';


--
-- TOC entry 1375 (class 1255 OID 11286084)
-- Name: st_expand(box3d, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_expand(box3d, double precision) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_expand';


ALTER FUNCTION public.st_expand(box3d, double precision) OWNER TO postgres;

--
-- TOC entry 7126 (class 0 OID 0)
-- Dependencies: 1375
-- Name: FUNCTION st_expand(box3d, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_expand(box3d, double precision) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';


--
-- TOC entry 1376 (class 1255 OID 11286085)
-- Name: st_expand(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_expand(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_expand';


ALTER FUNCTION public.st_expand(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7127 (class 0 OID 0)
-- Dependencies: 1376
-- Name: FUNCTION st_expand(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_expand(geometry, double precision) IS 'args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision';


--
-- TOC entry 1377 (class 1255 OID 11286086)
-- Name: st_exteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_exteriorring(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_exteriorring_polygon';


ALTER FUNCTION public.st_exteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 7128 (class 0 OID 0)
-- Dependencies: 1377
-- Name: FUNCTION st_exteriorring(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_exteriorring(geometry) IS 'args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON';


--
-- TOC entry 1378 (class 1255 OID 11286087)
-- Name: st_factor(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_factor(chip) RETURNS real
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getFactor';


ALTER FUNCTION public.st_factor(chip) OWNER TO postgres;

--
-- TOC entry 1379 (class 1255 OID 11286088)
-- Name: st_find_extent(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_find_extent(text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.st_find_extent(text, text) OWNER TO postgres;

--
-- TOC entry 1380 (class 1255 OID 11286089)
-- Name: st_find_extent(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_find_extent(text, text, text) RETURNS box2d
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE 'SELECT extent("' || columnname || '") FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$_$;


ALTER FUNCTION public.st_find_extent(text, text, text) OWNER TO postgres;

--
-- TOC entry 1381 (class 1255 OID 11286090)
-- Name: st_force_2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_2d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_2d';


ALTER FUNCTION public.st_force_2d(geometry) OWNER TO postgres;

--
-- TOC entry 7129 (class 0 OID 0)
-- Dependencies: 1381
-- Name: FUNCTION st_force_2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_2d(geometry) IS 'args: geomA - Forces the geometries into a "2-dimensional mode" so that all output representations will only have the X and Y coordinates.';


--
-- TOC entry 1382 (class 1255 OID 11286091)
-- Name: st_force_3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_3d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.st_force_3d(geometry) OWNER TO postgres;

--
-- TOC entry 7130 (class 0 OID 0)
-- Dependencies: 1382
-- Name: FUNCTION st_force_3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_3d(geometry) IS 'args: geomA - Forces the geometries into XYZ mode. This is an alias for ST_Force_3DZ.';


--
-- TOC entry 1383 (class 1255 OID 11286092)
-- Name: st_force_3dm(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_3dm(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_3dm';


ALTER FUNCTION public.st_force_3dm(geometry) OWNER TO postgres;

--
-- TOC entry 7131 (class 0 OID 0)
-- Dependencies: 1383
-- Name: FUNCTION st_force_3dm(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_3dm(geometry) IS 'args: geomA - Forces the geometries into XYM mode.';


--
-- TOC entry 1384 (class 1255 OID 11286093)
-- Name: st_force_3dz(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_3dz(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_3dz';


ALTER FUNCTION public.st_force_3dz(geometry) OWNER TO postgres;

--
-- TOC entry 7132 (class 0 OID 0)
-- Dependencies: 1384
-- Name: FUNCTION st_force_3dz(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_3dz(geometry) IS 'args: geomA - Forces the geometries into XYZ mode. This is a synonym for ST_Force_3D.';


--
-- TOC entry 1385 (class 1255 OID 11286094)
-- Name: st_force_4d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_4d(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_4d';


ALTER FUNCTION public.st_force_4d(geometry) OWNER TO postgres;

--
-- TOC entry 7133 (class 0 OID 0)
-- Dependencies: 1385
-- Name: FUNCTION st_force_4d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_4d(geometry) IS 'args: geomA - Forces the geometries into XYZM mode.';


--
-- TOC entry 1386 (class 1255 OID 11286095)
-- Name: st_force_collection(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_force_collection(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_collection';


ALTER FUNCTION public.st_force_collection(geometry) OWNER TO postgres;

--
-- TOC entry 7134 (class 0 OID 0)
-- Dependencies: 1386
-- Name: FUNCTION st_force_collection(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_force_collection(geometry) IS 'args: geomA - Converts the geometry into a GEOMETRYCOLLECTION.';


--
-- TOC entry 1387 (class 1255 OID 11286096)
-- Name: st_forcerhr(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_forcerhr(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_forceRHR_poly';


ALTER FUNCTION public.st_forcerhr(geometry) OWNER TO postgres;

--
-- TOC entry 7135 (class 0 OID 0)
-- Dependencies: 1387
-- Name: FUNCTION st_forcerhr(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_forcerhr(geometry) IS 'args: g - Forces the orientation of the vertices in a polygon to follow the Right-Hand-Rule.';


--
-- TOC entry 1388 (class 1255 OID 11286097)
-- Name: st_geogfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geogfromtext(text) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_from_text';


ALTER FUNCTION public.st_geogfromtext(text) OWNER TO postgres;

--
-- TOC entry 7136 (class 0 OID 0)
-- Dependencies: 1388
-- Name: FUNCTION st_geogfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geogfromtext(text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';


--
-- TOC entry 1389 (class 1255 OID 11286098)
-- Name: st_geogfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geogfromwkb(bytea) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_from_binary';


ALTER FUNCTION public.st_geogfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 7137 (class 0 OID 0)
-- Dependencies: 1389
-- Name: FUNCTION st_geogfromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geogfromwkb(bytea) IS 'args: geom - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).';


--
-- TOC entry 1390 (class 1255 OID 11286099)
-- Name: st_geographyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geographyfromtext(text) RETURNS geography
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geography_from_text';


ALTER FUNCTION public.st_geographyfromtext(text) OWNER TO postgres;

--
-- TOC entry 7138 (class 0 OID 0)
-- Dependencies: 1390
-- Name: FUNCTION st_geographyfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geographyfromtext(text) IS 'args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).';


--
-- TOC entry 1391 (class 1255 OID 11286100)
-- Name: st_geohash(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geohash(geometry) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_GeoHash($1, 0)$_$;


ALTER FUNCTION public.st_geohash(geometry) OWNER TO postgres;

--
-- TOC entry 7139 (class 0 OID 0)
-- Dependencies: 1391
-- Name: FUNCTION st_geohash(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geohash(geometry) IS 'args: g1 - Return a GeoHash representation (geohash.org) of the geometry.';


--
-- TOC entry 1392 (class 1255 OID 11286101)
-- Name: st_geohash(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geohash(geometry, integer) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ST_GeoHash';


ALTER FUNCTION public.st_geohash(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7140 (class 0 OID 0)
-- Dependencies: 1392
-- Name: FUNCTION st_geohash(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geohash(geometry, integer) IS 'args: g1, precision - Return a GeoHash representation (geohash.org) of the geometry.';


--
-- TOC entry 1393 (class 1255 OID 11286102)
-- Name: st_geomcollfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromtext(text) OWNER TO postgres;

--
-- TOC entry 7141 (class 0 OID 0)
-- Dependencies: 1393
-- Name: FUNCTION st_geomcollfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomcollfromtext(text) IS 'args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1394 (class 1255 OID 11286103)
-- Name: st_geomcollfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7142 (class 0 OID 0)
-- Dependencies: 1394
-- Name: FUNCTION st_geomcollfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomcollfromtext(text, integer) IS 'args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1395 (class 1255 OID 11286104)
-- Name: st_geomcollfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1396 (class 1255 OID 11286105)
-- Name: st_geomcollfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomcollfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_geomcollfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1397 (class 1255 OID 11286106)
-- Name: st_geometry(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_bytea';


ALTER FUNCTION public.st_geometry(bytea) OWNER TO postgres;

--
-- TOC entry 1398 (class 1255 OID 11286107)
-- Name: st_geometry(box2d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(box2d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_to_LWGEOM';


ALTER FUNCTION public.st_geometry(box2d) OWNER TO postgres;

--
-- TOC entry 1399 (class 1255 OID 11286108)
-- Name: st_geometry(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(box3d) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.st_geometry(box3d) OWNER TO postgres;

--
-- TOC entry 1400 (class 1255 OID 11286109)
-- Name: st_geometry(box3d_extent); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(box3d_extent) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_to_LWGEOM';


ALTER FUNCTION public.st_geometry(box3d_extent) OWNER TO postgres;

--
-- TOC entry 1401 (class 1255 OID 11286110)
-- Name: st_geometry(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(chip) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_to_LWGEOM';


ALTER FUNCTION public.st_geometry(chip) OWNER TO postgres;

--
-- TOC entry 1402 (class 1255 OID 11286111)
-- Name: st_geometry(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.st_geometry(text) OWNER TO postgres;

--
-- TOC entry 1403 (class 1255 OID 11286112)
-- Name: st_geometry_above(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_above(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_above';


ALTER FUNCTION public.st_geometry_above(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1404 (class 1255 OID 11286113)
-- Name: st_geometry_analyze(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_analyze(internal) RETURNS boolean
    LANGUAGE c STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_analyze';


ALTER FUNCTION public.st_geometry_analyze(internal) OWNER TO postgres;

--
-- TOC entry 1405 (class 1255 OID 11286114)
-- Name: st_geometry_below(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_below(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_below';


ALTER FUNCTION public.st_geometry_below(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1406 (class 1255 OID 11286115)
-- Name: st_geometry_cmp(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_cmp(geometry, geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_cmp';


ALTER FUNCTION public.st_geometry_cmp(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1407 (class 1255 OID 11286116)
-- Name: st_geometry_contain(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_contain(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_contain';


ALTER FUNCTION public.st_geometry_contain(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1408 (class 1255 OID 11286117)
-- Name: st_geometry_contained(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_contained(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_contained';


ALTER FUNCTION public.st_geometry_contained(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1409 (class 1255 OID 11286118)
-- Name: st_geometry_eq(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_eq(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_eq';


ALTER FUNCTION public.st_geometry_eq(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1410 (class 1255 OID 11286119)
-- Name: st_geometry_ge(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_ge(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_ge';


ALTER FUNCTION public.st_geometry_ge(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1411 (class 1255 OID 11286120)
-- Name: st_geometry_gt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_gt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_gt';


ALTER FUNCTION public.st_geometry_gt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1412 (class 1255 OID 11286121)
-- Name: st_geometry_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_in(cstring) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_in';


ALTER FUNCTION public.st_geometry_in(cstring) OWNER TO postgres;

--
-- TOC entry 1413 (class 1255 OID 11286122)
-- Name: st_geometry_le(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_le(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_le';


ALTER FUNCTION public.st_geometry_le(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1414 (class 1255 OID 11286123)
-- Name: st_geometry_left(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_left(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_left';


ALTER FUNCTION public.st_geometry_left(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1415 (class 1255 OID 11286124)
-- Name: st_geometry_lt(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_lt(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'lwgeom_lt';


ALTER FUNCTION public.st_geometry_lt(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1416 (class 1255 OID 11286125)
-- Name: st_geometry_out(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_out(geometry) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_out';


ALTER FUNCTION public.st_geometry_out(geometry) OWNER TO postgres;

--
-- TOC entry 1417 (class 1255 OID 11286126)
-- Name: st_geometry_overabove(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overabove(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overabove';


ALTER FUNCTION public.st_geometry_overabove(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1418 (class 1255 OID 11286127)
-- Name: st_geometry_overbelow(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overbelow(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overbelow';


ALTER FUNCTION public.st_geometry_overbelow(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1419 (class 1255 OID 11286128)
-- Name: st_geometry_overlap(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overlap(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overlap';


ALTER FUNCTION public.st_geometry_overlap(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1420 (class 1255 OID 11286129)
-- Name: st_geometry_overleft(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overleft(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overleft';


ALTER FUNCTION public.st_geometry_overleft(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1421 (class 1255 OID 11286130)
-- Name: st_geometry_overright(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_overright(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_overright';


ALTER FUNCTION public.st_geometry_overright(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1422 (class 1255 OID 11286131)
-- Name: st_geometry_recv(internal); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_recv(internal) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_recv';


ALTER FUNCTION public.st_geometry_recv(internal) OWNER TO postgres;

--
-- TOC entry 1423 (class 1255 OID 11286132)
-- Name: st_geometry_right(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_right(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_right';


ALTER FUNCTION public.st_geometry_right(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1424 (class 1255 OID 11286133)
-- Name: st_geometry_same(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_same(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_samebox';


ALTER FUNCTION public.st_geometry_same(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1425 (class 1255 OID 11286134)
-- Name: st_geometry_send(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometry_send(geometry) RETURNS bytea
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_send';


ALTER FUNCTION public.st_geometry_send(geometry) OWNER TO postgres;

--
-- TOC entry 1426 (class 1255 OID 11286135)
-- Name: st_geometryfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometryfromtext(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geometryfromtext(text) OWNER TO postgres;

--
-- TOC entry 7143 (class 0 OID 0)
-- Dependencies: 1426
-- Name: FUNCTION st_geometryfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometryfromtext(text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';


--
-- TOC entry 1427 (class 1255 OID 11286136)
-- Name: st_geometryfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometryfromtext(text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geometryfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7144 (class 0 OID 0)
-- Dependencies: 1427
-- Name: FUNCTION st_geometryfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometryfromtext(text, integer) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';


--
-- TOC entry 1428 (class 1255 OID 11286137)
-- Name: st_geometryn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometryn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_geometryn_collection';


ALTER FUNCTION public.st_geometryn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7145 (class 0 OID 0)
-- Dependencies: 1428
-- Name: FUNCTION st_geometryn(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometryn(geometry, integer) IS 'args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, MULTIPOINT, MULTILINESTRING, MULTICURVE or MULTIPOLYGON. Otherwise, return NULL.';


--
-- TOC entry 1429 (class 1255 OID 11286138)
-- Name: st_geometrytype(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geometrytype(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geometry_geometrytype';


ALTER FUNCTION public.st_geometrytype(geometry) OWNER TO postgres;

--
-- TOC entry 7146 (class 0 OID 0)
-- Dependencies: 1429
-- Name: FUNCTION st_geometrytype(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geometrytype(geometry) IS 'args: g1 - Return the geometry type of the ST_Geometry value.';


--
-- TOC entry 1430 (class 1255 OID 11286139)
-- Name: st_geomfromewkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromewkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOMFromWKB';


ALTER FUNCTION public.st_geomfromewkb(bytea) OWNER TO postgres;

--
-- TOC entry 7147 (class 0 OID 0)
-- Dependencies: 1430
-- Name: FUNCTION st_geomfromewkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromewkb(bytea) IS 'args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).';


--
-- TOC entry 1431 (class 1255 OID 11286140)
-- Name: st_geomfromewkt(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromewkt(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'parse_WKT_lwgeom';


ALTER FUNCTION public.st_geomfromewkt(text) OWNER TO postgres;

--
-- TOC entry 7148 (class 0 OID 0)
-- Dependencies: 1431
-- Name: FUNCTION st_geomfromewkt(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromewkt(text) IS 'args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).';


--
-- TOC entry 1432 (class 1255 OID 11286141)
-- Name: st_geomfromgml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromgml(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geom_from_gml';


ALTER FUNCTION public.st_geomfromgml(text) OWNER TO postgres;

--
-- TOC entry 7149 (class 0 OID 0)
-- Dependencies: 1432
-- Name: FUNCTION st_geomfromgml(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromgml(text) IS 'args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object';


--
-- TOC entry 1433 (class 1255 OID 11286142)
-- Name: st_geomfromkml(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromkml(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geom_from_kml';


ALTER FUNCTION public.st_geomfromkml(text) OWNER TO postgres;

--
-- TOC entry 7150 (class 0 OID 0)
-- Dependencies: 1433
-- Name: FUNCTION st_geomfromkml(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromkml(text) IS 'args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object';


--
-- TOC entry 1434 (class 1255 OID 11286143)
-- Name: st_geomfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromtext(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geomfromtext(text) OWNER TO postgres;

--
-- TOC entry 7151 (class 0 OID 0)
-- Dependencies: 1434
-- Name: FUNCTION st_geomfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromtext(text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';


--
-- TOC entry 1435 (class 1255 OID 11286144)
-- Name: st_geomfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromtext(text, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_geomfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7152 (class 0 OID 0)
-- Dependencies: 1435
-- Name: FUNCTION st_geomfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromtext(text, integer) IS 'args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).';


--
-- TOC entry 1436 (class 1255 OID 11286145)
-- Name: st_geomfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromwkb(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_WKB';


ALTER FUNCTION public.st_geomfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 7153 (class 0 OID 0)
-- Dependencies: 1436
-- Name: FUNCTION st_geomfromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromwkb(bytea) IS 'args: geom - Makes a geometry from WKB with the given SRID';


--
-- TOC entry 1437 (class 1255 OID 11286146)
-- Name: st_geomfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_geomfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_SetSRID(ST_GeomFromWKB($1), $2)$_$;


ALTER FUNCTION public.st_geomfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 7154 (class 0 OID 0)
-- Dependencies: 1437
-- Name: FUNCTION st_geomfromwkb(bytea, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_geomfromwkb(bytea, integer) IS 'args: geom, srid - Makes a geometry from WKB with the given SRID';


--
-- TOC entry 1438 (class 1255 OID 11286147)
-- Name: st_gmltosql(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_gmltosql(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geom_from_gml';


ALTER FUNCTION public.st_gmltosql(text) OWNER TO postgres;

--
-- TOC entry 7155 (class 0 OID 0)
-- Dependencies: 1438
-- Name: FUNCTION st_gmltosql(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_gmltosql(text) IS 'args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML';


--
-- TOC entry 1439 (class 1255 OID 11286148)
-- Name: st_hasarc(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_hasarc(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_has_arc';


ALTER FUNCTION public.st_hasarc(geometry) OWNER TO postgres;

--
-- TOC entry 7156 (class 0 OID 0)
-- Dependencies: 1439
-- Name: FUNCTION st_hasarc(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_hasarc(geometry) IS 'args: geomA - Returns true if a geometry or geometry collection contains a circular string';


--
-- TOC entry 1440 (class 1255 OID 11286149)
-- Name: st_hausdorffdistance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_hausdorffdistance(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'hausdorffdistance';


ALTER FUNCTION public.st_hausdorffdistance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7157 (class 0 OID 0)
-- Dependencies: 1440
-- Name: FUNCTION st_hausdorffdistance(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_hausdorffdistance(geometry, geometry) IS 'args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';


--
-- TOC entry 1441 (class 1255 OID 11286150)
-- Name: st_hausdorffdistance(geometry, geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_hausdorffdistance(geometry, geometry, double precision) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'hausdorffdistancedensify';


ALTER FUNCTION public.st_hausdorffdistance(geometry, geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7158 (class 0 OID 0)
-- Dependencies: 1441
-- Name: FUNCTION st_hausdorffdistance(geometry, geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_hausdorffdistance(geometry, geometry, double precision) IS 'args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.';


--
-- TOC entry 1442 (class 1255 OID 11286151)
-- Name: st_height(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_height(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getHeight';


ALTER FUNCTION public.st_height(chip) OWNER TO postgres;

--
-- TOC entry 1443 (class 1255 OID 11286152)
-- Name: st_interiorringn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_interiorringn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_interiorringn_polygon';


ALTER FUNCTION public.st_interiorringn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7159 (class 0 OID 0)
-- Dependencies: 1443
-- Name: FUNCTION st_interiorringn(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_interiorringn(geometry, integer) IS 'args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.';


--
-- TOC entry 1444 (class 1255 OID 11286153)
-- Name: st_intersection(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersection(geography, geography) RETURNS geography
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT geography(ST_Transform(ST_Intersection(ST_Transform(geometry($1), _ST_BestSRID($1, $2)), ST_Transform(geometry($2), _ST_BestSRID($1, $2))), 4326))$_$;


ALTER FUNCTION public.st_intersection(geography, geography) OWNER TO postgres;

--
-- TOC entry 7160 (class 0 OID 0)
-- Dependencies: 1444
-- Name: FUNCTION st_intersection(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersection(geography, geography) IS 'args: geogA, geogB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';


--
-- TOC entry 1445 (class 1255 OID 11286154)
-- Name: st_intersection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersection(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'intersection';


ALTER FUNCTION public.st_intersection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7161 (class 0 OID 0)
-- Dependencies: 1445
-- Name: FUNCTION st_intersection(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersection(geometry, geometry) IS 'args: geomA, geomB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.';


--
-- TOC entry 1446 (class 1255 OID 11286155)
-- Name: st_intersection(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersection(text, text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Intersection($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_intersection(text, text) OWNER TO postgres;

--
-- TOC entry 1447 (class 1255 OID 11286156)
-- Name: st_intersects(geography, geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersects(geography, geography) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Distance($1, $2, 0.0, false) < 0.00001$_$;


ALTER FUNCTION public.st_intersects(geography, geography) OWNER TO postgres;

--
-- TOC entry 7162 (class 0 OID 0)
-- Dependencies: 1447
-- Name: FUNCTION st_intersects(geography, geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersects(geography, geography) IS 'args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';


--
-- TOC entry 1448 (class 1255 OID 11286157)
-- Name: st_intersects(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersects(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Intersects($1,$2)$_$;


ALTER FUNCTION public.st_intersects(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7163 (class 0 OID 0)
-- Dependencies: 1448
-- Name: FUNCTION st_intersects(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_intersects(geometry, geometry) IS 'args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)';


--
-- TOC entry 1449 (class 1255 OID 11286158)
-- Name: st_intersects(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_intersects(text, text) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT ST_Intersects($1::geometry, $2::geometry);  $_$;


ALTER FUNCTION public.st_intersects(text, text) OWNER TO postgres;

--
-- TOC entry 1450 (class 1255 OID 11286159)
-- Name: st_isclosed(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isclosed(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_isclosed_linestring';


ALTER FUNCTION public.st_isclosed(geometry) OWNER TO postgres;

--
-- TOC entry 7164 (class 0 OID 0)
-- Dependencies: 1450
-- Name: FUNCTION st_isclosed(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isclosed(geometry) IS 'args: g - Returns TRUE if the LINESTRINGs start and end points are coincident.';


--
-- TOC entry 1451 (class 1255 OID 11286160)
-- Name: st_isempty(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isempty(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_isempty';


ALTER FUNCTION public.st_isempty(geometry) OWNER TO postgres;

--
-- TOC entry 7165 (class 0 OID 0)
-- Dependencies: 1451
-- Name: FUNCTION st_isempty(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isempty(geometry) IS 'args: geomA - Returns true if this Geometry is an empty geometry . If true, then this Geometry represents the empty point set - i.e. GEOMETRYCOLLECTION(EMPTY).';


--
-- TOC entry 1452 (class 1255 OID 11286161)
-- Name: st_isring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isring(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'isring';


ALTER FUNCTION public.st_isring(geometry) OWNER TO postgres;

--
-- TOC entry 7166 (class 0 OID 0)
-- Dependencies: 1452
-- Name: FUNCTION st_isring(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isring(geometry) IS 'args: g - Returns TRUE if this LINESTRING is both closed and simple.';


--
-- TOC entry 1453 (class 1255 OID 11286162)
-- Name: st_issimple(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_issimple(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'issimple';


ALTER FUNCTION public.st_issimple(geometry) OWNER TO postgres;

--
-- TOC entry 7167 (class 0 OID 0)
-- Dependencies: 1453
-- Name: FUNCTION st_issimple(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_issimple(geometry) IS 'args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.';


--
-- TOC entry 1454 (class 1255 OID 11286163)
-- Name: st_isvalid(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isvalid(geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'isvalid';


ALTER FUNCTION public.st_isvalid(geometry) OWNER TO postgres;

--
-- TOC entry 7168 (class 0 OID 0)
-- Dependencies: 1454
-- Name: FUNCTION st_isvalid(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isvalid(geometry) IS 'args: g - Returns true if the ST_Geometry is well formed.';


--
-- TOC entry 1455 (class 1255 OID 11286164)
-- Name: st_isvalidreason(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_isvalidreason(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'isvalidreason';


ALTER FUNCTION public.st_isvalidreason(geometry) OWNER TO postgres;

--
-- TOC entry 7169 (class 0 OID 0)
-- Dependencies: 1455
-- Name: FUNCTION st_isvalidreason(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_isvalidreason(geometry) IS 'args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.';


--
-- TOC entry 1456 (class 1255 OID 11286165)
-- Name: st_length(geography); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(geography) RETURNS double precision
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT ST_Length($1, true)$_$;


ALTER FUNCTION public.st_length(geography) OWNER TO postgres;

--
-- TOC entry 7170 (class 0 OID 0)
-- Dependencies: 1456
-- Name: FUNCTION st_length(geography); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length(geography) IS 'args: gg - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';


--
-- TOC entry 1457 (class 1255 OID 11286166)
-- Name: st_length(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_length2d_linestring';


ALTER FUNCTION public.st_length(geometry) OWNER TO postgres;

--
-- TOC entry 7171 (class 0 OID 0)
-- Dependencies: 1457
-- Name: FUNCTION st_length(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length(geometry) IS 'args: a_2dlinestring - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';


--
-- TOC entry 1458 (class 1255 OID 11286167)
-- Name: st_length(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(text) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT ST_Length($1::geometry);  $_$;


ALTER FUNCTION public.st_length(text) OWNER TO postgres;

--
-- TOC entry 1459 (class 1255 OID 11286168)
-- Name: st_length(geography, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length(geography, boolean) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'geography_length';


ALTER FUNCTION public.st_length(geography, boolean) OWNER TO postgres;

--
-- TOC entry 7172 (class 0 OID 0)
-- Dependencies: 1459
-- Name: FUNCTION st_length(geography, boolean); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length(geography, boolean) IS 'args: gg, use_spheroid - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)';


--
-- TOC entry 1460 (class 1255 OID 11286169)
-- Name: st_length2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_length2d_linestring';


ALTER FUNCTION public.st_length2d(geometry) OWNER TO postgres;

--
-- TOC entry 7173 (class 0 OID 0)
-- Dependencies: 1460
-- Name: FUNCTION st_length2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length2d(geometry) IS 'args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length';


--
-- TOC entry 1461 (class 1255 OID 11286170)
-- Name: st_length2d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length2d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_length2d_ellipsoid';


ALTER FUNCTION public.st_length2d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 7174 (class 0 OID 0)
-- Dependencies: 1461
-- Name: FUNCTION st_length2d_spheroid(geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length2d_spheroid(geometry, spheroid) IS 'args: a_linestring, a_spheroid - Calculates the 2D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';


--
-- TOC entry 1462 (class 1255 OID 11286171)
-- Name: st_length3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_length_linestring';


ALTER FUNCTION public.st_length3d(geometry) OWNER TO postgres;

--
-- TOC entry 7175 (class 0 OID 0)
-- Dependencies: 1462
-- Name: FUNCTION st_length3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length3d(geometry) IS 'args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.';


--
-- TOC entry 1463 (class 1255 OID 11286172)
-- Name: st_length3d_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length3d_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.st_length3d_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 7176 (class 0 OID 0)
-- Dependencies: 1463
-- Name: FUNCTION st_length3d_spheroid(geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length3d_spheroid(geometry, spheroid) IS 'args: a_linestring, a_spheroid - Calculates the length of a geometry on an ellipsoid, taking the elevation into account. This is just an alias for ST_Length_Spheroid.';


--
-- TOC entry 1464 (class 1255 OID 11286173)
-- Name: st_length_spheroid(geometry, spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_length_spheroid(geometry, spheroid) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'LWGEOM_length_ellipsoid_linestring';


ALTER FUNCTION public.st_length_spheroid(geometry, spheroid) OWNER TO postgres;

--
-- TOC entry 7177 (class 0 OID 0)
-- Dependencies: 1464
-- Name: FUNCTION st_length_spheroid(geometry, spheroid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_length_spheroid(geometry, spheroid) IS 'args: a_linestring, a_spheroid - Calculates the 2D or 3D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.';


--
-- TOC entry 1465 (class 1255 OID 11286174)
-- Name: st_line_interpolate_point(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_line_interpolate_point(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_interpolate_point';


ALTER FUNCTION public.st_line_interpolate_point(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7178 (class 0 OID 0)
-- Dependencies: 1465
-- Name: FUNCTION st_line_interpolate_point(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_line_interpolate_point(geometry, double precision) IS 'args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.';


--
-- TOC entry 1466 (class 1255 OID 11286175)
-- Name: st_line_locate_point(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_line_locate_point(geometry, geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_locate_point';


ALTER FUNCTION public.st_line_locate_point(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7179 (class 0 OID 0)
-- Dependencies: 1466
-- Name: FUNCTION st_line_locate_point(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_line_locate_point(geometry, geometry) IS 'args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.';


--
-- TOC entry 1467 (class 1255 OID 11286176)
-- Name: st_line_substring(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_line_substring(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_substring';


ALTER FUNCTION public.st_line_substring(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7180 (class 0 OID 0)
-- Dependencies: 1467
-- Name: FUNCTION st_line_substring(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_line_substring(geometry, double precision, double precision) IS 'args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.';


--
-- TOC entry 1468 (class 1255 OID 11286177)
-- Name: st_linecrossingdirection(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linecrossingdirection(geometry, geometry) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$ SELECT CASE WHEN NOT $1 && $2 THEN 0 ELSE _ST_LineCrossingDirection($1,$2) END $_$;


ALTER FUNCTION public.st_linecrossingdirection(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7181 (class 0 OID 0)
-- Dependencies: 1468
-- Name: FUNCTION st_linecrossingdirection(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linecrossingdirection(geometry, geometry) IS 'args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.';


--
-- TOC entry 1469 (class 1255 OID 11286178)
-- Name: st_linefrommultipoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefrommultipoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_from_mpoint';


ALTER FUNCTION public.st_linefrommultipoint(geometry) OWNER TO postgres;

--
-- TOC entry 7182 (class 0 OID 0)
-- Dependencies: 1469
-- Name: FUNCTION st_linefrommultipoint(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefrommultipoint(geometry) IS 'args: aMultiPoint - Creates a LineString from a MultiPoint geometry.';


--
-- TOC entry 1470 (class 1255 OID 11286179)
-- Name: st_linefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'LINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromtext(text) OWNER TO postgres;

--
-- TOC entry 7183 (class 0 OID 0)
-- Dependencies: 1470
-- Name: FUNCTION st_linefromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromtext(text) IS 'args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';


--
-- TOC entry 1471 (class 1255 OID 11286180)
-- Name: st_linefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'LINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7184 (class 0 OID 0)
-- Dependencies: 1471
-- Name: FUNCTION st_linefromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromtext(text, integer) IS 'args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to -1.';


--
-- TOC entry 1472 (class 1255 OID 11286181)
-- Name: st_linefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 7185 (class 0 OID 0)
-- Dependencies: 1472
-- Name: FUNCTION st_linefromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromwkb(bytea) IS 'args: WKB - Makes a LINESTRING from WKB with the given SRID';


--
-- TOC entry 1473 (class 1255 OID 11286182)
-- Name: st_linefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 7186 (class 0 OID 0)
-- Dependencies: 1473
-- Name: FUNCTION st_linefromwkb(bytea, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linefromwkb(bytea, integer) IS 'args: WKB, srid - Makes a LINESTRING from WKB with the given SRID';


--
-- TOC entry 1474 (class 1255 OID 11286183)
-- Name: st_linemerge(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linemerge(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'linemerge';


ALTER FUNCTION public.st_linemerge(geometry) OWNER TO postgres;

--
-- TOC entry 7187 (class 0 OID 0)
-- Dependencies: 1474
-- Name: FUNCTION st_linemerge(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linemerge(geometry) IS 'args: amultilinestring - Returns a (set of) LineString(s) formed by sewing together a MULTILINESTRING.';


--
-- TOC entry 1475 (class 1255 OID 11286184)
-- Name: st_linestringfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linestringfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'LINESTRING'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linestringfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 7188 (class 0 OID 0)
-- Dependencies: 1475
-- Name: FUNCTION st_linestringfromwkb(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linestringfromwkb(bytea) IS 'args: WKB - Makes a geometry from WKB with the given SRID.';


--
-- TOC entry 1476 (class 1255 OID 11286185)
-- Name: st_linestringfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linestringfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_linestringfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 7189 (class 0 OID 0)
-- Dependencies: 1476
-- Name: FUNCTION st_linestringfromwkb(bytea, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linestringfromwkb(bytea, integer) IS 'args: WKB, srid - Makes a geometry from WKB with the given SRID.';


--
-- TOC entry 1477 (class 1255 OID 11286186)
-- Name: st_linetocurve(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_linetocurve(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_line_desegmentize';


ALTER FUNCTION public.st_linetocurve(geometry) OWNER TO postgres;

--
-- TOC entry 7190 (class 0 OID 0)
-- Dependencies: 1477
-- Name: FUNCTION st_linetocurve(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_linetocurve(geometry) IS 'args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVED POLYGON';


--
-- TOC entry 1478 (class 1255 OID 11286187)
-- Name: st_locate_along_measure(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_locate_along_measure(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ SELECT locate_between_measures($1, $2, $2) $_$;


ALTER FUNCTION public.st_locate_along_measure(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7191 (class 0 OID 0)
-- Dependencies: 1478
-- Name: FUNCTION st_locate_along_measure(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_locate_along_measure(geometry, double precision) IS 'args: ageom_with_measure, a_measure - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.';


--
-- TOC entry 1479 (class 1255 OID 11286188)
-- Name: st_locate_between_measures(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_locate_between_measures(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_locate_between_m';


ALTER FUNCTION public.st_locate_between_measures(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7192 (class 0 OID 0)
-- Dependencies: 1479
-- Name: FUNCTION st_locate_between_measures(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) IS 'args: geomA, measure_start, measure_end - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.';


--
-- TOC entry 1480 (class 1255 OID 11286189)
-- Name: st_locatebetweenelevations(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_locatebetweenelevations(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ST_LocateBetweenElevations';


ALTER FUNCTION public.st_locatebetweenelevations(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7193 (class 0 OID 0)
-- Dependencies: 1480
-- Name: FUNCTION st_locatebetweenelevations(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_locatebetweenelevations(geometry, double precision, double precision) IS 'args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.';


--
-- TOC entry 1481 (class 1255 OID 11286190)
-- Name: st_longestline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_longestline(geometry, geometry) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_LongestLine(ST_ConvexHull($1), ST_ConvexHull($2))$_$;


ALTER FUNCTION public.st_longestline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7194 (class 0 OID 0)
-- Dependencies: 1481
-- Name: FUNCTION st_longestline(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_longestline(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.';


--
-- TOC entry 1482 (class 1255 OID 11286191)
-- Name: st_m(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_m(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_m_point';


ALTER FUNCTION public.st_m(geometry) OWNER TO postgres;

--
-- TOC entry 7195 (class 0 OID 0)
-- Dependencies: 1482
-- Name: FUNCTION st_m(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_m(geometry) IS 'args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 1483 (class 1255 OID 11286192)
-- Name: st_makebox2d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makebox2d(geometry, geometry) RETURNS box2d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX2DFLOAT4_construct';


ALTER FUNCTION public.st_makebox2d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7196 (class 0 OID 0)
-- Dependencies: 1483
-- Name: FUNCTION st_makebox2d(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makebox2d(geometry, geometry) IS 'args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.';


--
-- TOC entry 1484 (class 1255 OID 11286193)
-- Name: st_makebox3d(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makebox3d(geometry, geometry) RETURNS box3d
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_construct';


ALTER FUNCTION public.st_makebox3d(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7197 (class 0 OID 0)
-- Dependencies: 1484
-- Name: FUNCTION st_makebox3d(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makebox3d(geometry, geometry) IS 'args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.';


--
-- TOC entry 1485 (class 1255 OID 11286194)
-- Name: st_makeenvelope(double precision, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ST_MakeEnvelope';


ALTER FUNCTION public.st_makeenvelope(double precision, double precision, double precision, double precision, integer) OWNER TO postgres;

--
-- TOC entry 7198 (class 0 OID 0)
-- Dependencies: 1485
-- Name: FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) IS 'args: xmin, ymin, xmax, ymax, srid - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.';


--
-- TOC entry 1486 (class 1255 OID 11286195)
-- Name: st_makeline(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeline(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makeline_garray';


ALTER FUNCTION public.st_makeline(geometry[]) OWNER TO postgres;

--
-- TOC entry 7199 (class 0 OID 0)
-- Dependencies: 1486
-- Name: FUNCTION st_makeline(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makeline(geometry[]) IS 'args: point_array - Creates a Linestring from point geometries.';


--
-- TOC entry 1487 (class 1255 OID 11286196)
-- Name: st_makeline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makeline';


ALTER FUNCTION public.st_makeline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7200 (class 0 OID 0)
-- Dependencies: 1487
-- Name: FUNCTION st_makeline(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makeline(geometry, geometry) IS 'args: point1, point2 - Creates a Linestring from point geometries.';


--
-- TOC entry 1488 (class 1255 OID 11286197)
-- Name: st_makeline_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makeline_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makeline_garray';


ALTER FUNCTION public.st_makeline_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 1489 (class 1255 OID 11286198)
-- Name: st_makepoint(double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepoint(double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_makepoint(double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7201 (class 0 OID 0)
-- Dependencies: 1489
-- Name: FUNCTION st_makepoint(double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepoint(double precision, double precision) IS 'args: x, y - Creates a 2D,3DZ or 4D point geometry.';


--
-- TOC entry 1490 (class 1255 OID 11286199)
-- Name: st_makepoint(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepoint(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_makepoint(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7202 (class 0 OID 0)
-- Dependencies: 1490
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepoint(double precision, double precision, double precision) IS 'args: x, y, z - Creates a 2D,3DZ or 4D point geometry.';


--
-- TOC entry 1491 (class 1255 OID 11286200)
-- Name: st_makepoint(double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepoint(double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_makepoint(double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7203 (class 0 OID 0)
-- Dependencies: 1491
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) IS 'args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.';


--
-- TOC entry 1492 (class 1255 OID 11286201)
-- Name: st_makepointm(double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepointm(double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint3dm';


ALTER FUNCTION public.st_makepointm(double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7204 (class 0 OID 0)
-- Dependencies: 1492
-- Name: FUNCTION st_makepointm(double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepointm(double precision, double precision, double precision) IS 'args: x, y, m - Creates a point geometry with an x y and m coordinate.';


--
-- TOC entry 1493 (class 1255 OID 11286202)
-- Name: st_makepolygon(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepolygon(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.st_makepolygon(geometry) OWNER TO postgres;

--
-- TOC entry 7205 (class 0 OID 0)
-- Dependencies: 1493
-- Name: FUNCTION st_makepolygon(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepolygon(geometry) IS 'args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';


--
-- TOC entry 1494 (class 1255 OID 11286203)
-- Name: st_makepolygon(geometry, geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_makepolygon(geometry, geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoly';


ALTER FUNCTION public.st_makepolygon(geometry, geometry[]) OWNER TO postgres;

--
-- TOC entry 7206 (class 0 OID 0)
-- Dependencies: 1494
-- Name: FUNCTION st_makepolygon(geometry, geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_makepolygon(geometry, geometry[]) IS 'args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.';


--
-- TOC entry 1495 (class 1255 OID 11286204)
-- Name: st_maxdistance(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_maxdistance(geometry, geometry) RETURNS double precision
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT _ST_MaxDistance(ST_ConvexHull($1), ST_ConvexHull($2))$_$;


ALTER FUNCTION public.st_maxdistance(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7207 (class 0 OID 0)
-- Dependencies: 1495
-- Name: FUNCTION st_maxdistance(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_maxdistance(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.';


--
-- TOC entry 1496 (class 1255 OID 11286205)
-- Name: st_mem_size(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mem_size(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_mem_size';


ALTER FUNCTION public.st_mem_size(geometry) OWNER TO postgres;

--
-- TOC entry 7208 (class 0 OID 0)
-- Dependencies: 1496
-- Name: FUNCTION st_mem_size(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mem_size(geometry) IS 'args: geomA - Returns the amount of space (in bytes) the geometry takes.';


--
-- TOC entry 1497 (class 1255 OID 11286206)
-- Name: st_minimumboundingcircle(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_minimumboundingcircle(geometry) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_MinimumBoundingCircle($1, 48)$_$;


ALTER FUNCTION public.st_minimumboundingcircle(geometry) OWNER TO postgres;

--
-- TOC entry 7209 (class 0 OID 0)
-- Dependencies: 1497
-- Name: FUNCTION st_minimumboundingcircle(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_minimumboundingcircle(geometry) IS 'args: geomA - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.';


--
-- TOC entry 1498 (class 1255 OID 11286207)
-- Name: st_minimumboundingcircle(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) RETURNS geometry
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
	DECLARE
	hull GEOMETRY;
	ring GEOMETRY;
	center GEOMETRY;
	radius DOUBLE PRECISION;
	dist DOUBLE PRECISION;
	d DOUBLE PRECISION;
	idx1 integer;
	idx2 integer;
	l1 GEOMETRY;
	l2 GEOMETRY;
	p1 GEOMETRY;
	p2 GEOMETRY;
	a1 DOUBLE PRECISION;
	a2 DOUBLE PRECISION;


	BEGIN

	-- First compute the ConvexHull of the geometry
	hull = ST_ConvexHull(inputgeom);
	--A point really has no MBC
	IF ST_GeometryType(hull) = 'ST_Point' THEN
		RETURN hull;
	END IF;
	-- convert the hull perimeter to a linestring so we can manipulate individual points
	--If its already a linestring force it to a closed linestring
	ring = CASE WHEN ST_GeometryType(hull) = 'ST_LineString' THEN ST_AddPoint(hull, ST_StartPoint(hull)) ELSE ST_ExteriorRing(hull) END;

	dist = 0;
	-- Brute Force - check every pair
	FOR i in 1 .. (ST_NumPoints(ring)-2)
		LOOP
			FOR j in i .. (ST_NumPoints(ring)-1)
				LOOP
				d = ST_Distance(ST_PointN(ring,i),ST_PointN(ring,j));
				-- Check the distance and update if larger
				IF (d > dist) THEN
					dist = d;
					idx1 = i;
					idx2 = j;
				END IF;
			END LOOP;
		END LOOP;

	-- We now have the diameter of the convex hull.  The following line returns it if desired.
	-- RETURN MakeLine(PointN(ring,idx1),PointN(ring,idx2));

	-- Now for the Minimum Bounding Circle.  Since we know the two points furthest from each
	-- other, the MBC must go through those two points. Start with those points as a diameter of a circle.

	-- The radius is half the distance between them and the center is midway between them
	radius = ST_Distance(ST_PointN(ring,idx1),ST_PointN(ring,idx2)) / 2.0;
	center = ST_Line_interpolate_point(ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2)),0.5);

	-- Loop through each vertex and check if the distance from the center to the point
	-- is greater than the current radius.
	FOR k in 1 .. (ST_NumPoints(ring)-1)
		LOOP
		IF(k <> idx1 and k <> idx2) THEN
			dist = ST_Distance(center,ST_PointN(ring,k));
			IF (dist > radius) THEN
				-- We have to expand the circle.  The new circle must pass trhough
				-- three points - the two original diameters and this point.

				-- Draw a line from the first diameter to this point
				l1 = ST_Makeline(ST_PointN(ring,idx1),ST_PointN(ring,k));
				-- Compute the midpoint
				p1 = ST_line_interpolate_point(l1,0.5);
				-- Rotate the line 90 degrees around the midpoint (perpendicular bisector)
				l1 = ST_Translate(ST_Rotate(ST_Translate(l1,-X(p1),-Y(p1)),pi()/2),X(p1),Y(p1));
				--  Compute the azimuth of the bisector
				a1 = ST_Azimuth(ST_PointN(l1,1),ST_PointN(l1,2));
				--  Extend the line in each direction the new computed distance to insure they will intersect
				l1 = ST_AddPoint(l1,ST_Makepoint(X(ST_PointN(l1,2))+sin(a1)*dist,Y(ST_PointN(l1,2))+cos(a1)*dist),-1);
				l1 = ST_AddPoint(l1,ST_Makepoint(X(ST_PointN(l1,1))-sin(a1)*dist,Y(ST_PointN(l1,1))-cos(a1)*dist),0);

				-- Repeat for the line from the point to the other diameter point
				l2 = ST_Makeline(ST_PointN(ring,idx2),ST_PointN(ring,k));
				p2 = ST_Line_interpolate_point(l2,0.5);
				l2 = ST_Translate(ST_Rotate(ST_Translate(l2,-X(p2),-Y(p2)),pi()/2),X(p2),Y(p2));
				a2 = ST_Azimuth(ST_PointN(l2,1),ST_PointN(l2,2));
				l2 = ST_AddPoint(l2,ST_Makepoint(X(ST_PointN(l2,2))+sin(a2)*dist,Y(ST_PointN(l2,2))+cos(a2)*dist),-1);
				l2 = ST_AddPoint(l2,ST_Makepoint(X(ST_PointN(l2,1))-sin(a2)*dist,Y(ST_PointN(l2,1))-cos(a2)*dist),0);

				-- The new center is the intersection of the two bisectors
				center = ST_Intersection(l1,l2);
				-- The new radius is the distance to any of the three points
				radius = ST_Distance(center,ST_PointN(ring,idx1));
			END IF;
		END IF;
		END LOOP;
	--DONE!!  Return the MBC via the buffer command
	RETURN ST_Buffer(center,radius,segs_per_quarter);

	END;
$$;


ALTER FUNCTION public.st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) OWNER TO postgres;

--
-- TOC entry 7210 (class 0 OID 0)
-- Dependencies: 1498
-- Name: FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) IS 'args: geomA, num_segs_per_qt_circ - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.';


--
-- TOC entry 1499 (class 1255 OID 11286209)
-- Name: st_mlinefromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromtext(text) OWNER TO postgres;

--
-- TOC entry 7211 (class 0 OID 0)
-- Dependencies: 1499
-- Name: FUNCTION st_mlinefromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mlinefromtext(text) IS 'args: WKT - Return a specified ST_MultiLineString value from WKT representation.';


--
-- TOC entry 1500 (class 1255 OID 11286210)
-- Name: st_mlinefromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7212 (class 0 OID 0)
-- Dependencies: 1500
-- Name: FUNCTION st_mlinefromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mlinefromtext(text, integer) IS 'args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.';


--
-- TOC entry 1501 (class 1255 OID 11286211)
-- Name: st_mlinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1502 (class 1255 OID 11286212)
-- Name: st_mlinefromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mlinefromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mlinefromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1503 (class 1255 OID 11286213)
-- Name: st_mpointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromtext(text) OWNER TO postgres;

--
-- TOC entry 7213 (class 0 OID 0)
-- Dependencies: 1503
-- Name: FUNCTION st_mpointfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpointfromtext(text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1504 (class 1255 OID 11286214)
-- Name: st_mpointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN GeomFromText($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7214 (class 0 OID 0)
-- Dependencies: 1504
-- Name: FUNCTION st_mpointfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpointfromtext(text, integer) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1505 (class 1255 OID 11286215)
-- Name: st_mpointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1506 (class 1255 OID 11286216)
-- Name: st_mpointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1507 (class 1255 OID 11286217)
-- Name: st_mpolyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromtext(text) OWNER TO postgres;

--
-- TOC entry 7215 (class 0 OID 0)
-- Dependencies: 1507
-- Name: FUNCTION st_mpolyfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpolyfromtext(text) IS 'args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1508 (class 1255 OID 11286218)
-- Name: st_mpolyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7216 (class 0 OID 0)
-- Dependencies: 1508
-- Name: FUNCTION st_mpolyfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_mpolyfromtext(text, integer) IS 'args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1509 (class 1255 OID 11286219)
-- Name: st_mpolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1510 (class 1255 OID 11286220)
-- Name: st_mpolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_mpolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_mpolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1511 (class 1255 OID 11286221)
-- Name: st_multi(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multi(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_force_multi';


ALTER FUNCTION public.st_multi(geometry) OWNER TO postgres;

--
-- TOC entry 7217 (class 0 OID 0)
-- Dependencies: 1511
-- Name: FUNCTION st_multi(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_multi(geometry) IS 'args: g1 - Returns the geometry as a MULTI* geometry. If the geometry is already a MULTI*, it is returned unchanged.';


--
-- TOC entry 1512 (class 1255 OID 11286222)
-- Name: st_multilinefromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multilinefromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multilinefromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1513 (class 1255 OID 11286223)
-- Name: st_multilinestringfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multilinestringfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_MLineFromText($1)$_$;


ALTER FUNCTION public.st_multilinestringfromtext(text) OWNER TO postgres;

--
-- TOC entry 1514 (class 1255 OID 11286224)
-- Name: st_multilinestringfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multilinestringfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MLineFromText($1, $2)$_$;


ALTER FUNCTION public.st_multilinestringfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1515 (class 1255 OID 11286225)
-- Name: st_multipointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPointFromText($1)$_$;


ALTER FUNCTION public.st_multipointfromtext(text) OWNER TO postgres;

--
-- TOC entry 1516 (class 1255 OID 11286226)
-- Name: st_multipointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1517 (class 1255 OID 11286227)
-- Name: st_multipointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1518 (class 1255 OID 11286228)
-- Name: st_multipolyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipolyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1519 (class 1255 OID 11286229)
-- Name: st_multipolyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_multipolyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1520 (class 1255 OID 11286230)
-- Name: st_multipolygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1)$_$;


ALTER FUNCTION public.st_multipolygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 1521 (class 1255 OID 11286231)
-- Name: st_multipolygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_multipolygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT MPolyFromText($1, $2)$_$;


ALTER FUNCTION public.st_multipolygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1522 (class 1255 OID 11286232)
-- Name: st_npoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_npoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_npoints';


ALTER FUNCTION public.st_npoints(geometry) OWNER TO postgres;

--
-- TOC entry 7218 (class 0 OID 0)
-- Dependencies: 1522
-- Name: FUNCTION st_npoints(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_npoints(geometry) IS 'args: g1 - Return the number of points (vertexes) in a geometry.';


--
-- TOC entry 1523 (class 1255 OID 11286233)
-- Name: st_nrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_nrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_nrings';


ALTER FUNCTION public.st_nrings(geometry) OWNER TO postgres;

--
-- TOC entry 7219 (class 0 OID 0)
-- Dependencies: 1523
-- Name: FUNCTION st_nrings(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_nrings(geometry) IS 'args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.';


--
-- TOC entry 1524 (class 1255 OID 11286234)
-- Name: st_numgeometries(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numgeometries(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numgeometries_collection';


ALTER FUNCTION public.st_numgeometries(geometry) OWNER TO postgres;

--
-- TOC entry 7220 (class 0 OID 0)
-- Dependencies: 1524
-- Name: FUNCTION st_numgeometries(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numgeometries(geometry) IS 'args: a_multi_or_geomcollection - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, otherwise return NULL.';


--
-- TOC entry 1525 (class 1255 OID 11286235)
-- Name: st_numinteriorring(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numinteriorring(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.st_numinteriorring(geometry) OWNER TO postgres;

--
-- TOC entry 7221 (class 0 OID 0)
-- Dependencies: 1525
-- Name: FUNCTION st_numinteriorring(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numinteriorring(geometry) IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. Synonym to ST_NumInteriorRings.';


--
-- TOC entry 1526 (class 1255 OID 11286236)
-- Name: st_numinteriorrings(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numinteriorrings(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numinteriorrings_polygon';


ALTER FUNCTION public.st_numinteriorrings(geometry) OWNER TO postgres;

--
-- TOC entry 7222 (class 0 OID 0)
-- Dependencies: 1526
-- Name: FUNCTION st_numinteriorrings(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numinteriorrings(geometry) IS 'args: a_polygon - Return the number of interior rings of the first polygon in the geometry. This will work with both POLYGON and MULTIPOLYGON types but only looks at the first polygon. Return NULL if there is no polygon in the geometry.';


--
-- TOC entry 1527 (class 1255 OID 11286237)
-- Name: st_numpoints(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_numpoints(geometry) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_numpoints_linestring';


ALTER FUNCTION public.st_numpoints(geometry) OWNER TO postgres;

--
-- TOC entry 7223 (class 0 OID 0)
-- Dependencies: 1527
-- Name: FUNCTION st_numpoints(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_numpoints(geometry) IS 'args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.';


--
-- TOC entry 1528 (class 1255 OID 11286238)
-- Name: st_orderingequals(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_orderingequals(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ 
	SELECT $1 ~= $2 AND _ST_OrderingEquals($1, $2)
	$_$;


ALTER FUNCTION public.st_orderingequals(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7224 (class 0 OID 0)
-- Dependencies: 1528
-- Name: FUNCTION st_orderingequals(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_orderingequals(geometry, geometry) IS 'args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.';


--
-- TOC entry 1529 (class 1255 OID 11286239)
-- Name: st_overlaps(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_overlaps(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Overlaps($1,$2)$_$;


ALTER FUNCTION public.st_overlaps(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7225 (class 0 OID 0)
-- Dependencies: 1529
-- Name: FUNCTION st_overlaps(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_overlaps(geometry, geometry) IS 'args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.';


--
-- TOC entry 1530 (class 1255 OID 11286240)
-- Name: st_perimeter(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_perimeter(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_perimeter2d_poly';


ALTER FUNCTION public.st_perimeter(geometry) OWNER TO postgres;

--
-- TOC entry 7226 (class 0 OID 0)
-- Dependencies: 1530
-- Name: FUNCTION st_perimeter(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_perimeter(geometry) IS 'args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface value. (Polygon, Multipolygon)';


--
-- TOC entry 1531 (class 1255 OID 11286241)
-- Name: st_perimeter2d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_perimeter2d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_perimeter2d_poly';


ALTER FUNCTION public.st_perimeter2d(geometry) OWNER TO postgres;

--
-- TOC entry 7227 (class 0 OID 0)
-- Dependencies: 1531
-- Name: FUNCTION st_perimeter2d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_perimeter2d(geometry) IS 'args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.';


--
-- TOC entry 1532 (class 1255 OID 11286242)
-- Name: st_perimeter3d(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_perimeter3d(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_perimeter_poly';


ALTER FUNCTION public.st_perimeter3d(geometry) OWNER TO postgres;

--
-- TOC entry 7228 (class 0 OID 0)
-- Dependencies: 1532
-- Name: FUNCTION st_perimeter3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_perimeter3d(geometry) IS 'args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.';


--
-- TOC entry 1533 (class 1255 OID 11286243)
-- Name: st_point(double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_point(double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_makepoint';


ALTER FUNCTION public.st_point(double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7229 (class 0 OID 0)
-- Dependencies: 1533
-- Name: FUNCTION st_point(double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_point(double precision, double precision) IS 'args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.';


--
-- TOC entry 1534 (class 1255 OID 11286244)
-- Name: st_point_inside_circle(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_inside_circle_point';


ALTER FUNCTION public.st_point_inside_circle(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7230 (class 0 OID 0)
-- Dependencies: 1534
-- Name: FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) IS 'args: a_point, center_x, center_y, radius - Is the point geometry insert circle defined by center_x, center_y , radius';


--
-- TOC entry 1535 (class 1255 OID 11286245)
-- Name: st_pointfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromtext(text) OWNER TO postgres;

--
-- TOC entry 7231 (class 0 OID 0)
-- Dependencies: 1535
-- Name: FUNCTION st_pointfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointfromtext(text) IS 'args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';


--
-- TOC entry 1536 (class 1255 OID 11286246)
-- Name: st_pointfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7232 (class 0 OID 0)
-- Dependencies: 1536
-- Name: FUNCTION st_pointfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointfromtext(text, integer) IS 'args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.';


--
-- TOC entry 1537 (class 1255 OID 11286247)
-- Name: st_pointfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1538 (class 1255 OID 11286248)
-- Name: st_pointfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_pointfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1539 (class 1255 OID 11286249)
-- Name: st_pointn(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointn(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_pointn_linestring';


ALTER FUNCTION public.st_pointn(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7233 (class 0 OID 0)
-- Dependencies: 1539
-- Name: FUNCTION st_pointn(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointn(geometry, integer) IS 'args: a_linestring, n - Return the Nth point in the first linestring or circular linestring in the geometry. Return NULL if there is no linestring in the geometry.';


--
-- TOC entry 1540 (class 1255 OID 11286250)
-- Name: st_pointonsurface(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_pointonsurface(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'pointonsurface';


ALTER FUNCTION public.st_pointonsurface(geometry) OWNER TO postgres;

--
-- TOC entry 7234 (class 0 OID 0)
-- Dependencies: 1540
-- Name: FUNCTION st_pointonsurface(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_pointonsurface(geometry) IS 'args: g1 - Returns a POINT guaranteed to lie on the surface.';


--
-- TOC entry 1541 (class 1255 OID 11286251)
-- Name: st_polyfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromtext(text) OWNER TO postgres;

--
-- TOC entry 1542 (class 1255 OID 11286252)
-- Name: st_polyfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 1543 (class 1255 OID 11286253)
-- Name: st_polyfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1544 (class 1255 OID 11286254)
-- Name: st_polyfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polyfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polyfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1545 (class 1255 OID 11286255)
-- Name: st_polygon(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygon(geometry, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$ 
	SELECT setSRID(makepolygon($1), $2)
	$_$;


ALTER FUNCTION public.st_polygon(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7235 (class 0 OID 0)
-- Dependencies: 1545
-- Name: FUNCTION st_polygon(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygon(geometry, integer) IS 'args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.';


--
-- TOC entry 1546 (class 1255 OID 11286256)
-- Name: st_polygonfromtext(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromtext(text) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_PolyFromText($1)$_$;


ALTER FUNCTION public.st_polygonfromtext(text) OWNER TO postgres;

--
-- TOC entry 7236 (class 0 OID 0)
-- Dependencies: 1546
-- Name: FUNCTION st_polygonfromtext(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygonfromtext(text) IS 'args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1547 (class 1255 OID 11286257)
-- Name: st_polygonfromtext(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromtext(text, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT PolyFromText($1, $2)$_$;


ALTER FUNCTION public.st_polygonfromtext(text, integer) OWNER TO postgres;

--
-- TOC entry 7237 (class 0 OID 0)
-- Dependencies: 1547
-- Name: FUNCTION st_polygonfromtext(text, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygonfromtext(text, integer) IS 'args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to -1.';


--
-- TOC entry 1548 (class 1255 OID 11286258)
-- Name: st_polygonfromwkb(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromwkb(bytea) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = 'POLYGON'
	THEN GeomFromWKB($1)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polygonfromwkb(bytea) OWNER TO postgres;

--
-- TOC entry 1549 (class 1255 OID 11286259)
-- Name: st_polygonfromwkb(bytea, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonfromwkb(bytea, integer) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$_$;


ALTER FUNCTION public.st_polygonfromwkb(bytea, integer) OWNER TO postgres;

--
-- TOC entry 1550 (class 1255 OID 11286260)
-- Name: st_polygonize(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonize(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'polygonize_garray';


ALTER FUNCTION public.st_polygonize(geometry[]) OWNER TO postgres;

--
-- TOC entry 7238 (class 0 OID 0)
-- Dependencies: 1550
-- Name: FUNCTION st_polygonize(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_polygonize(geometry[]) IS 'args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.';


--
-- TOC entry 1551 (class 1255 OID 11286261)
-- Name: st_polygonize_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_polygonize_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'polygonize_garray';


ALTER FUNCTION public.st_polygonize_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 1552 (class 1255 OID 11286262)
-- Name: st_postgis_gist_joinsel(internal, oid, internal, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_postgis_gist_joinsel(internal, oid, internal, smallint) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_joinsel';


ALTER FUNCTION public.st_postgis_gist_joinsel(internal, oid, internal, smallint) OWNER TO postgres;

--
-- TOC entry 1553 (class 1255 OID 11286263)
-- Name: st_postgis_gist_sel(internal, oid, internal, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_postgis_gist_sel(internal, oid, internal, integer) RETURNS double precision
    LANGUAGE c
    AS '$libdir/postgis-1.5', 'LWGEOM_gist_sel';


ALTER FUNCTION public.st_postgis_gist_sel(internal, oid, internal, integer) OWNER TO postgres;

--
-- TOC entry 1554 (class 1255 OID 11286264)
-- Name: st_relate(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_relate(geometry, geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'relate_full';


ALTER FUNCTION public.st_relate(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7239 (class 0 OID 0)
-- Dependencies: 1554
-- Name: FUNCTION st_relate(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_relate(geometry, geometry) IS 'args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';


--
-- TOC entry 1555 (class 1255 OID 11286265)
-- Name: st_relate(geometry, geometry, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_relate(geometry, geometry, text) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'relate_pattern';


ALTER FUNCTION public.st_relate(geometry, geometry, text) OWNER TO postgres;

--
-- TOC entry 7240 (class 0 OID 0)
-- Dependencies: 1555
-- Name: FUNCTION st_relate(geometry, geometry, text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_relate(geometry, geometry, text) IS 'args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.';


--
-- TOC entry 1556 (class 1255 OID 11286266)
-- Name: st_removepoint(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_removepoint(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_removepoint';


ALTER FUNCTION public.st_removepoint(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7241 (class 0 OID 0)
-- Dependencies: 1556
-- Name: FUNCTION st_removepoint(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_removepoint(geometry, integer) IS 'args: linestring, offset - Removes point from a linestring. Offset is 0-based.';


--
-- TOC entry 1557 (class 1255 OID 11286267)
-- Name: st_reverse(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_reverse(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_reverse';


ALTER FUNCTION public.st_reverse(geometry) OWNER TO postgres;

--
-- TOC entry 7242 (class 0 OID 0)
-- Dependencies: 1557
-- Name: FUNCTION st_reverse(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_reverse(geometry) IS 'args: g1 - Returns the geometry with vertex order reversed.';


--
-- TOC entry 1558 (class 1255 OID 11286268)
-- Name: st_rotate(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotate(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT rotateZ($1, $2)$_$;


ALTER FUNCTION public.st_rotate(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7243 (class 0 OID 0)
-- Dependencies: 1558
-- Name: FUNCTION st_rotate(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotate(geometry, double precision) IS 'args: geomA, rotZRadians - This is a synonym for ST_RotateZ';


--
-- TOC entry 1559 (class 1255 OID 11286269)
-- Name: st_rotatex(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotatex(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$_$;


ALTER FUNCTION public.st_rotatex(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7244 (class 0 OID 0)
-- Dependencies: 1559
-- Name: FUNCTION st_rotatex(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotatex(geometry, double precision) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.';


--
-- TOC entry 1560 (class 1255 OID 11286270)
-- Name: st_rotatey(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotatey(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$_$;


ALTER FUNCTION public.st_rotatey(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7245 (class 0 OID 0)
-- Dependencies: 1560
-- Name: FUNCTION st_rotatey(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotatey(geometry, double precision) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.';


--
-- TOC entry 1561 (class 1255 OID 11286271)
-- Name: st_rotatez(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_rotatez(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$_$;


ALTER FUNCTION public.st_rotatez(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7246 (class 0 OID 0)
-- Dependencies: 1561
-- Name: FUNCTION st_rotatez(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_rotatez(geometry, double precision) IS 'args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.';


--
-- TOC entry 1562 (class 1255 OID 11286272)
-- Name: st_scale(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_scale(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT scale($1, $2, $3, 1)$_$;


ALTER FUNCTION public.st_scale(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7247 (class 0 OID 0)
-- Dependencies: 1562
-- Name: FUNCTION st_scale(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_scale(geometry, double precision, double precision) IS 'args: geomA, XFactor, YFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';


--
-- TOC entry 1563 (class 1255 OID 11286274)
-- Name: st_scale(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_scale(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$_$;


ALTER FUNCTION public.st_scale(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7248 (class 0 OID 0)
-- Dependencies: 1563
-- Name: FUNCTION st_scale(geometry, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_scale(geometry, double precision, double precision, double precision) IS 'args: geomA, XFactor, YFactor, ZFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).';


--
-- TOC entry 1564 (class 1255 OID 11286275)
-- Name: st_segmentize(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_segmentize(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_segmentize2d';


ALTER FUNCTION public.st_segmentize(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7249 (class 0 OID 0)
-- Dependencies: 1564
-- Name: FUNCTION st_segmentize(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_segmentize(geometry, double precision) IS 'args: geomA, max_length - Return a modified geometry having no segment longer than the given distance. Distance computation is performed in 2d only.';


--
-- TOC entry 1565 (class 1255 OID 11286276)
-- Name: st_setfactor(chip, real); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_setfactor(chip, real) RETURNS chip
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_setFactor';


ALTER FUNCTION public.st_setfactor(chip, real) OWNER TO postgres;

--
-- TOC entry 1566 (class 1255 OID 11286277)
-- Name: st_setpoint(geometry, integer, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_setpoint(geometry, integer, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_setpoint_linestring';


ALTER FUNCTION public.st_setpoint(geometry, integer, geometry) OWNER TO postgres;

--
-- TOC entry 7250 (class 0 OID 0)
-- Dependencies: 1566
-- Name: FUNCTION st_setpoint(geometry, integer, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_setpoint(geometry, integer, geometry) IS 'args: linestring, zerobasedposition, point - Replace point N of linestring with given point. Index is 0-based.';


--
-- TOC entry 1567 (class 1255 OID 11286278)
-- Name: st_setsrid(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_setsrid(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_setSRID';


ALTER FUNCTION public.st_setsrid(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7251 (class 0 OID 0)
-- Dependencies: 1567
-- Name: FUNCTION st_setsrid(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_setsrid(geometry, integer) IS 'args: geom, srid - Sets the SRID on a geometry to a particular integer value.';


--
-- TOC entry 1568 (class 1255 OID 11286279)
-- Name: st_shift_longitude(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_shift_longitude(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_longitude_shift';


ALTER FUNCTION public.st_shift_longitude(geometry) OWNER TO postgres;

--
-- TOC entry 7252 (class 0 OID 0)
-- Dependencies: 1568
-- Name: FUNCTION st_shift_longitude(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_shift_longitude(geometry) IS 'args: geomA - Reads every point/vertex in every component of every feature in a geometry, and if the longitude coordinate is <0, adds 360 to it. The result would be a 0-360 version of the data to be plotted in a 180 centric map';


--
-- TOC entry 1569 (class 1255 OID 11286280)
-- Name: st_shortestline(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_shortestline(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_shortestline2d';


ALTER FUNCTION public.st_shortestline(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7253 (class 0 OID 0)
-- Dependencies: 1569
-- Name: FUNCTION st_shortestline(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_shortestline(geometry, geometry) IS 'args: g1, g2 - Returns the 2-dimensional shortest line between two geometries';


--
-- TOC entry 1570 (class 1255 OID 11286281)
-- Name: st_simplify(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_simplify(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_simplify2d';


ALTER FUNCTION public.st_simplify(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7254 (class 0 OID 0)
-- Dependencies: 1570
-- Name: FUNCTION st_simplify(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_simplify(geometry, double precision) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peuker algorithm.';


--
-- TOC entry 1571 (class 1255 OID 11286282)
-- Name: st_simplifypreservetopology(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_simplifypreservetopology(geometry, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT COST 100
    AS '$libdir/postgis-1.5', 'topologypreservesimplify';


ALTER FUNCTION public.st_simplifypreservetopology(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7255 (class 0 OID 0)
-- Dependencies: 1571
-- Name: FUNCTION st_simplifypreservetopology(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_simplifypreservetopology(geometry, double precision) IS 'args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peuker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.';


--
-- TOC entry 1572 (class 1255 OID 11286283)
-- Name: st_snaptogrid(geometry, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_SnapToGrid($1, 0, 0, $2, $2)$_$;


ALTER FUNCTION public.st_snaptogrid(geometry, double precision) OWNER TO postgres;

--
-- TOC entry 7256 (class 0 OID 0)
-- Dependencies: 1572
-- Name: FUNCTION st_snaptogrid(geometry, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, double precision) IS 'args: geomA, size - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 1573 (class 1255 OID 11286284)
-- Name: st_snaptogrid(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT ST_SnapToGrid($1, 0, 0, $2, $3)$_$;


ALTER FUNCTION public.st_snaptogrid(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7257 (class 0 OID 0)
-- Dependencies: 1573
-- Name: FUNCTION st_snaptogrid(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, double precision, double precision) IS 'args: geomA, sizeX, sizeY - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 1574 (class 1255 OID 11286285)
-- Name: st_snaptogrid(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_snaptogrid';


ALTER FUNCTION public.st_snaptogrid(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7258 (class 0 OID 0)
-- Dependencies: 1574
-- Name: FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) IS 'args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 1575 (class 1255 OID 11286286)
-- Name: st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_snaptogrid_pointoff';


ALTER FUNCTION public.st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7259 (class 0 OID 0)
-- Dependencies: 1575
-- Name: FUNCTION st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision) IS 'args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to the grid defined by its origin and cell size. Remove consecutive points falling on the same cell, eventually returning NULL if output points are not enough to define a geometry of the given type. Collapsed geometries in a collection are stripped from it. Useful for reducing precision.';


--
-- TOC entry 1576 (class 1255 OID 11286287)
-- Name: st_spheroid_in(cstring); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_spheroid_in(cstring) RETURNS spheroid
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ellipsoid_in';


ALTER FUNCTION public.st_spheroid_in(cstring) OWNER TO postgres;

--
-- TOC entry 1577 (class 1255 OID 11286288)
-- Name: st_spheroid_out(spheroid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_spheroid_out(spheroid) RETURNS cstring
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'ellipsoid_out';


ALTER FUNCTION public.st_spheroid_out(spheroid) OWNER TO postgres;

--
-- TOC entry 1578 (class 1255 OID 11286289)
-- Name: st_srid(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_srid(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getSRID';


ALTER FUNCTION public.st_srid(chip) OWNER TO postgres;

--
-- TOC entry 1579 (class 1255 OID 11286290)
-- Name: st_startpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_startpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_startpoint_linestring';


ALTER FUNCTION public.st_startpoint(geometry) OWNER TO postgres;

--
-- TOC entry 7260 (class 0 OID 0)
-- Dependencies: 1579
-- Name: FUNCTION st_startpoint(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_startpoint(geometry) IS 'args: geomA - Returns the first point of a LINESTRING geometry as a POINT.';


--
-- TOC entry 1580 (class 1255 OID 11286291)
-- Name: st_summary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_summary(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_summary';


ALTER FUNCTION public.st_summary(geometry) OWNER TO postgres;

--
-- TOC entry 7261 (class 0 OID 0)
-- Dependencies: 1580
-- Name: FUNCTION st_summary(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_summary(geometry) IS 'args: g - Returns a text summary of the contents of the ST_Geometry.';


--
-- TOC entry 1581 (class 1255 OID 11286292)
-- Name: st_symdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_symdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'symdifference';


ALTER FUNCTION public.st_symdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7262 (class 0 OID 0)
-- Dependencies: 1581
-- Name: FUNCTION st_symdifference(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_symdifference(geometry, geometry) IS 'args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).';


--
-- TOC entry 1582 (class 1255 OID 11286293)
-- Name: st_symmetricdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_symmetricdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'symdifference';


ALTER FUNCTION public.st_symmetricdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1583 (class 1255 OID 11286294)
-- Name: st_text(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_text(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_text';


ALTER FUNCTION public.st_text(geometry) OWNER TO postgres;

--
-- TOC entry 1584 (class 1255 OID 11286295)
-- Name: st_touches(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_touches(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Touches($1,$2)$_$;


ALTER FUNCTION public.st_touches(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7263 (class 0 OID 0)
-- Dependencies: 1584
-- Name: FUNCTION st_touches(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_touches(geometry, geometry) IS 'args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.';


--
-- TOC entry 1585 (class 1255 OID 11286296)
-- Name: st_transform(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_transform(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'transform';


ALTER FUNCTION public.st_transform(geometry, integer) OWNER TO postgres;

--
-- TOC entry 7264 (class 0 OID 0)
-- Dependencies: 1585
-- Name: FUNCTION st_transform(geometry, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_transform(geometry, integer) IS 'args: g1, srid - Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter.';


--
-- TOC entry 1586 (class 1255 OID 11286297)
-- Name: st_translate(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_translate(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT translate($1, $2, $3, 0)$_$;


ALTER FUNCTION public.st_translate(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7265 (class 0 OID 0)
-- Dependencies: 1586
-- Name: FUNCTION st_translate(geometry, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_translate(geometry, double precision, double precision) IS 'args: g1, deltax, deltay - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';


--
-- TOC entry 1587 (class 1255 OID 11286298)
-- Name: st_translate(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_translate(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$_$;


ALTER FUNCTION public.st_translate(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7266 (class 0 OID 0)
-- Dependencies: 1587
-- Name: FUNCTION st_translate(geometry, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_translate(geometry, double precision, double precision, double precision) IS 'args: g1, deltax, deltay, deltaz - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).';


--
-- TOC entry 1588 (class 1255 OID 11286299)
-- Name: st_transscale(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$_$;


ALTER FUNCTION public.st_transscale(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 7267 (class 0 OID 0)
-- Dependencies: 1588
-- Name: FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) IS 'args: geomA, deltaX, deltaY, XFactor, YFactor - Translates the geometry using the deltaX and deltaY args, then scales it using the XFactor, YFactor args, working in 2D only.';


--
-- TOC entry 1589 (class 1255 OID 11286300)
-- Name: st_union(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_union(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'pgis_union_geometry_array';


ALTER FUNCTION public.st_union(geometry[]) OWNER TO postgres;

--
-- TOC entry 7268 (class 0 OID 0)
-- Dependencies: 1589
-- Name: FUNCTION st_union(geometry[]); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_union(geometry[]) IS 'args: g1_array - Returns a geometry that represents the point set union of the Geometries.';


--
-- TOC entry 1590 (class 1255 OID 11286301)
-- Name: st_union(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_union(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'geomunion';


ALTER FUNCTION public.st_union(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7269 (class 0 OID 0)
-- Dependencies: 1590
-- Name: FUNCTION st_union(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_union(geometry, geometry) IS 'args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.';


--
-- TOC entry 1591 (class 1255 OID 11286302)
-- Name: st_unite_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_unite_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'pgis_union_geometry_array';


ALTER FUNCTION public.st_unite_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 1592 (class 1255 OID 11286303)
-- Name: st_width(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_width(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getWidth';


ALTER FUNCTION public.st_width(chip) OWNER TO postgres;

--
-- TOC entry 1593 (class 1255 OID 11286304)
-- Name: st_within(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_within(geometry, geometry) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT $1 && $2 AND _ST_Within($1,$2)$_$;


ALTER FUNCTION public.st_within(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 7270 (class 0 OID 0)
-- Dependencies: 1593
-- Name: FUNCTION st_within(geometry, geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_within(geometry, geometry) IS 'args: A, B - Returns true if the geometry A is completely inside geometry B';


--
-- TOC entry 1594 (class 1255 OID 11286305)
-- Name: st_wkbtosql(bytea); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_wkbtosql(bytea) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_WKB';


ALTER FUNCTION public.st_wkbtosql(bytea) OWNER TO postgres;

--
-- TOC entry 7271 (class 0 OID 0)
-- Dependencies: 1594
-- Name: FUNCTION st_wkbtosql(bytea); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_wkbtosql(bytea) IS 'args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid';


--
-- TOC entry 1595 (class 1255 OID 11286306)
-- Name: st_wkttosql(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_wkttosql(text) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_from_text';


ALTER FUNCTION public.st_wkttosql(text) OWNER TO postgres;

--
-- TOC entry 7272 (class 0 OID 0)
-- Dependencies: 1595
-- Name: FUNCTION st_wkttosql(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_wkttosql(text) IS 'args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText';


--
-- TOC entry 1596 (class 1255 OID 11286307)
-- Name: st_x(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_x(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_x_point';


ALTER FUNCTION public.st_x(geometry) OWNER TO postgres;

--
-- TOC entry 7273 (class 0 OID 0)
-- Dependencies: 1596
-- Name: FUNCTION st_x(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_x(geometry) IS 'args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 1597 (class 1255 OID 11286308)
-- Name: st_xmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_xmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_xmax';


ALTER FUNCTION public.st_xmax(box3d) OWNER TO postgres;

--
-- TOC entry 7274 (class 0 OID 0)
-- Dependencies: 1597
-- Name: FUNCTION st_xmax(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_xmax(box3d) IS 'args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 1598 (class 1255 OID 11286309)
-- Name: st_xmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_xmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_xmin';


ALTER FUNCTION public.st_xmin(box3d) OWNER TO postgres;

--
-- TOC entry 7275 (class 0 OID 0)
-- Dependencies: 1598
-- Name: FUNCTION st_xmin(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_xmin(box3d) IS 'args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 1599 (class 1255 OID 11286310)
-- Name: st_y(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_y(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_y_point';


ALTER FUNCTION public.st_y(geometry) OWNER TO postgres;

--
-- TOC entry 7276 (class 0 OID 0)
-- Dependencies: 1599
-- Name: FUNCTION st_y(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_y(geometry) IS 'args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 1600 (class 1255 OID 11286311)
-- Name: st_ymax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ymax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_ymax';


ALTER FUNCTION public.st_ymax(box3d) OWNER TO postgres;

--
-- TOC entry 7277 (class 0 OID 0)
-- Dependencies: 1600
-- Name: FUNCTION st_ymax(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ymax(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 1601 (class 1255 OID 11286312)
-- Name: st_ymin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_ymin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_ymin';


ALTER FUNCTION public.st_ymin(box3d) OWNER TO postgres;

--
-- TOC entry 7278 (class 0 OID 0)
-- Dependencies: 1601
-- Name: FUNCTION st_ymin(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_ymin(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 1602 (class 1255 OID 11286313)
-- Name: st_z(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_z(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_z_point';


ALTER FUNCTION public.st_z(geometry) OWNER TO postgres;

--
-- TOC entry 7279 (class 0 OID 0)
-- Dependencies: 1602
-- Name: FUNCTION st_z(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_z(geometry) IS 'args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.';


--
-- TOC entry 1603 (class 1255 OID 11286314)
-- Name: st_zmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_zmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_zmax';


ALTER FUNCTION public.st_zmax(box3d) OWNER TO postgres;

--
-- TOC entry 7280 (class 0 OID 0)
-- Dependencies: 1603
-- Name: FUNCTION st_zmax(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_zmax(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 1604 (class 1255 OID 11286315)
-- Name: st_zmflag(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_zmflag(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_zmflag';


ALTER FUNCTION public.st_zmflag(geometry) OWNER TO postgres;

--
-- TOC entry 7281 (class 0 OID 0)
-- Dependencies: 1604
-- Name: FUNCTION st_zmflag(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_zmflag(geometry) IS 'args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.';


--
-- TOC entry 1605 (class 1255 OID 11286316)
-- Name: st_zmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION st_zmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_zmin';


ALTER FUNCTION public.st_zmin(box3d) OWNER TO postgres;

--
-- TOC entry 7282 (class 0 OID 0)
-- Dependencies: 1605
-- Name: FUNCTION st_zmin(box3d); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION st_zmin(box3d) IS 'args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.';


--
-- TOC entry 1606 (class 1255 OID 11286317)
-- Name: startpoint(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION startpoint(geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_startpoint_linestring';


ALTER FUNCTION public.startpoint(geometry) OWNER TO postgres;

--
-- TOC entry 1607 (class 1255 OID 11286318)
-- Name: subarray(integer[], integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subarray(integer[], integer) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'subarray';


ALTER FUNCTION public.subarray(integer[], integer) OWNER TO postgres;

--
-- TOC entry 1608 (class 1255 OID 11286319)
-- Name: subarray(integer[], integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION subarray(integer[], integer, integer) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'subarray';


ALTER FUNCTION public.subarray(integer[], integer, integer) OWNER TO postgres;

--
-- TOC entry 1609 (class 1255 OID 11286320)
-- Name: summary(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION summary(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_summary';


ALTER FUNCTION public.summary(geometry) OWNER TO postgres;

--
-- TOC entry 1610 (class 1255 OID 11286321)
-- Name: symdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION symdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'symdifference';


ALTER FUNCTION public.symdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1611 (class 1255 OID 11286322)
-- Name: symmetricdifference(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION symmetricdifference(geometry, geometry) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'symdifference';


ALTER FUNCTION public.symmetricdifference(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1612 (class 1255 OID 11286323)
-- Name: text(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION text(geometry) RETURNS text
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_to_text';


ALTER FUNCTION public.text(geometry) OWNER TO postgres;

--
-- TOC entry 1613 (class 1255 OID 11286324)
-- Name: tf_after_i_embarquecarga_rotograma(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_i_embarquecarga_rotograma() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	vUltEmp RECORD;
	vPriEmp RECORD;
	vVelMedia FLOAT;
BEGIN
	SELECT 
		ec.EmpDest_CodCidUf, 
		ec.EmpDest_Pos_Lat,
		ec.EmpDest_Pos_Long,
		ec.CodEmpDest, 
		ec.DtaHrPrevEntrega, 
		ec.DtaHrPrevFimEntrega,
		ec.DtaHrPrevColeta,
		ec.DtaHrPrevFimColeta,
		ec.distancia
	INTO vUltEmp
	FROM EmbarqueCarga ec
	WHERE ec.CodEmbarque = NEW.CodEmbarque
	ORDER BY ec.DtaHrPrevEntrega DESC
	LIMIT 1;
	
	SELECT 
		ec.DtaHrPrevColeta,
		ec.DtaHrPrevFimColeta
	INTO
		vPriEmp
	FROM
		EmbarqueCarga ec
	WHERE ec.CodEmbarque = NEW.CodEmbarque
	ORDER BY ec.DtaHrPrevColeta ASC
	LIMIT 1;
	
	vVelMedia := f_config('VELOCIDADE_MEDIA')::FLOAT;
	
	UPDATE Embarque
	SET distanciatotal = vUltEmp.distancia,
		dtahrfimcalculada = f_chegadaCalculada(Embarque.Veic_UltPos_DtaHr, Embarque.Veic_UltPos_Lat, Embarque.Veic_UltPos_Long, vUltEmp.EmpDest_Pos_Lat, vUltEmp.EmpDest_Pos_Long, vVelMedia),
		codempdest = vUltEmp.CodEmpDest,
		dtahrprevinicoleta = vPriEmp.DtaHrPrevColeta,
		dtahrprevini = vUltEmp.DtaHrPrevFimColeta,
		dtahrprevfim = vUltEmp.DtaHrPrevEntrega,
		empdest_id = null, -- força pegar pelo codigo da empresa
		empdest_pos_long = vUltEmp.EmpDest_pos_long,
		empdest_pos_lat = vUltEmp.EmpDest_pos_long
		
	WHERE Embarque.CodEmbarque = NEW.CodEmbarque;

	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_after_i_embarquecarga_rotograma() OWNER TO postgres;

--
-- TOC entry 1614 (class 1255 OID 11286325)
-- Name: tf_after_id_embarquecarga_cargasid(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_id_embarquecarga_cargasid() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  BEGIN
	
	IF TG_OP = 'DELETE' THEN
		UPDATE Embarque
		SET CargasId = f_gerarJsonCargas('EMBARQUE', OLD.CodEmbarque)
		WHERE Embarque.CodEmbarque = OLD.CodEmbarque;
	ELSE
		UPDATE Embarque
		SET CargasId = f_gerarJsonCargas('EMBARQUE', NEW.CodEmbarque)
		WHERE Embarque.CodEmbarque = NEW.CodEmbarque;
	END IF;

    RETURN new;
  END
$$;


ALTER FUNCTION public.tf_after_id_embarquecarga_cargasid() OWNER TO postgres;

--
-- TOC entry 1615 (class 1255 OID 11286326)
-- Name: tf_after_id_extrainfo(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_id_extrainfo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF tg_op = 'INSERT' THEN
    IF new.CodEmbarque IS NOT NULL THEN
      UPDATE
        Embarque
      SET
        TemExtraInfo = TRUE
      WHERE
        Embarque.CodEmbarque = new.CodEmbarque;
    END IF;

    IF new.CodCarga IS NOT NULL THEN
      UPDATE
        Carga
      SET
        TemExtraInfo = TRUE
      WHERE
        Carga.CodCarga = new.CodCarga;
    END IF;
  ELSE
    IF old.CodEmbarque IS NOT NULL THEN
      UPDATE
        Embarque
      SET
        TemExtraInfo = EXISTS(
          SELECT
            ExtraInfo.CodExtraInfo
          FROM
            ExtraInfo
          WHERE
            ExtraInfo.CodEmbarque = old.CodEmbarque)
      WHERE
        Embarque.CodEmbarque = old.CodEmbarque;
    END IF;

    IF old.CodCarga IS NOT NULL THEN
      UPDATE
        Carga
      SET
        TemExtraInfo = EXISTS(
          SELECT
            ExtraInfo.CodExtraInfo
          FROM
            ExtraInfo
          WHERE
            ExtraInfo.CodCarga = old.CodCarga)
      WHERE
        Embarque.CodEmbarque = old.CodCarga;
    END IF;
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_after_id_extrainfo() OWNER TO postgres;

--
-- TOC entry 1617 (class 1255 OID 11286327)
-- Name: tf_after_id_progcoletacarga_cargasid(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_id_progcoletacarga_cargasid() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  BEGIN
    IF TG_OP = 'DELETE' THEN
		UPDATE ProgColeta
		SET CargasId = f_gerarJsonCargas('COLETA', OLD.CodProgColeta)
		WHERE ProgColeta.CodProgColeta = OLD.CodProgColeta;
	ELSE
		UPDATE ProgColeta
		SET CargasId = f_gerarJsonCargas('COLETA', NEW.CodProgColeta)
		WHERE ProgColeta.CodProgColeta = NEW.CodProgColeta;
	END IF;


    RETURN new;
  END
$$;


ALTER FUNCTION public.tf_after_id_progcoletacarga_cargasid() OWNER TO postgres;

--
-- TOC entry 1678 (class 1255 OID 16961551)
-- Name: tf_after_iu_agendadescarga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iu_agendadescarga() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

  CONST_STAT_AGENDA INT DEFAULT 1;
  CONST_STAT_REAGENDA INT DEFAULT 2;
  CONST_STAT_EXCLUSAO INT DEFAULT 3;
  CONST_STAT_CHEGADA INT DEFAULT 4;
  CONST_STAT_LIBERACAO INT DEFAULT 5;
  CONST_STAT_RETIRADA_NF INT DEFAULT 6;
  CONST_STAT_SAIDA INT DEFAULT 7;

  vCodUsrStat INTEGER := 0;

BEGIN
  IF tg_op = 'INSERT' THEN
    vCodUsrStat := new.CodUsrStatAgendaDescarga;
    
  ELSE
    IF old.CodStatAgendaDescarga IS DISTINCT FROM new.CodStatAgendadescarga THEN
      vCodUsrStat := new.CodUsrStatAgendaDescarga;
    END IF;

  END IF;

  
  IF vCodUsrStat > 0 THEN
    INSERT INTO
      HistStatAgendaDescarga
    (
      CodUsrIncl,
      CodEmbarque,
      CodStatAgendaDescarga,
      CodAgendaDescarga,
      NumNf,
      StatAgendaDescarga_Descr
    )
      SELECT
        vCodUsrStat,
        new.CodEmbarque,
        new.CodStatAgendaDescarga,
        new.CodAgendaDescarga,
        new.NumNf,
        StatAgendaDescarga.Descr
      FROM
        StatAgendaDescarga
      WHERE
        StatAgendaDescarga.CodStatAgendaDescarga = new.CodStatAgendaDescarga;
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_after_iu_agendadescarga() OWNER TO postgres;

--
-- TOC entry 1623 (class 1255 OID 11286328)
-- Name: tf_after_iu_embarque(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iu_embarque() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

  CONST_ATRASADO INTEGER DEFAULT 1;
  CONST_NO_PRAZO INTEGER DEFAULT 2;
  
  CONST_STAT_REALIZADO INT DEFAULT 5;
  CONST_STAT_CANCELADO INT DEFAULT 8;
  CONST_STAT_SINISTRADO INT DEFAULT 7;
  CONST_STAT_AG_REDESPACHO INT DEFAULT 3;
  
  vCodUsrSit INTEGER := 0;
  vCodUsrStat INTEGER := 0;
  vCodUsrVinc1 INTEGER := 0;
  vCodUsrVinc2 INTEGER := 0;
  
  vStatAgInicio INT := 1;
  vStatEmViagem INT := 2;
  vStatFinalizado INT := 3;
  vStatSinistrado INT := 4;
  vStatCancelado INT := 5;
  vStatProgramado INT := 10;
  
  vTpOperCircuito INT := 18;
  vEmpAuto BOOLEAN;

  vTipoPrazoTransitoCfg integer := 1;
  vTipoPrazoTransito integer := -1;

BEGIN
  IF tg_op = 'INSERT' THEN
    vCodUsrStat := new.CodUsrStatEmbarque;

    IF new.CodSitEmbarque IS NOT NULL THEN
      vCodUsrSit := new.CodUsrSitEmbarque;
    END IF;

    IF NEW.CodStatEmbarque IN (vStatEmViagem, vStatAgInicio) THEN
      vCodUsrVinc1 := new.CodUsrIncl;
      vCodUsrVinc2 := new.CodUsrIncl;
    END IF;
    
  ELSE
    IF old.CodStatEmbarque IS DISTINCT FROM new.CodStatEmbarque THEN
      vCodUsrStat := new.CodUsrStatEmbarque;

      IF new.CodStatEmbarque = vStatFinalizado THEN
        UPDATE
          EmbarqueCarga
        SET
          DtaHrIniColeta = COALESCE(DtaHrIniColeta, NOW()),
          DtaHrFimColeta = COALESCE(DtaHrFimColeta, NOW()),
          DtaHrIniEntrega = COALESCE(DtaHrIniEntrega, NOW()),
          DtaHrFimEntrega = COALESCE(DtaHrFimEntrega, NOW())
        WHERE
          EmbarqueCarga.CodEmbarque = new.CodEmbarque;
      END IF;

    END IF;

    IF old.CodSitEmbarque IS DISTINCT FROM new.CodSitEmbarque THEN
      vCodUsrSit := new.CodUsrSitEmbarque;
    END IF;

    
    IF old.DtaHrIni IS NULL AND new.DtaHrIni IS NOT NULL THEN
      UPDATE
        Carga
      SET
        DtaHrIni = new.DtaHrIni
      WHERE
        Carga.DtaHrIni IS NULL AND
        Carga.CodUltEmbarque = new.CodEmbarque;
    END IF;

    
    IF old.DtaHrCancelado IS NULL AND new.DtaHrCancelado IS NOT NULL THEN
      UPDATE
        EmbarqueCarga
      SET
        DtaHrCancelado = new.DtaHrCancelado
      WHERE
        EmbarqueCarga.CodEmbarque = new.CodEmbarque;

      IF new.DtaHrIni IS NOT NULL THEN
        UPDATE
          Carga
        SET
          DtaHrIni = NULL
        WHERE
          Carga.DtaHrIni IS NOT NULL AND
          Carga.CodPriEmbarque = new.CodEmbarque AND
          Carga.CodUltEmbarque = new.CodEmbarque;
      END IF;

      IF old.DtaHrCancelado IS NULL AND new.DtaHrCancelado IS NOT NULL THEN
        vTipoPrazoTransitoCfg := f_config('OPERACAO_T2')::INTEGER;
      
        SELECT COALESCE(TipoPrazoTransito,-1)
        INTO vTipoPrazoTransito
        FROM TpOper
        WHERE TpOper.CodTpOper = NEW.CodTpOper;
    
        -- atualiza as cargas para "a reprogramar"
        -- QUANDO FOR O PRIMEIRO EMBARQUE. Isto acontece quando
        -- o codigo do primeiro embarque é igual ao codigo do ultimo embarque
        UPDATE carga SET CodStatCarga = 9, CodUsrStatCarga = vCodUsrStat
         , DtaHrIniColeta = NULL
         , DtaHrFimColeta = NULL         
         , DtaHrIniEntrega = NULL
         , DtaHrFim = NULL --deveria limpar as datas ao reprogramar uma carga..duvida
         , DtaHrIni = NULL --ver outras...
         , DtaHrPrevColeta = NULL 
         , DtaHrPrevEntrega = NULL      
         , DtaHrFimEntrega = NULL 
         , CodSitCarga = 2
         , CodEmpTra = CASE WHEN vTipoPrazoTransitoCfg <> vTipoPrazoTransito THEN NULL ELSE Carga.CodEmpTra END
         , EmpTra_Id = CASE WHEN vTipoPrazoTransitoCfg <> vTipoPrazoTransito THEN NULL ELSE Carga.EmpTra_Id END
         , EmpTra_Nome = CASE WHEN vTipoPrazoTransitoCfg <> vTipoPrazoTransito THEN NULL ELSE Carga.EmpTra_Nome END
        FROM EmbarqueCarga
        WHERE EmbarqueCarga.CodEmbarque = new.CodEmbarque
          AND Carga.CodCarga = EmbarqueCarga.CodCarga
          AND Carga.CodStatCarga NOT IN (CONST_STAT_REALIZADO,CONST_STAT_CANCELADO,CONST_STAT_SINISTRADO,CONST_STAT_AG_REDESPACHO);
    
        -- atualiza as cargas para "ag. redespacho"
        -- QUANDO FOR O SEGUNDO EMBARQUE EM DIANTE. Isto acontece quando
        -- o codigo do primeiro embarque NÃO é igual ao codigo do ultimo embarque
        UPDATE carga SET CodStatCarga = CONST_STAT_AG_REDESPACHO, CodUsrStatCarga = vCodUsrStat
         , DtaHrIniColeta = NULL
         , DtaHrFimColeta = NULL         
         , DtaHrIniEntrega = NULL
         , DtaHrFim = NULL --deveria limpar as datas ao reprogramar uma carga..duvida
         , DtaHrIni = NULL --ver outras...
         , DtaHrFimEntrega = NULL 
         , CodSitCarga = 2
       
        WHERE Carga.CodUltEmbarque = new.CodEmbarque
          AND Carga.CodUltEmbarque <> Carga.CodPriEmbarque
          AND Carga.CodStatCarga NOT IN (CONST_STAT_REALIZADO,CONST_STAT_CANCELADO,CONST_STAT_SINISTRADO,CONST_STAT_AG_REDESPACHO);
      END IF;
    END IF;
    
    IF (old.Veic_CodTecRastr, old.Veic_IdEquipRastr) IS DISTINCT FROM (new.Veic_CodTecRastr, new.Veic_IdEquipRastr) THEN
      vCodUsrVinc1 := COALESCE(new.CodUsrAlter, new.CodUsrIncl);

      IF old.Veic_CodTecRastr IS NOT NULL AND COALESCE(old.Veic_IdEquipRastr, '') > '' THEN
        PERFORM F_VincEquipRastr(vCodUsrVinc1, 'D'::CHAR(1), old.Veic_CodTecRastr, old.Veic_IdEquipRastr, FALSE, 2::INTEGER, new.CodEmbarque);
      END IF;
    END IF;

    
    IF (old.RastrMovel_CodTecRastr, old.RastrMovel_IdEquipRastr) IS DISTINCT FROM (new.RastrMovel_CodTecRastr, new.RastrMovel_IdEquipRastr) THEN
      vCodUsrVinc2 := COALESCE(new.CodUsrAlter, new.CodUsrIncl);

      IF old.RastrMovel_CodTecRastr IS NOT NULL AND COALESCE(old.RastrMovel_IdEquipRastr, '') > '' THEN
        PERFORM F_VincEquipRastr(vCodUsrVinc2, 'D'::CHAR(1), old.RastrMovel_CodTecRastr, old.RastrMovel_IdEquipRastr, TRUE, 2::INTEGER, new.CodEmbarque);
      END IF;
    END IF;

    
    IF old.CodStatEmbarque IS DISTINCT FROM new.CodStatEmbarque AND old.CodStatEmbarque IN(vStatAgInicio,vStatEmViagem) AND new.CodStatEmbarque NOT IN(vStatAgInicio,vStatEmViagem) THEN
      vCodUsrVinc1 := COALESCE(new.CodUsrAlter, new.CodUsrIncl);

      IF new.Veic_CodTecRastr IS NOT NULL AND COALESCE(new.Veic_IdEquipRastr, '') > '' THEN
        PERFORM F_VincEquipRastr(vCodUsrVinc1, 'D'::CHAR(1), new.Veic_CodTecRastr, new.Veic_IdEquipRastr, FALSE, 2::INTEGER, new.CodEmbarque);
      END IF;

      IF new.RastrMovel_CodTecRastr IS NOT NULL AND COALESCE(new.RastrMovel_IdEquipRastr, '') > '' THEN
        PERFORM F_VincEquipRastr(vCodUsrVinc1, 'D'::CHAR(1), new.RastrMovel_CodTecRastr, new.RastrMovel_IdEquipRastr, TRUE, 2::INTEGER, new.CodEmbarque);
      END IF;

      vCodUsrVinc1 := 0; 
      vCodUsrVinc2 := 0; 
    END IF;

    -- se estava programado e agora está "ag inicio" ou "em viagem"
    IF OLD.CodStatEmbarque = vStatProgramado AND NEW.CodStatEmbarque IN (vStatAgInicio,vStatEmViagem) THEN
      vCodUsrVinc1 := COALESCE(new.CodUsrAlter, new.CodUsrIncl);
    END IF;

  END IF;

  
  IF vCodUsrStat > 0 THEN
    INSERT INTO
      HistStatEmbarque
    (
      CodUsrIncl,
      CodEmbarque,
      CodStatEmbarque,
      StatEmbarque_Descr,
      StatEmbarque_DefineFim,
      StatEmbarque_DefineInicio,
      StatEmbarque_DefineSinistro,
      StatEmbarque_DefineCancelado
    )
      SELECT
        vCodUsrStat,
        new.CodEmbarque,
        new.CodStatEmbarque,
        StatEmbarque.Descr,
        StatEmbarque.DefineFim,
        StatEmbarque.DefineInicio,
        StatEmbarque.DefineSinistro,
        StatEmbarque.DefineCancelado
      FROM
        StatEmbarque
      WHERE
        StatEmbarque.CodStatEmbarque = new.CodStatEmbarque;
  END IF;

  
  IF vCodUsrSit > 0 THEN
    INSERT INTO
      HistSitEmbarque
    (
      CodUsrIncl,
      CodEmbarque,
      CodSitEmbarque,
      SitEmbarque_Descr,
      SitEmbarque_TiraAtraso,
      SitEmbarque_DefineAtraso,
      SitEmbarque_DefineRetorno
    )
      SELECT
        vCodUsrSit,
        new.CodEmbarque,
        new.CodSitEmbarque,
        SitEmbarque.Descr,
        SitEmbarque.TiraAtraso,
        SitEmbarque.DefineAtraso,
        SitEmbarque.DefineRetorno
      FROM
        SitEmbarque
      WHERE
        SitEmbarque.CodSitEmbarque = new.CodSitEmbarque;
  END IF;

  
  IF vCodUsrVinc1 > 0 AND new.Veic_CodTecRastr IS NOT NULL AND TRIM(COALESCE(new.Veic_IdEquipRastr, '')) != '' THEN
    new.Veic_IdEquipRastr := TRIM(new.Veic_IdEquipRastr);
    PERFORM F_VincEquipRastr(vCodUsrVinc1, 'I'::CHAR(1), new.Veic_CodTecRastr, new.Veic_IdEquipRastr, FALSE, 2::INTEGER, new.CodEmbarque);
  END IF;

  
  IF vCodUsrVinc2 > 0 AND new.RastrMovel_CodTecRastr IS NOT NULL AND TRIM(COALESCE(new.RastrMovel_IdEquipRastr, '')) != '' THEN
    new.RastrMovel_IdEquipRastr := TRIM(new.RastrMovel_IdEquipRastr);
    PERFORM F_VincEquipRastr(vCodUsrVinc2, 'I'::CHAR(1), new.RastrMovel_CodTecRastr, new.RastrMovel_IdEquipRastr, TRUE, 2::INTEGER, new.CodEmbarque);
  END IF;

  -- se esta iniciando o embarque manualmente
  -- os horarios nas cargas ficam em aberto.
  -- entao, aqui mandamos atualizar.
  IF TG_OP = 'UPDATE' THEN
    IF OLD.CodStatEmbarque IS DISTINCT FROM vStatEmViagem AND NEW.CodStatEmbarque = vStatEmViagem THEN
      UPDATE 
        EmbarqueCarga
      SET 
        DtaHrIniColeta = NOW(),
        DtaHrFimColeta = NOW()
      WHERE
        DtaHrIniColeta IS NULL
        AND DtaHrCancelado IS NULL
        AND DtaHrFimColeta IS NULL
        AND CodEmbarque = NEW.CodEmbarque;
    END IF;
  END IF;
  
  -- se está atualizando e for circuito
  IF TG_OP = 'UPDATE' AND NEW.CodTpOper = vTpOperCircuito THEN
    IF old.CodStatEmbarque IS DISTINCT FROM new.CodStatEmbarque AND NEW.CodStatEmbarque = vStatFinalizado THEN
      -- se a empresa destino emite embarque automatico
      SELECT EmbarqueAutomatico
      INTO vEmpAuto
      FROM Emp
      WHERE Emp.CodEmp = NEW.CodEmpDest;
    
      IF vEmpAuto THEN
        PERFORM f_emiteProximoEmbarqueCircuito(NEW.CodEmbarque::INTEGER);
      END IF;
    END IF;
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_after_iu_embarque() OWNER TO postgres;

--
-- TOC entry 1618 (class 1255 OID 11286330)
-- Name: tf_after_iu_embarque_emailtecrastr(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iu_embarque_emailtecrastr() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
	vEmbarque Embarque;
	vRow RECORD;
	vTextoEmail TEXT;
	vAssuntoEmail TEXT;
	vTexto TEXT;
BEGIN
	IF TG_OP = 'UPDATE' AND NEW.Veic_CodTecRastr = 1 AND OLD.DtaHrFim IS NULL AND NEW.DtaHrFim IS NOT NULL THEN
		SELECT va.valor, vc.valor
		INTO vAssuntoEmail, vTextoEmail
		FROM Palavra pa, Palavra Pc, Traducao va, Traducao vc, Idioma i
		WHERE i.abreviacao = 'PT'
			AND pa.chave = 'email.aviso_tecnologias.assunto' 
			AND pc.chave = 'email.aviso_tecnologias'
			AND va.codpalavra = pa.codpalavra 
			AND vc.codpalavra = pc.codpalavra
			AND va.codidioma = i.codidioma
			AND vc.codidioma = i.codidioma;

		-- trocando os valores do embarque nas variaveis do email
		FOR vRow IN 
			SELECT ordinal_position,column_name
			FROM information_schema.columns
			WHERE table_schema = 'public'
				AND table_name = 'embarque'
			ORDER BY ordinal_position
		LOOP
			EXECUTE 'SELECT ($1).'||vRow.column_name||'::text' INTO vTexto USING NEW;
			vTextoEmail := REPLACE(vTextoEmail, '${embarque.'||vRow.column_name||'}', COALESCE(vTexto,''));
		END LOOP;

		-- selecionando os contatos da empresa transportadora do embarque
		INSERT INTO EmailToSend(codusrincl,dtahrincl,codtemplateemail,remetentenome,remetenteemail,destinatarionome,destinatarioemail,subject,msg)
		SELECT 1, NOW(), 0, cfgn.vlratual, cfge.vlratual, c.email, c.nome, vAssuntoEmail, vTextoEmail
		FROM contato c, config cfgn, config cfge
		WHERE c.codemp = NEW.codemptra
			AND c.recebealerta = TRUE
			AND cfge.nome = 'CONF_EMAIL_USR'
			AND cfgn.nome = 'CONF_EMAIL_NOME';
	END IF;

	RETURN NEW;
END;
$_$;


ALTER FUNCTION public.tf_after_iu_embarque_emailtecrastr() OWNER TO postgres;

--
-- TOC entry 1683 (class 1255 OID 19651054)
-- Name: tf_after_iu_leilaolance(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iu_leilaolance() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

  BEGIN
    -- atualizando ultimo lance no leilao
    UPDATE Leilao 
       SET VlrMinLance = NEW.VlrLance,
           CodTranspMinLance = NEW.CodEmptra,
           DtaHrMinLance = NOW()
     WHERE Leilao.CodLeilao = NEW.CodLeilao
       AND (coalesce(Leilao.VlrMinLance,0) = 0 OR NEW.VlrLance <= Leilao.VlrMinLance);
     
    -- atualizando ultimo lance no leilao
    UPDATE Leilao 
       SET VlrUltLance = NEW.VlrLance,
           CodTranspUltLance = NEW.CodEmptra,
           DtaHrUltLance = NOW()
     WHERE Leilao.CodLeilao = NEW.CodLeilao;

    -- atualizando ultimo lance da empresa
    UPDATE LeilaoTransp
       SET VlrLance = NEW.VlrLance,
           MinLotes = NEW.MinLotes,
           MaxLotes = NEW.MaxLotes
     WHERE LeilaoTransp.CodLeilaoTransp = NEW.CodLeilaoTransp;

    RETURN NEW;
  END;
$$;


ALTER FUNCTION public.tf_after_iu_leilaolance() OWNER TO postgres;

--
-- TOC entry 1679 (class 1255 OID 18216403)
-- Name: tf_after_iu_pedido(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iu_pedido() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

  BEGIN
    IF NEW.codstatpedido IS NOT NULL AND (TG_OP = 'INSERT' OR NEW.codstatpedido IS DISTINCT FROM OLD.codstatpedido) THEN
      INSERT INTO histstatpedido (codstatpedido, codpedido, dtahrincl, codusrincl)
                          values (NEW.codstatpedido, NEW.codpedido, NOW(), COALESCE(NEW.codusralter, NEW.codusrincl));
    END IF;

    RETURN NEW;
  END;
  
$$;


ALTER FUNCTION public.tf_after_iu_pedido() OWNER TO postgres;

--
-- TOC entry 1619 (class 1255 OID 11286332)
-- Name: tf_after_iud_embarquecarga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_embarquecarga() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vCodEmp BIGINT;
  vRecord RECORD;
  vCodEmpOrig BIGINT;
  vCodEmpDest BIGINT;
  vPrevColeta INTEGER;
  vRealColeta INTEGER;
  vPrevEntrega INTEGER;
  vRealEntrega INTEGER;
  vCodEmbarque BIGINT;
  vCodPriEmbarqueCarga BIGINT;
  vCodUltEmbarqueCarga BIGINT;
  
BEGIN
  IF tg_op = 'INSERT' OR tg_op = 'UPDATE' THEN
    vCodEmbarque := new.CodEmbarque;
  ELSE
    vCodEmbarque := old.CodEmbarque;
  END IF;

  SELECT
    Embarque.CodEmpOrig,
    Embarque.CodEmpDest
  INTO
    vCodEmpOrig,
    vCodEmpDest
  FROM
    Embarque
  WHERE
    Embarque.CodEmbarque = vCodEmbarque;

  vCodEmp := 0;
  vPrevColeta := 0;
  vRealColeta := 0;

  FOR vRecord IN
    SELECT 
      EmbarqueCarga.CodEmpOrig,
      EmbarqueCarga.DtaHrFimColeta
    FROM 
      EmbarqueCarga
    WHERE
      EmbarqueCarga.DtaHrCancelado IS NULL AND
      EmbarqueCarga.CodEmbarque = vCodEmbarque AND
      EmbarqueCarga.CodEmpOrig <> vCodEmpOrig
    ORDER BY
      EmbarqueCarga.CodEmpOrig,
      EmbarqueCarga.DtaHrFimColeta DESC
  LOOP
    IF vRecord.CodEmpOrig <> vCodEmp THEN
      vCodEmp := vRecord.CodEmpOrig;

      vPrevColeta := vPrevColeta + 1;
      IF vRecord.DtaHrFimColeta IS NOT NULL THEN
        vRealColeta := vRealColeta + 1;
      END IF;
    END IF;
  END LOOP;
  
  vCodEmp := 0;
  vPrevEntrega := 0;
  vRealEntrega := 0;

  FOR vRecord IN
    SELECT 
      EmbarqueCarga.CodEmpDest,
      EmbarqueCarga.DtaHrFimEntrega
    FROM 
      EmbarqueCarga
    WHERE
      EmbarqueCarga.DtaHrCancelado IS NULL AND
      EmbarqueCarga.CodEmbarque = vCodEmbarque AND
      EmbarqueCarga.CodEmpDest <> vCodEmpDest
    ORDER BY
      EmbarqueCarga.CodEmpDest,
      EmbarqueCarga.DtaHrFimEntrega DESC
  LOOP
    IF vRecord.CodEmpDest <> vCodEmp THEN
      vCodEmp := vRecord.CodEmpDest;

      vPrevEntrega := vPrevEntrega + 1;
      IF vRecord.DtaHrFimEntrega IS NOT NULL THEN
        vRealEntrega := vRealEntrega + 1;
      END IF;
    END IF;
  END LOOP;

  UPDATE
    Embarque
  SET
    TotPrevColeta = vPrevColeta,
    TotRealColeta = vRealColeta,
    TotPrevEntrega = vPrevEntrega,
    TotRealEntrega = vRealEntrega
  WHERE
    Embarque.CodEmbarque = vCodEmbarque
    AND (TotPrevColeta,TotRealColeta,TotPrevEntrega,TotRealEntrega)
    IS DISTINCT FROM 
    (vPrevColeta,vRealColeta,vPrevEntrega,vRealEntrega);

  IF tg_op = 'INSERT' THEN
    UPDATE
      Carga
    SET
      CodPriEmbarque = COALESCE(CodPriEmbarque, new.CodEmbarque),
      CodUltEmbarque = new.CodEmbarque
    WHERE
      Carga.CodCarga = new.CodCarga;
      
  ELSIF tg_op = 'DELETE' 
    OR (old.DtaHrCancelado IS NULL AND new.DtaHrCancelado IS NOT NULL) THEN
    
    SELECT
      Min(EmbarqueCarga.CodEmbarqueCarga),
      Max(EmbarqueCarga.CodEmbarqueCarga)
    INTO
      vCodPriEmbarqueCarga,
      vCodUltEmbarqueCarga
    FROM
      EmbarqueCarga
    WHERE
      EmbarqueCarga.DtaHrCancelado IS NULL AND
      EmbarqueCarga.CodCarga = old.CodCarga;
    
    UPDATE
      Carga
    SET
      CodPriEmbarque = (
        SELECT 
          EmbarqueCarga.CodEmbarque 
        FROM
          EmbarqueCarga
        WHERE
          EmbarqueCarga.CodEmbarqueCarga = vCodPriEmbarqueCarga),
          
      CodUltEmbarque = (
        SELECT 
          EmbarqueCarga.CodEmbarque 
        FROM
          EmbarqueCarga
        WHERE
          EmbarqueCarga.CodEmbarqueCarga = vCodUltEmbarqueCarga)
    WHERE
      Carga.CodCarga = old.CodCarga;
  END IF;

  IF TG_OP = 'DELETE' OR TG_OP = 'INSERT' OR 
    (OLD.DtaHrCancelado, OLD.DtaHrPrevColeta, OLD.DtaHrPrevFimColeta, OLD.DtaHrPrevEntrega, OLD.DtaHrPrevFimEntrega)
    IS DISTINCT FROM
    (NEW.DtaHrCancelado, NEW.DtaHrPrevColeta, NEW.DtaHrPrevFimColeta, NEW.DtaHrPrevEntrega, NEW.DtaHrPrevFimEntrega)
  THEN
    PERFORM f_atualizaDatasEmbarque( vCodEmbarque );
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_after_iud_embarquecarga() OWNER TO postgres;

--
-- TOC entry 1620 (class 1255 OID 11286333)
-- Name: tf_after_iud_embarquecarga_dtaremessa(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_embarquecarga_dtaremessa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vDtaRemessa DATE;
  vDtaPrevIniColeta TIMESTAMPTZ;
  vDtaPrevFimColeta TIMESTAMPTZ;
  vDtaPrevIniEntrega TIMESTAMPTZ;
BEGIN
  IF TG_OP = 'INSERT' OR TG_OP = 'DELETE' OR 
    (TG_OP = 'UPDATE' AND (OLD.DtaHrPrevColeta,OLD.DtaHrPrevFimColeta,OLD.DtaHrPrevEntrega,OLD.DtaHrPrevFimEntrega) IS DISTINCT FROM (NEW.DtaHrPrevColeta,NEW.DtaHrPrevFimColeta,NEW.DtaHrPrevEntrega,NEW.DtaHrPrevFimEntrega)) 
  THEN
    SELECT
      MIN(Carga.DtaRemessa),
      MIN(EmbarqueCarga.DtaHrPrevColeta),
      MIN(EmbarqueCarga.DtaHrPrevFimColeta),
      MAX(EmbarqueCarga.DtaHrPrevEntrega)
    INTO
      vDtaRemessa,
      vDtaPrevIniColeta,
      vDtaPrevFimColeta,
      vDtaPrevIniEntrega
    FROM
      Carga, EmbarqueCarga
    WHERE
      EmbarqueCarga.CodCarga = Carga.CodCarga
      AND EmbarqueCarga.CodEmbarque = CASE WHEN TG_OP = 'DELETE' THEN OLD.CodEmbarque ELSE NEW.CodEmbarque END;
    
    UPDATE Embarque
    SET DtaRemessa = vDtaRemessa,
        DtaHrPrevIniColeta = vDtaPrevIniColeta,
        DtaHrPrevIni = vDtaPrevFimColeta,
        DtaHrPrevFim = vDtaPrevIniEntrega
    WHERE Embarque.CodEmbarque = CASE WHEN TG_OP = 'DELETE' THEN OLD.CodEmbarque ELSE NEW.CodEmbarque END
      AND (Embarque.DtaRemessa,Embarque.DtaHrPrevIniColeta ,Embarque.DtaHrPrevIni ,Embarque.DtaHrPrevFim)
        IS DISTINCT FROM 
        (vDtaRemessa,vDtaPrevIniColeta,vDtaPrevFimColeta,vDtaPrevIniEntrega);
  END IF;
  
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE 
    RETURN NEW;
  END IF;
END;
$$;


ALTER FUNCTION public.tf_after_iud_embarquecarga_dtaremessa() OWNER TO postgres;

--
-- TOC entry 1621 (class 1255 OID 11286334)
-- Name: tf_after_iud_embarquecarga_tpcarga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_embarquecarga_tpcarga() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    PERFORM f_atualizatpcargaembarque(NEW.CodEmbarque::INTEGER); 
  END IF;

  IF TG_OP = 'DELETE' THEN
    PERFORM f_atualizatpcargaembarque(OLD.CodEmbarque::INTEGER); 
  END IF;
  
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  END IF;
  
  RETURN NEW;
END; $$;


ALTER FUNCTION public.tf_after_iud_embarquecarga_tpcarga() OWNER TO postgres;

--
-- TOC entry 1624 (class 1255 OID 11286335)
-- Name: tf_after_iud_lembrete(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_lembrete() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF tg_op = 'INSERT' THEN
    IF new.CodEmbarque IS NOT NULL THEN
      UPDATE
        Embarque
      SET
        TemLembrete = TRUE
      WHERE
        Embarque.CodEmbarque = new.CodEmbarque;
    END IF;

    IF new.CodCarga IS NOT NULL THEN
      UPDATE
        Carga
      SET
        TemLembrete = TRUE
      WHERE
        Carga.CodCarga = new.CodCarga;
    END IF;
  ELSIF tg_op = 'DELETE'  THEN
    IF old.CodEmbarque IS NOT NULL THEN
      UPDATE
        Embarque
      SET
        TemLembrete = EXISTS(
          SELECT
            Lembrete.CodLembrete
          FROM
            Lembrete
          WHERE
            Lembrete.DtaHrBaixa IS NULL AND
            Lembrete.CodEmbarque = old.CodEmbarque)
      WHERE
        Embarque.CodEmbarque = old.CodEmbarque;
    END IF;

    IF old.CodCarga IS NOT NULL THEN
      UPDATE
        Carga
      SET
        TemLembrete = EXISTS(
          SELECT
            Lembrete.CodLembrete
          FROM
            Lembrete
          WHERE
            Lembrete.DtaHrBaixa IS NULL AND
            Lembrete.CodCarga = old.CodCarga)
      WHERE
        Carga.CodCarga = old.CodCarga;
    END IF;
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_after_iud_lembrete() OWNER TO postgres;

--
-- TOC entry 1625 (class 1255 OID 11286336)
-- Name: tf_after_iud_ocor(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_ocor() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	vTipo VARCHAR(20);
BEGIN
  IF tg_op = 'INSERT' THEN
    SELECT descr INTO vTipo FROM TpEntidade WHERE TpEntidade.CodTpEntidade = NEW.CodTpEntidade;
	
	IF vTipo = 'EMBARQUE' THEN
	  UPDATE Embarque SET TemOcorrencia = TRUE WHERE CodEmbarque=NEW.CodEntidade;
	ELSIF vTipo = 'CARGA' THEN
	  UPDATE Carga SET TemOcorrencia = TRUE WHERE CodCarga=NEW.CodEntidade;
	END IF;
	
  ELSIF tg_op = 'DELETE' OR old.DtaHrEncerrado IS NULL AND new.DtaHrEncerrado IS NOT NULL THEN
    SELECT descr INTO vTipo FROM TpEntidade WHERE TpEntidade.CodTpEntidade = OLD.CodTpEntidade;
    
	IF vTipo = 'EMBARQUE' THEN
	  UPDATE Embarque
	  SET TemOcorrencia = EXISTS(SELECT Ocor.CodOcor FROM Ocor WHERE Ocor.CodEntidade = OLD.CodEntidade AND Ocor.CodTpEntidade = OLD.CodTpEntidade AND Ocor.DtaHrEncerrado IS NULL)
	  WHERE Embarque.CodEmbarque = OLD.CodEntidade;
	  
	ELSIF vTipo = 'CARGA' THEN
	  UPDATE Carga
	  SET TemOcorrencia = EXISTS(SELECT Ocor.CodOcor FROM Ocor WHERE Ocor.CodEntidade = OLD.CodEntidade AND Ocor.CodTpEntidade = OLD.CodTpEntidade AND Ocor.DtaHrEncerrado IS NULL)
	  WHERE Carga.CodCarga = OLD.CodEntidade;
	END IF;
	
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_after_iud_ocor() OWNER TO postgres;

--
-- TOC entry 1626 (class 1255 OID 11286337)
-- Name: tf_after_iud_progcoletacarga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_progcoletacarga() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	-- Atualiza a Tabela de Programacao de Coleta com os dados
	-- das cargas vinculadas 
DECLARE
	vTotalPeso NUMERIC(12,2) DEFAULT 0;
	vTotalVol NUMERIC(12,2) DEFAULT 0;
	vTotalNumVol INTEGER DEFAULT 0;
	vTotalCarga INTEGER DEFAULT 0;
	vTotalPalete INTEGER DEFAULT 0;
	vTotalCargasSemDelivery INTEGER DEFAULT 0;
	vReg ProgColetaCarga;
BEGIN
	IF TG_OP = 'DELETE' THEN
		vReg := OLD;
	ELSE
		vReg := NEW;
	END IF;
	
	IF COALESCE(vReg.CodProgColeta,-1) > -1 THEN
		SELECT SUM(Carga.Peso), SUM(Carga.Vol), SUM(Carga.NumVol), COUNT(Carga.CodCarga), SUM(Carga.NumPalete)
		INTO vTotalPeso, vTotalVol, vTotalNumVol, vTotalCarga, vTotalPalete
		FROM ProgColetaCarga
		JOIN Carga ON Carga.CodCarga = ProgColetaCarga.CodCarga
		WHERE ProgColetaCarga.CodProgColeta = vReg.CodProgColeta;

		UPDATE ProgColeta
		SET TotalCarga = COALESCE(vTotalCarga,0)
			, TotalNumVol = COALESCE(vTotalNumVol,0)
			, TotalPeso = COALESCE(vTotalPeso,0)
			, TotalVol = COALESCE(vTotalVol,0)
			, TotalNumPalete = COALESCE(vTotalPalete,0)
		WHERE ProgColeta.CodProgColeta = vReg.CodProgColeta;

		SELECT COUNT(*)
		INTO vTotalCargasSemDelivery
		FROM ProgColetaCarga
		JOIN Carga ON Carga.CodCarga = ProgColetaCarga.CodCarga
		WHERE ProgColetaCarga.CodProgColeta = vReg.CodProgColeta and Carga.Venda = true and Carga.Temdelivery = false;

		IF vTotalCargasSemDelivery > 0 THEN
		   UPDATE ProgColeta
		   SET Venda = true
			, TemDelivery = false
		   WHERE ProgColeta.CodProgColeta = vReg.CodProgColeta;
		ELSE
		   UPDATE ProgColeta
		   SET Venda = false
		   WHERE ProgColeta.CodProgColeta = vReg.CodProgColeta;
		END IF;

	END IF;

	RETURN vReg;
END$$;


ALTER FUNCTION public.tf_after_iud_progcoletacarga() OWNER TO postgres;

--
-- TOC entry 1627 (class 1255 OID 11286338)
-- Name: tf_after_iud_progcoletacarga_dtaremessa(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_progcoletacarga_dtaremessa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	vDtaRemessa DATE;
BEGIN
	SELECT
		MIN(Carga.DtaRemessa)
	INTO
		vDtaRemessa
	FROM
		Carga, ProgColetaCarga
	WHERE
		ProgColetaCarga.CodCarga = Carga.CodCarga
		AND ProgColetaCarga.CodProgColeta = CASE WHEN TG_OP = 'DELETE' THEN OLD.CodProgColeta ELSE NEW.CodProgColeta END;
	
	UPDATE ProgColeta
	SET DtaRemessa = vDtaRemessa
	WHERE ProgColeta.CodProgColeta = CASE WHEN TG_OP = 'DELETE' THEN OLD.CodProgColeta ELSE NEW.CodProgColeta END
		AND ProgColeta.DtaRemessa IS DISTINCT FROM vDtaRemessa;

	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_after_iud_progcoletacarga_dtaremessa() OWNER TO postgres;

--
-- TOC entry 1628 (class 1255 OID 11286339)
-- Name: tf_after_iud_progcoletacarga_tpcarga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_progcoletacarga_tpcarga() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM f_atualizatpcargaprogcoleta(NEW.CodProgColeta::INTEGER); 
  RETURN NEW;
END; $$;


ALTER FUNCTION public.tf_after_iud_progcoletacarga_tpcarga() OWNER TO postgres;

--
-- TOC entry 1629 (class 1255 OID 11286340)
-- Name: tf_after_iud_veic(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_iud_veic() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vRecord RECORD;
BEGIN
  IF tg_op = 'INSERT' THEN

    IF new.CodTecRastr IS NOT NULL AND new.IdEquipRastr IS NOT NULL THEN
      INSERT INTO
        EquipRastr
      (
        CodTpEntidade,
        CodEntidade,
        CodTecRastr,
        IdEquipRastr
      )
        VALUES
      (
        7,
        new.CodVeic,
        new.CodTecRastr,
        TRIM(new.IdEquipRastr)
      );
    END IF;

  ELSIF tg_op = 'DELETE' OR (old.CodTecRastr, old.IdEquipRastr) IS DISTINCT FROM (new.CodTecRastr, new.IdEquipRastr) THEN

    UPDATE
      EquipRastr
    SET
      Status = 'E',
      DtaHrStatus = NOW()
    WHERE
      EquipRastr.CodTpEntidade = 7 AND
      EquipRastr.CodEntidade = old.CodVeic AND
      EquipRastr.CodTecRastr = old.CodTecRastr AND
      EquipRastr.IdEquipRastr = TRIM(old.IdEquipRastr);

    IF tg_op != 'DELETE' THEN
      IF new.CodTecRastr IS NOT NULL AND new.IdEquipRastr IS NOT NULL THEN
        INSERT INTO
          EquipRastr
        (
          CodTpEntidade,
          CodEntidade,
          CodTecRastr,
          IdEquipRastr
        )
          VALUES
        (
          7,
          new.CodVeic,
          new.CodTecRastr,
          TRIM(new.IdEquipRastr)
        );
      END IF;

      FOR vRecord IN
        SELECT
          Embarque.CodEmbarque
        FROM
          Embarque
        WHERE
          /*Embarque.DtaHrFim IS NULL AND*/
          Embarque.CodStatEmbarque IN(1,2) AND
          Embarque.CodVeic = old.CodVeic
      LOOP
        UPDATE
          Embarque
        SET
          Veic_CodTecRastr = new.CodTecRastr,
          Veic_IdEquipRastr = TRIM(new.IdEquipRastr)
        WHERE
          Embarque.CodEmbarque = vRecord.CodEmbarque;
      END LOOP;
    END IF;

  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_after_iud_veic() OWNER TO postgres;

--
-- TOC entry 1630 (class 1255 OID 11286341)
-- Name: tf_after_u_embarque_atualizagrupos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_u_embarque_atualizagrupos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	vRec RECORD;
	
BEGIN
	IF (OLD.DtaHrCancelado IS NULL AND NEW.DtaHrCancelado IS NOT NULL) OR (OLD.DtaHrSinistrado IS NULL AND NEW.DtaHrSinistrado IS NOT NULL) THEN
		FOR vRec IN 
			SELECT DISTINCT c.CodCargaGrupo 
			FROM Carga c, EmbarqueCarga ec
			WHERE ec.CodCarga = c.CodCarga
			AND ec.CodEmbarque = NEW.CodEmbarque
			AND c.CodCargaGrupo IS NOT NULL
		LOOP
			PERFORM f_atualizaInformacoesGrupo(vRec.CodCargaGrupo);
		END LOOP;
	END IF;
	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_after_u_embarque_atualizagrupos() OWNER TO postgres;

--
-- TOC entry 1631 (class 1255 OID 11286342)
-- Name: tf_after_u_embarque_atualizarkpiciclocircuito(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_u_embarque_atualizarkpiciclocircuito() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vEtapaEncontrada BOOLEAN := FALSE;
  
  vDtaHrIni TIMESTAMP WITH TIME ZONE;
  vDtaHrFim TIMESTAMP WITH TIME ZONE;
  
  vDtaHrPrevIni TIMESTAMP WITH TIME ZONE;
  vDtaHrPrevFim TIMESTAMP WITH TIME ZONE;
  
  vRow RECORD;
  vOrdem INTEGER := 1;
  vCodUltEmb BIGINT;
  vDiferenca INTEGER := 0;
  
  vTipoPrazoTransito INTEGER := 4; -- circuito
BEGIN
  IF TG_OP = 'UPDATE' AND NEW.CodCargaFluxo IS NOT NULL AND ARRAY_LENGTH(NEW.Anteriores,1) > 0 THEN
    -- FINALIZANDO O EMBARQUE
    -- INTERESSA SABER SE É A ULTIMA ETAPA
    IF OLD.DtaHrFim IS NULL 
      AND NEW.DtaHrFim IS NOT NULL 
      AND NEW.DtaHrSinistrado IS NULL 
      AND NEW.DtaHrCancelado IS NULL THEN
      
      -- vemos se está voltando para a origem
      SELECT COUNT(*) > 0
      INTO vEtapaEncontrada
      FROM CargaFluxo
      WHERE CargaFluxo.CodCargaFluxo = NEW.CodCargaFluxo
        AND CargaFluxo.Ativo = TRUE
        AND CargaFluxo.Circuito = TRUE
        AND CargaFluxo.CodEmpOrig = NEW.CodEmpDest
        AND CargaFluxo.CodUltEmp = NEW.CodEmpOrig;
      
      IF vEtapaEncontrada THEN
        SELECT Embarque.DtaHrPrevIni, COALESCE(EmbarqueCarga.DtaHrIniColeta, Embarque.DtaHrIni)
        INTO vDtaHrPrevIni, vDtaHrIni
        FROM Embarque
        LEFT JOIN EmbarqueCarga ON EmbarqueCarga.CodEmbarque = Embarque.CodEmbarque
        WHERE  Embarque.CodEmbarque = NEW.Anteriores[1]
        ORDER BY EmbarqueCarga.DtaHrPrevColeta ASC
        LIMIT 1;
        
        vDtaHrPrevFim := vDtaHrPrevIni;
        
        FOR vRow IN SELECT 
            COALESCE(PrazoTransito.Prazo,0) as Prazo,
            EmpOrig.TempoColetaCircuito,
            EmpDest.TempoEntregaCircuito
          FROM
            CargaFluxoEmp
            INNER JOIN Emp as EmpOrig ON CargaFluxoEmp.CodEmpOrig = EmpOrig.CodEmp
            INNER JOIN Emp as EmpDest ON CargaFluxoEmp.CodEmpDest = EmpDest.CodEmp
            LEFT JOIN PrazoTransito ON PrazoTransito.CodPrazoTransito = (
              SELECT 
                CodPrazoTransito
              FROM
                PrazoTransito pz
              WHERE 
                pz.CodCidUfOrig = EmpOrig.CodCidUf
                AND pz.CodCidUfDest = EmpDest.CodCidUf
                AND pz.Tipo = vTipoPrazoTransito
              ORDER BY
                DtaVigencia DESC
              LIMIT 1
            )

          WHERE 
            CargaFluxoEmp.CodCargaFluxo =  NEW.CodCargaFluxo
          
          UNION ALL
          
          SELECT 
            COALESCE(PrazoTransito.Prazo,0) as Prazo,
            EmpOrig.TempoColetaCircuito,
            EmpDest.TempoEntregaCircuito
          FROM
            Emp as EmpOrig
            JOIN Emp as EmpDest ON EmpDest.CodEmp = NEW.CodEmpDest
            LEFT JOIN PrazoTransito ON PrazoTransito.CodPrazoTransito = (
              SELECT 
                CodPrazoTransito
              FROM
                PrazoTransito pz
              WHERE 
                pz.CodCidUfOrig = EmpOrig.CodCidUf
                AND pz.CodCidUfDest = EmpDest.CodCidUf
                AND pz.Tipo = vTipoPrazoTransito
              ORDER BY
                DtaVigencia DESC
              LIMIT 1
            )
          WHERE 
            EmpOrig.CodEmp = NEW.CodEmpOrig
        LOOP
          vDtaHrPrevFim := vDtaHrPrevFim + CAST(vRow.Prazo || ' MINUTE' as INTERVAL) + 
            CAST(vRow.TempoColetaCircuito || ' MINUTE' AS INTERVAL) + 
            CAST(vRow.TempoEntregaCircuito || ' MINUTE' AS INTERVAL);
        END LOOP;
        
        -- diferenca em minutos
        vDiferenca := ROUND((EXTRACT(EPOCH FROM NEW.DtaHrFim - vDtaHrIni) - EXTRACT(EPOCH FROM vDtaHrPrevFim - vDtaHrPrevIni)) / 60);
        
        INSERT INTO KpiCicloCircuito (
          CodCircuito,
          DtaHrIncl,
          DtaHrPrevIni,
          DtaHrPrevFim,
          DtaHrIni,
          DtaHrFim,
          CodPriEmbarque,
          CodEmbarqueAtual,
          NoPrazo,
          Diferenca,
          Embarques,
          Transportadoras,
          Embarcadores
        ) VALUES (
          NEW.CodCargaFluxo,
          NOW(),
          vDtaHrPrevIni,
          vDtaHrPrevFim,
          vDtaHrIni,
          NEW.DtaHrFim,
          NEW.Anteriores[1],
          NEW.CodEmbarque,
          vDiferenca <= 0,
          vDiferenca,
          NEW.Anteriores || NEW.CodEmbarque::INTEGER,
          (SELECT ARRAY_AGG(CodEmpTra) FROM Embarque WHERE CodEmbarque IN (SELECT UNNEST(NEW.Anteriores || NEW.CodEmbarque::INTEGER))),
          (SELECT ARRAY_AGG(CodEmpEmbar) FROM Embarque WHERE CodEmbarque IN (SELECT UNNEST(NEW.Anteriores || NEW.CodEmbarque::INTEGER)))
        );
          
      END IF;
    END IF;
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_after_u_embarque_atualizarkpiciclocircuito() OWNER TO postgres;

--
-- TOC entry 1677 (class 1255 OID 12712784)
-- Name: tf_after_u_embarque_programado(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_u_embarque_programado() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
  vVelMedia FLOAT;
BEGIN
  -- se foi finalizado, cancelado ou sinistrado,
  -- iniciamos o proximo programado
  IF 
    (NEW.DtaHrFim IS NOT NULL AND OLD.DtaHrFim IS NULL) OR
    (NEW.DtaHrCancelado IS NOT NULL AND OLD.DtaHrCancelado IS NULL) OR
    (NEW.DtaHrSinistrado IS NOT NULL AND OLD.DtaHrSinistrado IS NULL)
  THEN
    WITH tmp_proximoEmbarque AS (
        SELECT Embarque.CodEmbarque 
          FROM Embarque
         WHERE Embarque.CodVeic = OLD.CodVeic
           AND Embarque.CodEmbarque != OLD.CodEmbarque
           AND Embarque.CodStatEmbarque = 10
      ORDER BY Embarque.DtaHrPrevIni ASC
         LIMIT 1
    ),

    tmp_codembarque AS (
         UPDATE Embarque 
            SET CodStatEmbarque = 1
           FROM tmp_proximoEmbarque t
          WHERE Embarque.CodEmbarque = t.CodEmbarque
      RETURNING Embarque.CodEmbarque
    )

    UPDATE Carga
       SET CodStatCarga = 2
     WHERE CodStatCarga != 2
       AND CodCarga IN (
            SELECT EmbarqueCarga.CodCarga 
              FROM EmbarqueCarga,
                   tmp_codembarque
             WHERE EmbarqueCarga.CodEmbarque = tmp_codembarque.CodEmbarque
           );
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_after_u_embarque_programado() OWNER TO postgres;

--
-- TOC entry 1632 (class 1255 OID 11286343)
-- Name: tf_after_u_embarque_rotograma(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_u_embarque_rotograma() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	vVelMedia FLOAT;
BEGIN
	IF NEW.Veic_UltPos_DtaHr IS NOT NULL AND NEW.Veic_UltPos_DtaHr IS DISTINCT FROM OLD.Veic_UltPos_DtaHr THEN
		--IF NEW.DtaHrIni IS NOT NULL THEN
			vVelMedia := f_config('VELOCIDADE_MEDIA')::FLOAT;

			UPDATE EmbarqueCarga
			SET DistanciaPercorrida = CASE WHEN DtaHrIniEntrega IS NULL THEN NEW.DistanciaPercorrida ELSE Distancia END,
				DtaHrFimCalculada = CASE WHEN DtaHrIniEntrega IS NULL THEN
						f_chegadaCalculada(NEW.Veic_UltPos_DtaHr,NEW.Veic_UltPos_Lat,NEW.Veic_UltPos_Long,EmpDest_Pos_Lat,EmpDest_Pos_Long,vVelMedia)
					ELSE 
						NULL
					END
			WHERE EmbarqueCarga.CodEmbarque = NEW.CodEmbarque;
		--END IF;
	END IF;

	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_after_u_embarque_rotograma() OWNER TO postgres;

--
-- TOC entry 1633 (class 1255 OID 11286344)
-- Name: tf_after_u_progcoleta_atualizagrupos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_after_u_progcoleta_atualizagrupos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	vRec RECORD;
	
BEGIN
	IF OLD.DtaHrCancelado IS NULL AND NEW.DtaHrCancelado IS NOT NULL THEN
		FOR vRec IN 
			SELECT DISTINCT c.CodCargaGrupo 
			FROM Carga c, ProgColetaCarga ec
			WHERE ec.CodCarga = c.CodCarga
			AND ec.CodProgColeta = NEW.CodProgColeta
			AND c.CodCargaGrupo IS NOT NULL
		LOOP
			PERFORM f_atualizaInformacoesGrupo(vRec.CodCargaGrupo);
		END LOOP;
	END IF;
	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_after_u_progcoleta_atualizagrupos() OWNER TO postgres;

--
-- TOC entry 1634 (class 1255 OID 11286345)
-- Name: tf_auto_log(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_auto_log() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$

DECLARE
  vTemp HSTORE;
  vChave TEXT;
  vChaveValor TEXT;
  vRow RECORD;
  vTempRow RECORD;
  vLog Log_Alteracoes;
  vTotalKeys INT := 0;
BEGIN

  -- pega a chave primaria da tabela em questão.
  SELECT               
    pg_attribute.attname, count(*) over()
  INTO
    vChave, vTotalKeys
  FROM pg_index, pg_class, pg_attribute 
  WHERE 
    pg_class.oid = TG_TABLE_NAME::regclass AND
    indrelid = pg_class.oid AND
    pg_attribute.attrelid = pg_class.oid AND 
    pg_attribute.attnum = any(pg_index.indkey)
    AND indisprimary;
    
  IF COALESCE(vTotalKeys,0) <> 1 THEN
    RAISE NOTICE 'The table must have only one primary key to be logged';
    IF TG_OP = 'DELETE' THEN
      RETURN OLD;
    ELSE 
      RETURN NEW;
    END IF;
  END IF;

  -- transforma os dados da linha em hstore
  IF TG_OP = 'DELETE' THEN
    vTempRow := OLD;
  ELSE
    vTempRow := NEW;
  END IF;
  
  vTemp := HSTORE(vTempRow.*);

  -- inicia os dados de log
  vLog.Data_Alteracao := NOW();
  vLog.Nome_Chave := vChave;
  
  -- codigo do usuario que está fazendo a ação
  SELECT codusr INTO vLog.CodUsr FROM temp_codusr;

  -- pega o valor da chave primaria
  SELECT value INTO vLog.Valor_Chave FROM each(vTemp) WHERE key = vChave;
  vLog.Tabela := TG_TABLE_NAME;

  -- vendo o tipo de operação
  IF TG_OP = 'INSERT' THEN
    vLog.Tipo := 1;
    vLog.Valores_Novos := NULL;
    vLog.Valores_Antigos := NULL;
  ELSIF TG_OP = 'UPDATE' THEN
    IF HSTORE('') = HSTORE(NEW.*) - HSTORE(OLD.*) THEN
      RAISE NOTICE 'Nothing changed. No need to log';
      RETURN NEW;
    END IF;
    vLog.Tipo := 2;
    vLog.Valores_Novos := HSTORE(NEW.*) - HSTORE(OLD.*);
    vLog.Valores_Antigos := SLICE( HSTORE(OLD.*),  AKEYS(HSTORE(NEW.*) - HSTORE(OLD.*)) );
  ELSE 
    vLog.Tipo := 3;
    vLog.Valores_Antigos := HSTORE(OLD.*);
  END IF;

  -- gravando o log
  EXECUTE 'INSERT INTO Log_Alteracoes (data_alteracao,nome_chave,valor_chave,tabela,tipo,valores_novos,valores_antigos,codusr)  
    SELECT $1.data_alteracao,$1.nome_chave,$1.valor_chave,$1.tabela,$1.tipo,$1.valores_novos,$1.valores_antigos,$1.codusr' USING vLog;

  -- retornando o tipo apropriado
  IF TG_OP = 'DELETE' THEN
    RETURN OLD;
  ELSE 
    RETURN NEW;
  END IF;
  
  EXCEPTION 
    WHEN undefined_table THEN
      RETURN NEW;
END;
$_$;


ALTER FUNCTION public.tf_auto_log() OWNER TO postgres;

--
-- TOC entry 1635 (class 1255 OID 11286346)
-- Name: tf_before_i_bid_transp(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_bid_transp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF NEW.embarques IS NULL THEN
		NEW.embarques := '{}'::INTEGER[];
	END IF;
	
	IF NEW.ofertas IS NULL THEN
		NEW.ofertas := '{}'::INTEGER[];
	END IF;
	
	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_before_i_bid_transp() OWNER TO postgres;

--
-- TOC entry 1636 (class 1255 OID 11286347)
-- Name: tf_before_i_bidhist(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_bidhist() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
  DECLARE 
    vTablename VARCHAR;
    vSql TEXT;
  BEGIN
    vTablename := 'bid_hist_' || TO_CHAR(NEW.Dta,'YYYYMM');
    
    IF NOT EXISTS(SELECT 1 FROM information_schema.tables WHERE Table_Name = vTablename) THEN
      PERFORM f_createchildtable('bid_hist', 'dta', NEW.Dta::TIMESTAMPTZ);
    END IF;
    
    -- insere na tabela certa
    EXECUTE 'INSERT INTO ' || QUOTE_IDENT(vTablename) || ' SELECT $1.*' USING NEW;

    RETURN NULL;
  END;
$_$;


ALTER FUNCTION public.tf_before_i_bidhist() OWNER TO postgres;

--
-- TOC entry 1637 (class 1255 OID 11286348)
-- Name: tf_before_i_carga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_carga() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$

DECLARE
  vTablename VARCHAR := f_createChildCarga(NEW.DtaHrIncl);
  vCmd TEXT;
BEGIN
  vCmd := FORMAT('INSERT INTO dados_carga.%s SELECT $1.*', vTablename);
  EXECUTE vCmd USING NEW;
  RETURN NULL;
END;
$_$;


ALTER FUNCTION public.tf_before_i_carga() OWNER TO postgres;

--
-- TOC entry 1674 (class 1255 OID 11597006)
-- Name: tf_before_i_dados_integracao(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_dados_integracao() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$

  DECLARE
    vSchema VARCHAR(20) := 'integracao';
    vTablename VARCHAR(50);
    vExists BOOLEAN := FALSE;
    vDtaHrIni TIMESTAMPTZ;
    vDtaHrFim TIMESTAMPTZ;
    vSQL TEXT;

  BEGIN
    vDtaHrIni := date_trunc('week', NEW.DtaHrIncl);
    vDtaHrFim := vDtaHrIni + INTERVAL '7 day -1 millisecond';

    vTablename := FORMAT(
      '%s_%s_%s_%s', 
      TG_TABLE_NAME,
      TO_CHAR(vDtaHrIni, 'YYYYMMDD'),
      TO_CHAR(vDtaHrFim, 'MMDD'),
      DATE_PART('w', vDtaHrIni)
    );

    SELECT TRUE
      INTO vExists
      FROM Information_Schema.Tables
     WHERE Table_Name = vTablename
       AND Table_Schema = vSchema;
    
    IF NOT COALESCE(vExists, FALSE) THEN
      vSQL := FORMAT('CREATE TABLE %s.%s (CHECK(DtaHrIncl BETWEEN ''%s'' AND ''%s'')) INHERITS (%s)',
        vSchema,
        vTablename,
        vDtaHrIni,
        vDtaHrFim,
        TG_TABLE_NAME
      );
      EXECUTE vSQL;
    END IF;

    EXECUTE FORMAT('INSERT INTO %s.%s SELECT $1.*', vSchema, vTablename) USING NEW;

    RETURN NULL;
  END;

$_$;


ALTER FUNCTION public.tf_before_i_dados_integracao() OWNER TO postgres;

--
-- TOC entry 1676 (class 1255 OID 12712782)
-- Name: tf_before_i_embarque_programado(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_embarque_programado() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

  BEGIN
    SELECT CASE WHEN r.total > 0 THEN 10 ELSE 1 END
      INTO NEW.CodStatEmbarque
      FROM (
        SELECT COUNT(*) as total
          FROM Embarque 
         WHERE Embarque.CodVeic = NEW.CodVeic
           AND Embarque.CodStatEmbarque NOT IN (3,4,5)
      ) r;

    RETURN NEW;
  END;
$$;


ALTER FUNCTION public.tf_before_i_embarque_programado() OWNER TO postgres;

--
-- TOC entry 1638 (class 1255 OID 11286349)
-- Name: tf_before_i_empjanela(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_empjanela() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  vTablename VARCHAR := TG_TABLE_NAME || '_' || TO_CHAR(NEW.DtaHrIni,'YYYYMM');
BEGIN
  PERFORM f_createChildTable(TG_TABLE_NAME::VARCHAR,'DtaHrIni'::VARCHAR,NEW.DtaHrIni);
  EXECUTE 'INSERT INTO ' || QUOTE_IDENT(vTablename) || ' SELECT $1.*' USING NEW;
  
  -- previne de inserir na pai, inserindo somente nas filhas
  RETURN NULL;
END;
$_$;


ALTER FUNCTION public.tf_before_i_empjanela() OWNER TO postgres;

--
-- TOC entry 1639 (class 1255 OID 11286350)
-- Name: tf_before_i_log_alteracoes(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_log_alteracoes() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$

  DECLARE
    vSql TEXT;
    vRow RECORD;
    vDtaHr TIMESTAMPTZ := NEW.Data_Alteracao;
    vSchema VARCHAR := 'alteracoes';
    vDtaHrIni TIMESTAMPTZ := DATE_TRUNC('WEEK', vDtaHr);
    vDtaHrFim TIMESTAMPTZ := DATE_TRUNC('WEEK', vDtaHr) + INTERVAL '7 DAY - 1 MILLISECONDS';
    vTablename VARCHAR(50) := 'log_alteracoes_' || TO_CHAR(vDtaHrIni, 'YYYYMMDD') || '_' || TO_CHAR(vDtaHrFim,'MMDD') || '_w' || DATE_PART('WEEK', vDtaHr);
  BEGIN
    IF NOT EXISTS(SELECT 1 FROM information_schema.tables WHERE TABLE_NAME = vTablename AND TABLE_SCHEMA = vSchema) THEN
      EXECUTE 'CREATE TABLE ' || vSchema || '.' || vTablename || ' 
         (CHECK(Data_Alteracao BETWEEN ''' || vDtaHrIni || ''' AND ''' || vDtaHrFim || ''')) INHERITS (public.log_alteracoes)';
         
      FOR vRow IN
        SELECT
          'CREATE INDEX ' || vTableName || '_' || ARRAY_TO_STRING(ARRAY_AGG(a.attname), '_') ||
          ' ON ' || vSchema || '.' || vTableName || '(' || ARRAY_TO_STRING(ARRAY_AGG(a.attname), ', ') || '); ' AS cmd
        FROM
          pg_class t,
          pg_class i,
          pg_index ix,
          pg_attribute a

        WHERE
          t.relkind = 'r' AND
          t.relname = 'log_alteracoes' AND
          t.oid = ix.indrelid AND
                  ix.indexrelid = i.oid AND
                  ix.indisprimary = false AND /* Vai ser adicionado como PK */
          t.oid = a.attrelid AND
                  a.attnum = ANY(ix.indkey)
        GROUP BY
          t.relname,
          i.relname
        ORDER BY
          t.relname
      LOOP
        EXECUTE vRow.cmd;
      END LOOP;

      FOR vRow IN
        SELECT 'ALTER TABLE ' || vSchema || '.' || vTableName || ' ADD ' || pg_catalog.pg_get_constraintdef(r.oid, true) as cmd
          FROM pg_catalog.pg_constraint r,
               pg_catalog.pg_class c
         WHERE r.contype in('p', 'f') AND -- PK e FK
               r.conrelid = c.oid AND
                            c.relname = 'log_alteracoes'
      LOOP
        EXECUTE vRow.cmd;
      END LOOP;
    END IF;
    
    EXECUTE 'INSERT INTO ' || vSchema || '.' || vTablename || ' SELECT $1.*' USING NEW;
    
    RETURN NULL;
  END;
$_$;


ALTER FUNCTION public.tf_before_i_log_alteracoes() OWNER TO postgres;

--
-- TOC entry 1673 (class 1255 OID 11286351)
-- Name: tf_before_i_pos_child(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_pos_child() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vVincEquipRastr RECORD;

BEGIN
  IF COALESCE(new.TpPtoRef, -1) < 0 THEN
    SELECT
      TpPtoRef,
      CodPtoRef,
      NomePtoRef,
      Angulo,
      Dist
    FROM
      F_DescrPos(new.Long, new.Lat)
    INTO
      new.TpPtoRef,
      new.CodPtoRef,
      new.NomePtoRef,
      new.Angulo,
      new.Dist;
  END IF;

  FOR vVincEquipRastr IN
    SELECT
      VincEquipRastr.Eh_RastrMovel,
      VincEquipRastr.CodTpEntidade,
      VincEquipRastr.CodEntidade
    FROM
      VincEquipRastr
    WHERE
      VincEquipRastr.CodTecRastr = new.CodTecRastr AND
      VincEquipRastr.IdEquipRastr = new.IdEquipRastr AND

      new.DtaHr BETWEEN VincEquipRastr.DtaHrIncl
                    AND COALESCE(VincEquipRastr.DtaHrDesat, new.DtaHr)

  LOOP
    IF vVincEquipRastr.CodTpEntidade = 2 THEN
      IF NOT vVincEquipRastr.Eh_RastrMovel THEN
        UPDATE
          Embarque
        SET
          Veic_UltPos_DtaHr = new.DtaHr,
          Veic_UltPos_Long = new.Long,
          Veic_UltPos_Lat = new.Lat
        WHERE
          Embarque.CodEmbarque = vVincEquipRastr.CodEntidade;

        PERFORM F_AlvoEmbarqueCarga(vVincEquipRastr.CodEntidade, new.DtaHr, new.Long, new.Lat);
        PERFORM f_alvoTpEvento(vVincEquipRastr.CodEntidade, new.DtaHr, new.Long, new.Lat);
      ELSE
        UPDATE
          Embarque
        SET
          RastrMovel_UltPos_DtaHr = new.DtaHr,
          RastrMovel_UltPos_Long = new.Long,
          RastrMovel_UltPos_Lat = new.Lat
        WHERE
          Embarque.CodEmbarque = vVincEquipRastr.CodEntidade;
      END IF;
    ELSIF vVincEquipRastr.CodTpEntidade = 10 THEN
      UPDATE
        EmbarqueCarga
      SET
        RastrMovel_UltPos_DtaHr = new.DtaHr,
        RastrMovel_UltPos_Long = new.Long,
        RastrMovel_UltPos_Lat = new.Lat
      WHERE
        EmbarqueCarga.CodEmbarqueCarga = vVincEquipRastr.CodEntidade;
    ELSIF vVincEquipRastr.CodTpEntidade = 11 THEN
      UPDATE
        EmbarqueCarreta
      SET
        Carreta_UltPos_DtaHr = new.DtaHr,
        Carreta_UltPos_Long = new.Long,
        Carreta_UltPos_Lat = new.Lat
      WHERE
        EmbarqueCarreta.CodEmbarqueCarreta = vVincEquipRastr.CodEntidade;
    ELSIF vVincEquipRastr.CodTpEntidade = 7 THEN
      UPDATE
        Veic
      SET
        UltPos_DtaHr = new.DtaHr,
        UltPos_Long = new.Long,
        UltPos_Lat = new.Lat
      WHERE
        Veic.CodVeic = vVincEquipRastr.CodEntidade;
    ELSIF vVincEquipRastr.CodTpEntidade = 8 THEN
      UPDATE
        Carreta
      SET
        UltPos_DtaHr = new.DtaHr,
        UltPos_Long = new.Long,
        UltPos_Lat = new.Lat
      WHERE
        Carreta.CodCarreta = vVincEquipRastr.CodEntidade;
    ELSIF vVincEquipRastr.CodTpEntidade = 9 THEN
      UPDATE
        RastrMovel
      SET
        UltPos_DtaHr = new.DtaHr,
        UltPos_Long = new.Long,
        UltPos_Lat = new.Lat
      WHERE
        RastrMovel.CodRastrMovel = vVincEquipRastr.CodEntidade;
    END IF;
  END LOOP;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_before_i_pos_child() OWNER TO postgres;

--
-- TOC entry 1642 (class 1255 OID 11286352)
-- Name: tf_before_i_pos_parent(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_pos_parent() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  vTablename VARCHAR;

BEGIN
  IF (new.DtaHr <= '2013-07-31 07:04:44-03') THEN -- teve que ser trocado em producao
    vTableName := 'pos_' || TO_CHAR(new.DtaHr, 'YYYYMM');
    IF NOT EXISTS (SELECT 1 FROM Information_Schema.Tables WHERE Table_Name = vTableName) THEN
      PERFORM F_CreatePosTable(vTableName);
    END IF;
  ELSE
    SELECT * INTO vTableName FROM F_CreateChildPos(new.DtaHr);
  END IF;

  EXECUTE 'INSERT INTO ' || vTablename || ' SELECT $1.*' USING NEW;

  RETURN NULL;
END;
$_$;


ALTER FUNCTION public.tf_before_i_pos_parent() OWNER TO postgres;

--
-- TOC entry 1643 (class 1255 OID 11286353)
-- Name: tf_before_i_temp_child(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_temp_child() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vCurRec RECORD;
  vAlertaUpdated BOOLEAN = FALSE;
  vTemRegTempUpdated BOOLEAN = FALSE;

BEGIN
  FOR vCurRec IN

    SELECT DISTINCT -- DISTINCT pode trazer mais de um registro. Por isso do ctrl v*Updated
      Embarque.CodEmbarque,
      Embarque.TemRegTemp,
      Embarque.AlertaTemperatura,

      CASE
        WHEN new.Temperatura NOT BETWEEN Embarque.TpCarga_TempLimiteMinimo
                                     AND Embarque.TpCarga_TempLimiteMaximo THEN TRUE
                                                                          ELSE FALSE
      END AS TemperaturaForaDoRange

    FROM
      VincEquipRastr

      JOIN Embarque
        ON Embarque.CodEmbarque =  VincEquipRastr.CodEntidade
       AND Embarque.Climatizada = TRUE

    WHERE
      VincEquipRastr.CodTpEntidade = 2 AND
      VincEquipRastr.CodTecRastr = new.CodTecRastr AND
      VincEquipRastr.IdEquipRastr = new.IdEquipRastr AND

      new.DtaHr BETWEEN VincEquipRastr.DtaHrIncl
                    AND COALESCE(VincEquipRastr.DtaHrDesat, new.DtaHr)

  LOOP

    IF NOT vAlertaUpdated AND NOT vCurRec.AlertaTemperatura AND vCurRec.TemperaturaForaDoRange THEN

      vAlertaUpdated := TRUE;
      vTemRegTempUpdated := TRUE;

      UPDATE Embarque
         SET TemRegTemp = TRUE, AlertaTemperatura = TRUE
       WHERE Embarque.CodEmbarque = vCurRec.CodEmbarque;

    ELSEIF NOT vTemRegTempUpdated AND NOT vCurRec.TemRegTemp THEN

      vTemRegTempUpdated := TRUE;

      UPDATE Embarque
         SET TemRegTemp = TRUE
       WHERE Embarque.CodEmbarque = vCurRec.CodEmbarque;

    END IF;

  END LOOP;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_before_i_temp_child() OWNER TO postgres;

--
-- TOC entry 1644 (class 1255 OID 11286354)
-- Name: tf_before_i_temp_parent(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_i_temp_parent() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
BEGIN
  EXECUTE 'INSERT INTO ' || (SELECT * FROM F_CreateChildTemp(new.DtaHr)) || ' SELECT $1.*' USING NEW;
  RETURN NULL;
END;
$_$;


ALTER FUNCTION public.tf_before_i_temp_parent() OWNER TO postgres;

--
-- TOC entry 1645 (class 1255 OID 11286355)
-- Name: tf_before_iu_embarque(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_iu_embarque() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

  CONST_ATRASADO INTEGER DEFAULT 1;
  CONST_NO_PRAZO INTEGER DEFAULT 2;
  
  CONST_STAT_REALIZADO INT DEFAULT 5;
  CONST_STAT_CANCELADO INT DEFAULT 8;
  CONST_STAT_SINISTRADO INT DEFAULT 7;
  CONST_STAT_AG_REDESPACHO INT DEFAULT 3;

  USR_INTEGRADOR INT DEFAULT 2;
  
  vCodSitEmbarque INTEGER DEFAULT NULL;

  vCodUsrStat INTEGER;
  vStatDescr VARCHAR(20);
  vStatDefineFim BOOLEAN;
  vStatDefineInicio BOOLEAN;
  vStatDefineSinistro BOOLEAN;
  vStatDefineCancelado BOOLEAN;

  vCodUsrSit INTEGER;
  vSitDescr VARCHAR(255);
  vSitTiraAtraso BOOLEAN;
  vSitDefineAtraso BOOLEAN;
  vSitDefineRetorno BOOLEAN;
  
  vCodRegistro BIGINT;
  vTipoPrazoTransito INT;
  vTipoPrazoTransitoCfg INT;
  
BEGIN
  vCodUsrStat := -1;
  vCodUsrSit := -1;

  IF new.CodEmpTNF IS NOT NULL AND (tg_op = 'INSERT' OR new.CodEmpTNF <> COALESCE(old.CodEmpTNF, 0)) THEN
    SELECT id,emp.nome,logradouro,bairro,cep,emp.codciduf,ciduf.nome,emp.pos_lat,emp.pos_long,pos_area 
    INTO new.emptnf_id, new.emptnf_nome,new.emptnf_logradouro,new.emptnf_bairro,new.emptnf_cep,new.emptnf_codciduf,new.emptnf_nomeciduf,new.emptnf_pos_lat,new.emptnf_pos_long,new.emptnf_pos_area
    FROM Emp LEFT JOIN CidUf ON Emp.CodCidUf = CidUf.CodCidUf
    WHERE Emp.CodEmp = new.CodEmpTNF;
  END IF;
  
  IF tg_op = 'INSERT' THEN
    IF new.CodUsrStatEmbarque IS NULL THEN
      new.CodUsrStatEmbarque := new.CodUsrIncl;
    END IF;

    vCodUsrStat := new.CodUsrStatEmbarque;

    IF new.CodSitEmbarque IS NOT NULL THEN
      IF new.CodUsrSitEmbarque IS NULL THEN
        new.CodUsrSitEmbarque := new.CodUsrIncl;
      END IF;

      vCodUsrSit := new.CodUsrSitEmbarque;
    END IF;
  ELSE
    IF old.CodStatEmbarque IS DISTINCT FROM new.CodStatEmbarque THEN
      IF new.CodUsrStatEmbarque IS NULL THEN
        new.CodUsrStatEmbarque := new.CodUsrAlter;
      END IF;
      
      vCodUsrStat := new.CodUsrStatEmbarque;

      IF vCodUsrStat IS NULL THEN
        vCodUsrStat := -1;
      END IF;
    END IF;

    IF old.CodSitEmbarque IS DISTINCT FROM new.CodSitEmbarque THEN
      IF new.CodUsrSitEmbarque IS NULL THEN
        new.CodUsrSitEmbarque := new.CodUsrAlter;
      END IF;

      vCodUsrSit := new.CodUsrSitEmbarque;
                
      IF vCodUsrSit IS NULL THEN
        vCodUsrSit := -1;
      END IF;
    END IF;
      
    IF new.CodUsrAlter IS NOT NULL AND new.DtaHrAlter IS NULL THEN
      new.DtaHrAlter := Now();
    END IF;
  END IF;

  IF vCodUsrStat <> -1 THEN
    SELECT
      StatEmbarque.Descr,
      StatEmbarque.DefineFim,
      StatEmbarque.DefineInicio,
      StatEmbarque.DefineSinistro,
      StatEmbarque.DefineCancelado
    INTO
      vStatDescr,
      vStatDefineFim,
      vStatDefineInicio,
      vStatDefineSinistro,
      vStatDefineCancelado
    FROM
      StatEmbarque
    WHERE
      StatEmbarque.CodStatEmbarque = new.CodStatEmbarque;

    new.DescrStatEmbarque := vStatDescr;

   
    IF new.DtaHrStatEmbarque IS NULL THEN
      new.DtaHrStatEmbarque := Now();
    END IF;

    IF vStatDefineCancelado THEN
      new.DtaHrCancelado := NOW();
    END IF;

    IF vStatDefineFim THEN
    
      IF new.DtaHrFim IS NULL THEN
        new.DtaHrFim := Now();
      END IF;
    
      -- atualiza as cargas para "realizado" quando o tipo de operacao nao tem redespacho
      UPDATE carga SET CodStatCarga = CONST_STAT_REALIZADO, CodUsrStatCarga = vCodUsrStat WHERE CodUltEmbarque = new.CodEmbarque
      AND Carga.CodStatCarga NOT IN (CONST_STAT_REALIZADO,CONST_STAT_CANCELADO,CONST_STAT_SINISTRADO,CONST_STAT_AG_REDESPACHO)
      AND (
        SELECT TpOper.TemRedespacho
        FROM TpOper, EmbarqueCarga
        WHERE EmbarqueCarga.CodCarga = Carga.CodCarga
          AND EmbarqueCarga.CodEmbarque = new.CodEmbarque
          AND EmbarqueCarga.CodTpOper = TpOper.CodTpOper
        LIMIT 1
      ) = FALSE;
    
      -- atualiza as cargas para "ag. redespacho" quando o tipo de operacao tem redespacho
      UPDATE carga SET CodStatCarga = CONST_STAT_AG_REDESPACHO, CodUsrStatCarga = vCodUsrStat WHERE CodUltEmbarque = new.CodEmbarque
      AND Carga.CodStatCarga NOT IN (CONST_STAT_REALIZADO,CONST_STAT_CANCELADO,CONST_STAT_SINISTRADO,CONST_STAT_AG_REDESPACHO)
      AND (
        SELECT TpOper.TemRedespacho
        FROM TpOper, EmbarqueCarga
        WHERE EmbarqueCarga.CodCarga = Carga.CodCarga
          AND EmbarqueCarga.CodEmbarque = new.CodEmbarque
          AND EmbarqueCarga.CodTpOper = TpOper.CodTpOper
        LIMIT 1
      ) = TRUE;
    
  
    END IF;

    IF vStatDefineInicio THEN
      IF new.DtaHrIniPlanta IS NULL THEN
        new.DtaHrIniPlanta := Now();
      END IF;
    
      IF new.DtaHrIni IS NULL THEN
        new.DtaHrIni := Now();
      END IF;
      
      -- atualiza as cargas para "em transito"
      UPDATE carga SET CodStatCarga = 4, CodUsrStatCarga = vCodUsrStat WHERE CodUltEmbarque = new.CodEmbarque
      AND Carga.CodStatCarga NOT IN (CONST_STAT_REALIZADO,CONST_STAT_CANCELADO,CONST_STAT_SINISTRADO,CONST_STAT_AG_REDESPACHO);
    END IF;
    
    IF vStatDefineSinistro AND new.DtaHrSinistrado IS NULL THEN
      new.DtaHrSinistrado := Now();
    -- atualiza as cargas para "sinistrado"
      UPDATE carga SET CodStatCarga = CONST_STAT_SINISTRADO, CodUsrStatCarga = vCodUsrStat WHERE CodUltEmbarque = new.CodEmbarque
      AND Carga.CodStatCarga NOT IN (CONST_STAT_REALIZADO,CONST_STAT_CANCELADO,CONST_STAT_SINISTRADO,CONST_STAT_AG_REDESPACHO);
    END IF;

  END IF;

  -- ------------------------------------------------------------
  -- Alteracoes para atualizar a situacao do embarque conforme
  -- horarios. Hugo, 06/05/2011  
  -- ------------------------------------------------------------
  IF tg_op = 'UPDATE' THEN
    IF old.DtaHrIni IS NULL AND new.DtaHrIni IS NOT NULL THEN
    IF new.DtaHrIni < new.DtaHrPrevIni THEN
      vCodSitEmbarque := CONST_NO_PRAZO;
    ELSE
      vCodSitEmbarque := CONST_ATRASADO;
    END IF;
  END IF;
  
  IF old.DtaHrFim IS NULL AND new.DtaHrFim IS NOT NULL THEN
    IF new.DtaHrFim < new.DtaHrPrevFim THEN
      vCodSitEmbarque := CONST_NO_PRAZO;
    ELSE
      vCodSitEmbarque := CONST_ATRASADO;
    END IF;
  END IF;
  
  IF vCodSitEmbarque IS NOT NULL THEN
    new.CodSitEmbarque := vCodSitEmbarque;
  END IF;
  END IF;
  -- ------------------------------------------------------------

  IF vCodUsrSit <> -1 THEN
    SELECT
      SitEmbarque.Descr,
      SitEmbarque.TiraAtraso,
      SitEmbarque.DefineAtraso,
      SitEmbarque.DefineRetorno
    INTO
      vSitDescr,
      vSitTiraAtraso,
      vSitDefineAtraso,
      vSitDefineRetorno
    FROM
      SitEmbarque
    WHERE
      SitEmbarque.CodSitEmbarque = new.CodSitEmbarque;

    new.DescrSitEmbarque := vSitDescr;

    IF new.DtaHrSitEmbarque IS NULL THEN
      new.DtaHrSitEmbarque := Now();
    END IF;

    IF vSitTiraAtraso THEN
      new.DtaHrNaoAtrasado := Now();
    END IF;

    IF vSitDefineAtraso THEN
      new.DtaHrAtrasado := Now();
      new.DtaHrNaoAtrasado := NULL;
    END IF;
    
    IF vSitDefineRetorno AND new.DtaHrRetorno IS NULL THEN
      new.DtaHrRetorno := Now();
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR old.CodMoeda IS DISTINCT FROM new.CodMoeda THEN
    SELECT
      Moeda.Sigla
    INTO
      new.Moeda_Sigla
    FROM
      Moeda
    WHERE
      Moeda.CodMoeda = new.CodMoeda;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodMot1, old.Mot1_Id) IS DISTINCT FROM (new.CodMot1, new.Mot1_Id) THEN
    vCodRegistro := NULL;
      
    IF new.Mot1_Id IS NOT NULL THEN
      SELECT
        Mot.CodMot
      INTO
        vCodRegistro
      FROM
        Mot
      WHERE
        Mot.Id = new.Mot1_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodMot1;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Mot.CodMot,
        Mot.Id,
        Mot.Nome
      INTO
        new.CodMot1,
        new.Mot1_Id,
        new.Mot1_Nome
      FROM
        Mot
      WHERE
        Mot.CodMot = vCodRegistro;
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodMot2, old.Mot2_Id) IS DISTINCT FROM (new.CodMot2, new.Mot2_Id) THEN
    vCodRegistro := NULL;
      
    IF new.Mot2_Id IS NOT NULL THEN
      SELECT
        Mot.CodMot
      INTO
        vCodRegistro
      FROM
        Mot
      WHERE
        Mot.Id = new.Mot2_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodMot2;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Mot.CodMot,
        Mot.Id,
        Mot.Nome
      INTO
        new.CodMot2,
        new.Mot2_Id,
        new.Mot2_Nome
      FROM
        Mot
      WHERE
        Mot.CodMot = vCodRegistro;
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodVeic, old.Veic_Id) IS DISTINCT FROM (new.CodVeic, new.Veic_Id) THEN
    vCodRegistro := NULL;
      
    IF new.Veic_Id IS NOT NULL THEN
      SELECT
        Veic.CodVeic
      INTO
        vCodRegistro
      FROM
        Veic
      WHERE
        Veic.Id = new.Veic_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodVeic;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Veic.CodVeic,
        Veic.Id,
        Veic.Cor,
        Veic.Modelo,
        Veic.CodTecRastr,
       (SELECT TecRastr.Nome FROM TecRastr WHERE TecRastr.CodTecRastr = Veic.CodTecRastr),
        Veic.IdEquipRastr,
        Veic.UltPos_Long,
        Veic.UltPos_Lat,
        Veic.UltPos_DtaHr,
        Veic.UltPos_Descr
      INTO
        new.CodVeic,
        new.Veic_Id,
        new.Veic_Cor,
        new.Veic_Modelo,
        new.Veic_CodTecRastr,
        new.Veic_NomeTecRastr,
        new.Veic_IdEquipRastr,
        new.Veic_UltPos_Long,
        new.Veic_UltPos_Lat,
        new.Veic_UltPos_DtaHr,
        new.Veic_UltPos_Descr
      FROM
        Veic
      WHERE
        Veic.CodVeic = vCodRegistro;
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR old.CodRastrMovel IS DISTINCT FROM new.CodRastrMovel THEN
    SELECT
      RastrMovel.Modelo,
      RastrMovel.CodTecRastr,
     (SELECT TecRastr.Nome FROM TecRastr WHERE TecRastr.CodTecRastr = RastrMovel.CodTecRastr),
      RastrMovel.IdEquipRastr,
      RastrMovel.UltPos_Long,
      RastrMovel.UltPos_Lat,
      RastrMovel.UltPos_DtaHr,
      RastrMovel.UltPos_Descr
    INTO
      new.RastrMovel_Modelo,
      new.RastrMovel_CodTecRastr,
      new.RastrMovel_NomeTecRastr,
      new.RastrMovel_IdEquipRastr,
      new.RastrMovel_UltPos_Long,
      new.RastrMovel_UltPos_Lat,
      new.RastrMovel_UltPos_DtaHr,
      new.RastrMovel_UltPos_Descr
    FROM
      RastrMovel
    WHERE
      RastrMovel.CodRastrMovel = new.CodRastrMovel;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodEmpEmbar, old.EmpEmbar_Id) IS DISTINCT FROM (new.CodEmpEmbar, new.EmpEmbar_Id) THEN
    vCodRegistro := NULL;
      
    IF new.EmpEmbar_Id IS NOT NULL THEN
      SELECT
        Emp.CodEmp
      INTO
        vCodRegistro
      FROM
        Emp
      WHERE
        Emp.Embar = TRUE AND
        Emp.Id = new.EmpEmbar_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodEmpEmbar;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Emp.CodEmp,
        Emp.Id,
        Emp.Nome,
        Emp.CodCidUF,
       (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = Emp.CodCidUF),
        Emp.Pos_Area
      INTO
        new.CodEmpEmbar,
        new.EmpEmbar_Id,
        new.EmpEmbar_Nome,
        new.EmpEmbar_CodCidUF,
        new.EmpEmbar_NomeCidUF,
        new.EmpEmbar_Pos_Area
      FROM
        Emp
      WHERE
        Emp.CodEmp = vCodRegistro;
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodEmpTra, old.EmpTra_Id) IS DISTINCT FROM (new.CodEmpTra, new.EmpTra_Id) THEN
    vCodRegistro := NULL;
     
    IF new.EmpTra_Id IS NOT NULL THEN
      SELECT
        Emp.CodEmp
      INTO
        vCodRegistro
      FROM
        Emp
      WHERE
        Emp.Transp = TRUE AND
        Emp.Id = new.EmpTra_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodEmpTra;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Emp.CodEmp,
        Emp.Id,
        Emp.Nome,
        Emp.CodCidUF,
       (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = Emp.CodCidUF),
        Emp.Pos_Area
      INTO
        new.CodEmpTra,
        new.EmpTra_Id,
        new.EmpTra_Nome,
        new.EmpTra_CodCidUF,
        new.EmpTra_NomeCidUF,
        new.EmpTra_Pos_Area
      FROM
        Emp
      WHERE
        Emp.CodEmp = vCodRegistro;
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodEmpOrig, old.EmpOrig_Id) IS DISTINCT FROM (new.CodEmpOrig, new.EmpOrig_Id) THEN
    vCodRegistro := NULL;
      
    IF new.EmpOrig_Id IS NOT NULL THEN
      SELECT
        Emp.CodEmp
      INTO
        vCodRegistro
      FROM
        Emp
      WHERE
       (Emp.Embar = TRUE OR Emp.Transp = TRUE) AND -- TODO: rever
        Emp.Id = new.EmpOrig_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodEmpOrig;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Emp.CodEmp,
        Emp.Id,
        Emp.Nome,
        Emp.CodCidUF,
       (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = Emp.CodCidUF),
        Emp.Pos_Area,
        Emp.Pos_Lat,
        Emp.Pos_Long
      INTO
        new.CodEmpOrig,
        new.EmpOrig_Id,
        new.EmpOrig_Nome,
        new.EmpOrig_CodCidUF,
        new.EmpOrig_NomeCidUF,
        new.EmpOrig_Pos_Area,
        new.EmpOrig_Pos_Lat,
        new.EmpOrig_Pos_Long
      FROM
        Emp
      WHERE
        Emp.CodEmp = vCodRegistro;
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodEmpDest, old.EmpDest_Id) IS DISTINCT FROM (new.CodEmpDest, new.EmpDest_Id) THEN
    vCodRegistro := NULL;
      
    IF new.EmpDest_Id IS NOT NULL THEN
      SELECT
        Emp.CodEmp
      INTO
        vCodRegistro
      FROM
        Emp
      WHERE
        Emp.Cli = TRUE AND
        Emp.Id = new.EmpDest_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodEmpDest;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Emp.CodEmp,
        Emp.Id,
        Emp.Nome,
        Emp.CodCidUF,
       (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = Emp.CodCidUF),
        Emp.Pos_Area,
        Emp.Pos_Lat,
        Emp.Pos_Long
      INTO
        new.CodEmpDest,
        new.EmpDest_Id,
        new.EmpDest_Nome,
        new.EmpDest_CodCidUF,
        new.EmpDest_NomeCidUF,
        new.EmpDest_Pos_Area,
        new.EmpDest_Pos_Lat,
        new.EmpDest_Pos_Long
      FROM
        Emp
      WHERE
        Emp.CodEmp = vCodRegistro;
    END IF;
  END IF;

  IF tg_op = 'INSERT' OR (old.CodRota, old.Rota_Id) IS DISTINCT FROM (new.CodRota, new.Rota_Id) THEN
    vCodRegistro := NULL;
      
    IF new.Rota_Id IS NOT NULL THEN
      SELECT
        Rota.CodRota
      INTO
        vCodRegistro
      FROM
        Rota
      WHERE
        Rota.Id = new.Rota_Id;
    END IF;

    IF vCodRegistro IS NULL THEN
      vCodRegistro := new.CodRota;
    END IF;
      
    IF vCodRegistro IS NOT NULL THEN
      SELECT
        Rota.CodRota,
        Rota.Id,
        Rota.Descr,
        Rota.ProgPos
      INTO
        new.CodRota,
        new.Rota_Id,
        new.Rota_Descr,
        new.Rota_ProgPos
      FROM
        Rota
      WHERE
        Rota.CodRota = vCodRegistro;
    END IF;
  END IF;
  
  RETURN new;
END
$$;


ALTER FUNCTION public.tf_before_iu_embarque() OWNER TO postgres;

--
-- TOC entry 1646 (class 1255 OID 11286357)
-- Name: tf_before_iu_embarquecarga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_iu_embarquecarga() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    vCodCarga INT;
  vCodRegistro BIGINT;
  vCodSitCarga INTEGER DEFAULT NULL;
  vCodStatCarga INT DEFAULT NULL;
  vTemRedespacho BOOLEAN DEFAULT FALSE;
  
  vCarga Carga;
  
  CONST_ATRASADO           INT DEFAULT 1;
  CONST_NO_PRAZO           INT DEFAULT 2;
  
  CONST_STAT_AG_REDESPACHO INT DEFAULT 3;
  CONST_STAT_EM_TRANSITO   INT DEFAULT 4;
  CONST_STAT_REALIZADO     INT DEFAULT 5;
  CONST_STAT_SINISTRADO    INT DEFAULT 7;
  CONST_STAT_CANCELADO     INT DEFAULT 8;
  CONST_STAT_TNF           INT DEFAULT 26;
  
  USR_INTEGRADOR           INT DEFAULT 2;
  
BEGIN
  IF TG_OP = 'UPDATE' THEN
    vCodCarga := old.CodCarga;
  ELSE
    vCodCarga := new.CodCarga;
  END IF;
    
  -- selecionamos os dados da carga
  SELECT * INTO vCarga FROM Carga WHERE CodCarga = vCodCarga;

  SELECT
    COALESCE(new.CodTpOper, vCarga.CodTpOper),
    COALESCE(new.DtaHrPrevColeta, vCarga.DtaHrPrevColeta),
    COALESCE(new.TempoPrevColeta, vCarga.TempoPrevColeta),
    COALESCE(new.DtaHrPrevEntrega, vCarga.DtaHrPrevEntrega),
    COALESCE(new.TempoPrevEntrega, vCarga.TempoPrevEntrega),
    COALESCE(new.DtaHrPrevFimColeta, vCarga.DtaHrPrevFimColeta),
    COALESCE(new.DtaHrPrevFimEntrega, vCarga.DtaHrPrevFimEntrega),
    COALESCE(new.CodEmpOrig, vCarga.CodEmpOrig),
    COALESCE(new.CodEmpDest, vCarga.CodEmpDest),
    COALESCE(new.CodEmpTra, vCarga.CodEmpTra),
    COALESCE(new.CodEnderecoDest, vCarga.CodEnderecoDest),
    COALESCE(new.TpCarga_TempMinima, vCarga.TpCarga_TempMinima),
    COALESCE(new.TpCarga_TempMaxima, vCarga.TpCarga_TempMaxima),
    COALESCE(new.DtaHrPrevTNF, vCarga.DtaHrPrevTNF),
    COALESCE(new.DtaHrPrevFimTNF, vCarga.DtaHrPrevFimTNF)
    
  INTO
    new.CodTpOper,
    new.DtaHrPrevColeta,
    new.TempoPrevColeta,
    new.DtaHrPrevEntrega,
    new.TempoPrevEntrega,
    new.DtaHrPrevFimColeta,
    new.DtaHrPrevFimEntrega,
    new.CodEmpOrig,
    new.CodEmpDest,
    new.CodEmpTra,
    new.CodEnderecoDest,
    new.TpCarga_TempMinima,
    new.TpCarga_TempMaxima,
    new.DtaHrPrevTNF,
    new.DtaHrPrevFimTNF;
  
  IF TG_OP = 'UPDATE' THEN
    IF old.DtaHrIniColeta IS NULL AND new.DtaHrIniColeta IS NOT NULL THEN
      IF new.DtaHrIniColeta > new.DtaHrPrevColeta THEN
        vCodSitCarga := CONST_ATRASADO;
      ELSE
        vCodSitCarga := CONST_NO_PRAZO;
      END IF;
    END IF;
    
    IF old.DtaHrFimColeta IS NULL AND new.DtaHrFimColeta IS NOT NULL THEN
      IF new.DtaHrFimColeta > new.DtaHrPrevFimColeta THEN
        vCodSitCarga := CONST_ATRASADO;
      ELSE
        vCodSitCarga := CONST_NO_PRAZO;
      END IF;
    END IF;
    
    IF old.DtaHrIniEntrega IS NULL AND new.DtaHrIniEntrega IS NOT NULL THEN
      IF new.DtaHrIniEntrega > new.DtaHrPrevEntrega THEN
        vCodSitCarga := CONST_ATRASADO;
      ELSE
        vCodSitCarga := CONST_NO_PRAZO;
      END IF;
    END IF;
    
    IF old.DtaHrFimEntrega IS NULL AND new.DtaHrFimEntrega IS NOT NULL THEN
      IF new.DtaHrFimEntrega > new.DtaHrPrevFimEntrega THEN
        vCodSitCarga := CONST_ATRASADO;
      ELSE
        vCodSitCarga := CONST_NO_PRAZO;
      END IF;
    END IF;
    
    -- 22/12/2011 - Hugo
    -- atualizando o status da carga para TNF
    IF old.DtaHrIniTNF IS NULL AND new.DtaHrIniTNF IS NOT NULL THEN
      vCodStatCarga := CONST_STAT_TNF;
    END IF;
    
    -- 22/12/2011 - Hugo
    -- atualizando o status da carga para TNF
    -- 13/03/2012 - Hugo
    -- Se tiver codigo de carga origem, coloca como "em transito"
    IF old.DtaHrFimTNF IS NULL AND new.DtaHrFimTNF IS NOT NULL THEN
      IF vCarga.CodCargaOrigem IS NULL THEN
        vCodStatCarga := CONST_STAT_REALIZADO;
      ELSE
        vCodStatCarga := CONST_STAT_EM_TRANSITO;
      END IF;
    END IF;
    
  END IF;
  
  IF vCodSitCarga IS NOT NULL THEN
    UPDATE Carga SET CodSitCarga = vCodSitCarga WHERE Carga.CodCarga = vCodCarga;
  END IF;
  

  IF new.DtaHrIniEntrega IS NOT NULL AND new.DtaHrFimEntrega IS NOT NULL AND new.DtaHrIniColeta IS NOT NULL AND new.DtaHrFimColeta IS NOT NULL AND vCodStatCarga IS NULL THEN
    SELECT TpOper.TemRedespacho INTO vTemRedespacho FROM TpOper WHERE TpOper.CodTpOper = new.CodTpOper;
    
    IF vTemRedespacho = TRUE THEN
      vCodStatCarga := CONST_STAT_AG_REDESPACHO;
    ELSE
      vCodStatCarga := CONST_STAT_REALIZADO;
    END IF;
  END IF;
  
  IF vCodStatCarga IS NOT NULL THEN
    UPDATE Carga SET CodStatCarga = vCodStatCarga, CodUsrStatCarga = USR_INTEGRADOR, DtaHrStatCarga = NOW()
    WHERE Carga.CodCarga = vCodCarga AND Carga.CodStatCarga NOT IN (CONST_STAT_REALIZADO,CONST_STAT_CANCELADO,CONST_STAT_SINISTRADO,CONST_STAT_AG_REDESPACHO);
  END IF;
  
  IF tg_op = 'INSERT' OR COALESCE(NEW.CodEmpTra,0) <> COALESCE(OLD.CodEmpTra,0) THEN
    SELECT Emp.CodEmp, Emp.Id, Emp.Nome, Emp.CodCidUF, (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = Emp.CodCidUF), Emp.Pos_Area, Emp.Pos_Lat, Emp.Pos_Long
    INTO new.CodEmpTra, new.EmpTra_Id, new.EmpTra_Nome, new.EmpTra_CodCidUF, new.EmpTra_NomeCidUF, new.EmpTra_Pos_Area, new.EmpTra_Pos_Lat, new.EmpTra_Pos_Long
    FROM Emp WHERE Emp.CodEmp = new.CodEmpTra;
  END IF;
  
  IF tg_op = 'INSERT' OR COALESCE(NEW.CodEmpOrig,0) <> COALESCE(OLD.CodEmpOrig,0) THEN
    SELECT Emp.CodEmp, Emp.Id, Emp.Nome, Emp.CodCidUF, (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = Emp.CodCidUF), Emp.Pos_Area, Emp.Pos_Lat, Emp.Pos_Long, Emp.Logradouro, Emp.Bairro, Emp.CEP
    INTO new.CodEmpOrig, new.EmpOrig_Id, new.EmpOrig_Nome, new.EmpOrig_CodCidUF, new.EmpOrig_NomeCidUF, new.EmpOrig_Pos_Area, new.EmpOrig_Pos_Lat, new.EmpOrig_Pos_Long, new.EmpOrig_Logradouro, new.EmpOrig_Bairro, new.EmpOrig_CEP
    FROM Emp WHERE Emp.CodEmp = new.CodEmpOrig;
  END IF;
  
  IF tg_op = 'INSERT' OR COALESCE(NEW.CodEmpDest,0) <> COALESCE(OLD.CodEmpDest,0) THEN
    SELECT Emp.CodEmp, Emp.Id, Emp.Nome
    INTO new.CodEmpDest, new.EmpDest_Id, new.EmpDest_Nome
    FROM Emp WHERE Emp.CodEmp = new.CodEmpDest;
  END IF;
  
  IF tg_op = 'INSERT' OR COALESCE(NEW.CodEnderecoDest,0) <> COALESCE(OLD.CodEnderecoDest,0) THEN
    SELECT EmpEndereco.CodCidUF, (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = EmpEndereco.CodCidUF), EmpEndereco.Pos_Area, EmpEndereco.Pos_Lat, EmpEndereco.Pos_Long, EmpEndereco.Logradouro, EmpEndereco.Bairro, EmpEndereco.CEP
    INTO new.EmpDest_CodCidUF, new.EmpDest_NomeCidUF, new.EmpDest_Pos_Area, new.EmpDest_Pos_Lat, new.EmpDest_Pos_Long, new.EmpDest_Logradouro, new.EmpDest_Bairro, new.EmpDest_CEP
    FROM EmpEndereco
    WHERE new.CodEnderecoDest = EmpEndereco.CodEmpEndereco;
  END IF;
  
  IF tg_op = 'INSERT' OR COALESCE(NEW.CodEmpTNF,0) <> COALESCE(OLD.CodEmpTNF,0) THEN
    SELECT Emp.Id, Emp.Nome, Emp.CodCidUF, (SELECT CidUF.Nome FROM CidUF WHERE CidUF.CodCidUF = Emp.CodCidUF), Emp.Pos_Area, Emp.Pos_Lat, Emp.Pos_Long, Emp.Logradouro, Emp.Bairro, Emp.CEP
    INTO new.EmpTNF_Id, new.EmpTNF_Nome, new.EmpTNF_CodCidUF, new.EmpTNF_NomeCidUF, new.EmpTNF_Pos_Area, new.EmpTNF_Pos_Lat, new.EmpTNF_Pos_Long, new.EmpTNF_Logradouro, new.EmpTNF_Bairro, new.EmpTNF_CEP
    FROM Emp WHERE Emp.CodEmp = new.CodEmpTNF;
  END IF;
  
  IF tg_op = 'INSERT' OR COALESCE(NEW.CodRastrMovel,0) <> COALESCE(OLD.CodRastrMovel,0) THEN
    SELECT
      RastrMovel.Modelo,
      RastrMovel.CodTecRastr,
      (SELECT TecRastr.Nome FROM TecRastr WHERE TecRastr.CodTecRastr = RastrMovel.CodTecRastr),
      RastrMovel.IdEquipRastr,
      RastrMovel.UltPos_Long,
      RastrMovel.UltPos_Lat,
      RastrMovel.UltPos_DtaHr,
      RastrMovel.UltPos_Descr
    INTO
      new.RastrMovel_Modelo,
      new.RastrMovel_CodTecRastr,
      new.RastrMovel_NomeTecRastr,
      new.RastrMovel_IdEquipRastr,
      new.RastrMovel_UltPos_Long,
      new.RastrMovel_UltPos_Lat,
      new.RastrMovel_UltPos_DtaHr,
      new.RastrMovel_UltPos_Descr
    FROM
      RastrMovel
    WHERE
      RastrMovel.CodRastrMovel = new.CodRastrMovel;
  ELSE
    SELECT
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
    INTO
      new.RastrMovel_Modelo,
      new.RastrMovel_CodTecRastr,
      new.RastrMovel_NomeTecRastr,
      new.RastrMovel_IdEquipRastr,
      new.RastrMovel_UltPos_Long,
      new.RastrMovel_UltPos_Lat,
      new.RastrMovel_UltPos_DtaHr,
      new.RastrMovel_UltPos_Descr;
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_before_iu_embarquecarga() OWNER TO postgres;

--
-- TOC entry 1647 (class 1255 OID 11286359)
-- Name: tf_before_iu_emp(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_iu_emp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	vGeoAux GEOMETRY;
	vOldArea GEOMETRY;
	vOldLong DECIMAL(15,13);
	vOldLat DECIMAL(15,13);
	vOldRaio INTEGER;
	vRec RECORD;
	
BEGIN
	-- --------------------------------------
	-- ALTERADO EM 03/06/2011
	-- O destino das cargas (endereco 
	-- de entrega) nas tabelas carga e
	-- embarquecraga é atualizado na trigger
	-- da tabela "empendereco"
	-- --------------------------------------
	
	vGeoAux := ST_SetSRID(ST_MakePoint(0, 0), 29101);

	IF tg_op = 'INSERT' THEN
		vOldArea := vGeoAux;
		vOldLong := 0;
		vOldLat := 0;
		vOldRaio := 0;
	ELSE
		vOldArea := COALESCE(old.Pos_Area, vGeoAux);
		vOldLong := COALESCE(old.Pos_Long, 0);
		vOldLat := COALESCE(old.Pos_Lat, 0);
		vOldRaio := COALESCE(old.Pos_Raio, 0);
	END IF;
  
	IF COALESCE(new.Pos_Long,0) = 0 AND COALESCE(new.Pos_Lat,0) = 0 THEN
		new.Pos_Lat := vOldLat;
		new.Pos_Long := vOldLong;
	END IF;

	IF NOT ST_Equals(vOldArea, COALESCE(new.Pos_Area, vGeoAux)) AND new.Pos_Area IS NOT NULL THEN
		vGeoAux := ST_Centroid(new.Pos_Area);
		new.Pos_Long := X(vGeoAux);
		new.Pos_Lat := Y(vGeoAux);
		new.Pos_Raio := -1;

	-- Hugo - 09/05/2013 - correção
	-- so deve entrar aqui se não tiver area
	ELSIF NEW.Pos_Area IS NULL AND (vOldLong <> COALESCE(new.Pos_Long, 0) 
		OR vOldLat <> COALESCE(new.Pos_Lat, 0)
		OR vOldRaio <> COALESCE(new.Pos_Raio, 0)) THEN

		IF new.Pos_Long IS NOT NULL AND new.Pos_Lat IS NOT NULL AND COALESCE(new.Pos_Raio, -1) > 0 THEN
			new.Pos_Area := ST_Buffer(ST_SetSRID(ST_MakePoint(new.Pos_Long, new.Pos_Lat), 29101), new.Pos_Raio / 100000 :: DOUBLE PRECISION);
		ELSE
			new.Pos_Area := NULL;
		END IF;
	END IF;
  
  IF NOT ST_Equals(vOldArea, COALESCE(new.Pos_Area, vGeoAux)) THEN
	  -- ---------------------------------------------
	  -- Atualizando os embarques e cargas ativos
	  -- ---------------------------------------------
	  
	  -- selecionando os embarques ativos
	  FOR vRec IN SELECT
			Embarque.CodEmbarque 
		  FROM
			Embarque
		  LEFT JOIN EmbarqueCarga ON (
			EmbarqueCarga.CodEmbarque = Embarque.CodEmbarque
			AND (Embarque.CodEmpDest = new.CodEmp OR Embarque.CodEmpOrig = new.CodEmp)
		  )
		  WHERE Embarque.DtaHrCancelado IS NULL
				AND Embarque.DtaHrSinistrado IS NULL
				AND Embarque.DtaHrFim IS NULL
	  LOOP
				
		  -- empresa de destino no embarque
		  UPDATE Embarque
			SET
				EmpDest_Pos_Long = new.Pos_Long
				, EmpDest_Pos_Lat = new.Pos_Lat
				, EmpDest_Pos_Area = new.Pos_Area
			WHERE 
				Embarque.CodEmpDest = new.CodEmp
				AND Embarque.CodEmbarque = vRec.CodEmbarque;
				
		  -- empresa de origem no embarque
		  UPDATE Embarque
			SET
				EmpOrig_Pos_Long = new.Pos_Long
				, EmpOrig_Pos_Lat = new.Pos_Lat
				, EmpOrig_Pos_Area = new.Pos_Area
			WHERE 
				Embarque.CodEmpOrig = new.CodEmp
				AND Embarque.CodEmbarque = vRec.CodEmbarque;
				
		  -- EmbarquesCarga origem
		  UPDATE EmbarqueCarga
			SET
				EmpOrig_Pos_Long = new.Pos_Long
				, EmpOrig_Pos_Lat = new.Pos_Lat
				, EmpOrig_Pos_Area = new.Pos_Area
			WHERE 
				EmbarqueCarga.CodEmpOrig = new.CodEmp
				AND EmbarqueCarga.CodEmbarque = vRec.CodEmbarque;
	  END LOOP;
	  
	  -- Cargas origem
	  UPDATE Carga
		SET
			EmpOrig_Pos_Long = new.Pos_Long
			, EmpOrig_Pos_Lat = new.Pos_Lat
			, EmpOrig_Pos_Area = new.Pos_Area
		WHERE 
			Carga.CodEmpOrig = new.CodEmp
			AND Carga.DtaHrCancelado IS NULL
			AND Carga.DtaHrSinistrado IS NULL
			AND Carga.DtaHrFim IS NULL;
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_before_iu_emp() OWNER TO postgres;

--
-- TOC entry 1648 (class 1255 OID 11286360)
-- Name: tf_before_iu_empendereco(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_iu_empendereco() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE
  vGeoAux GEOMETRY;
  vOldArea GEOMETRY;
  vOldLong DECIMAL(15,13);
  vOldLat DECIMAL(15,13);
  vOldRaio INTEGER;
  vRec RECORD;

BEGIN
  -- ATUALIZANDO AS CARGAS E EMBARQUECARGAS
  -- QUE TIVEREM O ENDERECO DE ENTREGA DEFINIDO COMO O QUE
  -- ESTA SENDO ATUALIZADO
  
  -- --------------------------------------
  -- ALTERADO EM 03/06/2011
  -- O destino das cargas (endereco 
  -- de entrega) nas tabelas carga e
  -- embarquecraga é atualizado na trigger
  -- da tabela "empendereco"
  -- --------------------------------------
  
  vGeoAux := ST_SetSRID(ST_MakePoint(0, 0), 29101);

  IF TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND (NEW.Pos_area,NEW.Pos_Long,NEW.Pos_Lat,NEW.Pos_Raio) IS DISTINCT FROM (OLD.Pos_area,OLD.Pos_Long,OLD.Pos_Lat,OLD.Pos_Raio)) THEN
    IF tg_op = 'INSERT' THEN
      vOldArea := vGeoAux;
      vOldLong := 0;
      vOldLat := 0;
      vOldRaio := 0;
    ELSE
      vOldArea := COALESCE(old.Pos_Area, vGeoAux);
      vOldLong := COALESCE(old.Pos_Long, 0);
      vOldLat := COALESCE(old.Pos_Lat, 0);
      vOldRaio := COALESCE(old.Pos_Raio, 0);
    END IF;
    
    IF COALESCE(new.Pos_Long,0) = 0 AND COALESCE(new.Pos_Lat,0) = 0 THEN
      new.Pos_Lat := vOldLat;
      new.Pos_Long := vOldLong;
    END IF;

    IF NOT ST_Equals(vOldArea, COALESCE(new.Pos_Area, vGeoAux)) AND new.Pos_Area IS NOT NULL THEN
      vGeoAux := ST_Centroid(new.Pos_Area);
      new.Pos_Long := X(vGeoAux);
      new.Pos_Lat := Y(vGeoAux);
      new.Pos_Raio := -1;

    ELSIF new.Pos_Area IS NULL AND (vOldLong <> COALESCE(new.Pos_Long, 0) 
      OR vOldLat <> COALESCE(new.Pos_Lat, 0)
      OR vOldRaio <> COALESCE(new.Pos_Raio, 0)) THEN

      IF new.Pos_Long IS NOT NULL AND new.Pos_Lat IS NOT NULL AND COALESCE(new.Pos_Raio, -1) > 0 THEN
        new.Pos_Area := ST_Buffer(ST_SetSRID(ST_MakePoint(new.Pos_Long, new.Pos_Lat), 29101), new.Pos_Raio / 100000 :: DOUBLE PRECISION);
      ELSE
        new.Pos_Area := NULL;
      END IF;
    END IF;
    
    IF TG_OP = 'UPDATE' THEN
      -- Primeiro, as cargas (se nao estiverem realizadas ou sinistradas)
      UPDATE Carga 
      SET 
        EmpDest_CodCidUF = new.CodCidUF
        , EmpDest_NomeCidUF = (SELECT nome FROM CidUf WHERE CidUf.CodCidUf = new.CodCidUf)
        , EmpDest_Pos_Area = new.Pos_Area
        , EmpDest_Pos_Lat = new.Pos_Lat
        , EmpDest_Pos_Long = new.Pos_Long
        , EmpDest_Logradouro = new.Logradouro
        , EmpDest_Bairro = new.Bairro
        , EmpDest_CEP = new.CEP
      WHERE Carga.CodEnderecoDest = new.CodEmpEndereco AND Carga.CodStatCarga NOT IN (5,7);
      
      -- Agora, os embarquecargas (se nao estiverem realizadas, sinistradas ou canceladas)
      UPDATE EmbarqueCarga 
      SET 
        EmpDest_CodCidUF = new.CodCidUF
        , EmpDest_NomeCidUF = (SELECT nome FROM CidUf WHERE CidUf.CodCidUf = new.CodCidUf)
        , EmpDest_Pos_Area = new.Pos_Area
        , EmpDest_Pos_Lat = new.Pos_Lat
        , EmpDest_Pos_Long = new.Pos_Long
        , EmpDest_Logradouro = new.Logradouro
        , EmpDest_Bairro = new.Bairro
        , EmpDest_CEP = new.CEP
      WHERE EmbarqueCarga.CodEnderecoDest = new.CodEmpEndereco
        AND EmbarqueCarga.CodEmbarque NOT IN (
          SELECT
            CodEmbarque
          FROM
            Embarque
          WHERE
            Embarque.CodStatEmbarque IN (3,4,5)
            AND Embarque.CodEmbarque = EmbarqueCarga.CodEmbarque
        );
    END IF;
  END IF;
  
  RETURN NEW;
END
$$;


ALTER FUNCTION public.tf_before_iu_empendereco() OWNER TO postgres;

--
-- TOC entry 1649 (class 1255 OID 11286361)
-- Name: tf_before_iu_empjanelapeso(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_iu_empjanelapeso() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
	IF TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND (NEW.Peso) IS DISTINCT FROM (OLD.Peso)) THEN
		UPDATE Carga
		SET PesoDs = COALESCE(Carga.Peso,0) * NEW.Peso
		WHERE Carga.CodStatCarga IN (1,9)
			AND Carga.CodEnderecoOrig = NEW.CodEmpEndereco
			AND Carga.CodTpOper = NEW.CodTpOper;

		CREATE TEMPORARY TABLE UPD(CodCargaGrupo INTEGER, PesoTotal FLOAT);

		INSERT INTO UPD
		SELECT Carga.CodCargaGrupo, SUM(COALESCE(Carga.PesoDs,0)) as PesoTotal
		FROM Carga
		WHERE Carga.CodCargaGrupo IS NOT NULL
			AND Carga.CodStatCarga IN (1,9)
			AND Carga.CodEnderecoOrig = NEW.CodEmpEndereco
			AND Carga.CodTpOper = NEW.CodTpOper
		GROUP BY 1;

		UPDATE CargaGrupo
		SET TotPesoDs = UPD.PesoTotal
		FROM UPD
		WHERE UPD.CodCargaGrupo = CargaGrupo.CodCargaGrupo;
		
		DROP TABLE UPD;
	END IF;
	
	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_before_iu_empjanelapeso() OWNER TO postgres;

--
-- TOC entry 1655 (class 1255 OID 11286362)
-- Name: tf_before_iu_progcoleta(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_iu_progcoleta() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE
  vDefineAceite BOOLEAN DEFAULT FALSE;
  vDefineRecusa BOOLEAN DEFAULT FALSE;
  vDefineCancelado BOOLEAN DEFAULT FALSE;
  
BEGIN
  IF TG_OP = 'INSERT' OR OLD.CodStatProgColeta IS DISTINCT FROM NEW.CodStatProgColeta THEN
    IF COALESCE(new.codstatprogcoleta,-1) > -1 THEN
      -- atualiza os horarios
      SELECT definecancelado,defineaceito,definerecusado,descr
      INTO vDefineCancelado, vDefineAceite, vDefineRecusa, new.descrstatprogcoleta
      FROM statprogcoleta
      WHERE codstatprogcoleta = new.codstatprogcoleta; 
      
      IF vDefineAceite THEN
        IF new.dtahraceite IS NULL THEN
          new.dtahraceite := NOW();
        END IF;
        new.dtahrcancelado := NULL;
        new.dtahrrecusa := NULL;
      END IF;
      
      IF vDefineRecusa THEN
        new.dtahraceite := NULL;
        new.dtahrcancelado := NULL;
        IF new.dtahrrecusa IS NULL THEN
          new.dtahrrecusa := NOW();
        END IF;
      END IF;
      
      IF vDefineCancelado THEN
        IF new.dtahrcancelado IS NULL THEN
          new.dtahrcancelado := NOW();
        END IF;
        new.dtahrrecusa := NULL;
      END IF;
    END IF;
  END IF;

  RETURN new;
END$$;


ALTER FUNCTION public.tf_before_iu_progcoleta() OWNER TO postgres;

--
-- TOC entry 1656 (class 1255 OID 11286363)
-- Name: tf_before_iu_vincequiprastr(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_iu_vincequiprastr() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  vCodUsr INTEGER;
BEGIN
  vCodUsr := -1;

  IF tg_op = 'INSERT' THEN
    vCodUsr := new.CodUsrIncl;
  ELSE
    IF old.Status IS DISTINCT FROM new.Status THEN
      vCodUsr := new.CodUsrIncl;

            new.DtaHrStatus := NOW();

            IF new.Status IN('D', 'E') THEN
        new.DtaHrDesat := COALESCE(new.DtaHrDesat, new.DtaHrStatus);
      ELSIF old.Status IN('D', 'E') THEN
        new.DtaHrDesat := NULL;
      END IF;
    END IF;
  END IF;

  IF vCodUsr <> -1 THEN
    INSERT INTO
      HistVincEquipRastr
    (
      CodUsrIncl,
      DtaHrIncl,
      Status,
      CodTecRastr,
      IdEquipRastr,
      Eh_RastrMovel,
      CodTpEntidade,
      CodEntidade
    ) VALUES (
      vCodUsr,
      new.DtaHrStatus,
      new.Status,
      new.CodTecRastr,
      new.IdEquipRastr,
      new.Eh_RastrMovel,
      new.CodTpEntidade,
      new.CodEntidade
    );
  END IF;

  RETURN new;
END
$$;


ALTER FUNCTION public.tf_before_iu_vincequiprastr() OWNER TO postgres;

--
-- TOC entry 1657 (class 1255 OID 11286364)
-- Name: tf_before_u_carga(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_u_carga() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare

begin

end;
$$;


ALTER FUNCTION public.tf_before_u_carga() OWNER TO postgres;

--
-- TOC entry 1658 (class 1255 OID 11286365)
-- Name: tf_before_u_embarque_rotograma(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION tf_before_u_embarque_rotograma() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
	vVelMedia FLOAT;
BEGIN
	IF NEW.Veic_UltPos_DtaHr IS NOT NULL AND 
		((NEW.Veic_UltPos_DtaHr IS DISTINCT FROM OLD.Veic_UltPos_DtaHr) OR (OLD.DtaHrIni IS NULL AND NEW.DtaHrIni IS NOT NULL))  THEN
		IF NEW.DtaHrFim IS NULL THEN
			vVelMedia := f_config('VELOCIDADE_MEDIA')::FLOAT;

			IF NEW.DtaHrIni IS NOT NULL THEN
				NEW.DistanciaPercorrida := f_distanciaPercorrida(NEW.Veic_CodTecRastr,NEW.Veic_IdEquipRastr,NEW.DtaHrIni,NEW.Veic_UltPos_DtaHr);
			ELSE 
				NEW.DistanciaPercorrida := 0;
			END IF;

			IF NEW.DtaHrIniPlanta IS NULL THEN
				NEW.DtaHrIniCalculada := f_chegadaCalculada(NEW.Veic_UltPos_DtaHr,NEW.Veic_UltPos_Lat,NEW.Veic_UltPos_Long,NEW.EmpOrig_Pos_Lat,NEW.EmpOrig_Pos_Long,vVelMedia);
			END IF;

			IF NEW.DtaHrIniDestino IS NULL AND NEW.DtaHrIni IS NOT NULL THEN
				NEW.DtaHrFimCalculada := f_chegadaCalculada(NEW.Veic_UltPos_DtaHr,NEW.Veic_UltPos_Lat,NEW.Veic_UltPos_Long,NEW.EmpDest_Pos_Lat,NEW.EmpDest_Pos_Long,vVelMedia);
			END IF;
		END IF;
	END IF;

	RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_before_u_embarque_rotograma() OWNER TO postgres;

--
-- TOC entry 1659 (class 1255 OID 11286366)
-- Name: touches(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION touches(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'touches';


ALTER FUNCTION public.touches(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1660 (class 1255 OID 11286367)
-- Name: transform(geometry, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION transform(geometry, integer) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'transform';


ALTER FUNCTION public.transform(geometry, integer) OWNER TO postgres;

--
-- TOC entry 1661 (class 1255 OID 11286368)
-- Name: translate(geometry, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate(geometry, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT translate($1, $2, $3, 0)$_$;


ALTER FUNCTION public.translate(geometry, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1662 (class 1255 OID 11286369)
-- Name: translate(geometry, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION translate(geometry, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$_$;


ALTER FUNCTION public.translate(geometry, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1663 (class 1255 OID 11286370)
-- Name: transscale(geometry, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION transscale(geometry, double precision, double precision, double precision, double precision) RETURNS geometry
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$SELECT affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$_$;


ALTER FUNCTION public.transscale(geometry, double precision, double precision, double precision, double precision) OWNER TO postgres;

--
-- TOC entry 1664 (class 1255 OID 11286371)
-- Name: uniq(integer[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION uniq(integer[]) RETURNS integer[]
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/_int', 'uniq';


ALTER FUNCTION public.uniq(integer[]) OWNER TO postgres;

--
-- TOC entry 1665 (class 1255 OID 11286372)
-- Name: unite_garray(geometry[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION unite_garray(geometry[]) RETURNS geometry
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'pgis_union_geometry_array';


ALTER FUNCTION public.unite_garray(geometry[]) OWNER TO postgres;

--
-- TOC entry 1666 (class 1255 OID 11286373)
-- Name: unlockrows(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION unlockrows(text) RETURNS integer
    LANGUAGE plpgsql STRICT
    AS $_$ 
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;

	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
$_$;


ALTER FUNCTION public.unlockrows(text) OWNER TO postgres;

--
-- TOC entry 7283 (class 0 OID 0)
-- Dependencies: 1666
-- Name: FUNCTION unlockrows(text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION unlockrows(text) IS 'args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.';


--
-- TOC entry 1667 (class 1255 OID 11286377)
-- Name: updategeometrysrid(character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 7284 (class 0 OID 0)
-- Dependencies: 1667
-- Name: FUNCTION updategeometrysrid(character varying, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION updategeometrysrid(character varying, character varying, integer) IS 'args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid table constraint';


--
-- TOC entry 1668 (class 1255 OID 11286378)
-- Name: updategeometrysrid(character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 7285 (class 0 OID 0)
-- Dependencies: 1668
-- Name: FUNCTION updategeometrysrid(character varying, character varying, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) IS 'args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid table constraint';


--
-- TOC entry 1669 (class 1255 OID 11286379)
-- Name: updategeometrysrid(character varying, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION updategeometrysrid(character varying, character varying, character varying, character varying, integer) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $_$
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = 'f';

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := 't';
		END LOOP;

		IF ( okay <> 't' ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

	-- Find out if the column is in the geometry_columns table
	okay = 'f';
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := 't';
	END LOOP;
	IF (okay <> 't') THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN 'f';
	END IF;

	-- Update ref from geometry_columns table
	EXECUTE 'UPDATE geometry_columns SET SRID = ' || new_srid::text ||
		' where f_table_schema = ' ||
		quote_literal(real_schema) || ' and f_table_name = ' ||
		quote_literal(table_name)  || ' and f_geometry_column = ' ||
		quote_literal(column_name);

	-- Make up constraint name
	cname = 'enforce_srid_'  || column_name;

	-- Drop enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' DROP constraint ' || quote_ident(cname);

	-- Update geometries SRID
	EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' SET ' || quote_ident(column_name) ||
		' = setSRID(' || quote_ident(column_name) ||
		', ' || new_srid::text || ')';

	-- Reset enforce_srid constraint
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
		'.' || quote_ident(table_name) ||
		' ADD constraint ' || quote_ident(cname) ||
		' CHECK (srid(' || quote_ident(column_name) ||
		') = ' || new_srid::text || ')';

	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;

END;
$_$;


ALTER FUNCTION public.updategeometrysrid(character varying, character varying, character varying, character varying, integer) OWNER TO postgres;

--
-- TOC entry 7286 (class 0 OID 0)
-- Dependencies: 1669
-- Name: FUNCTION updategeometrysrid(character varying, character varying, character varying, character varying, integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION updategeometrysrid(character varying, character varying, character varying, character varying, integer) IS 'args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid table constraint';


--
-- TOC entry 1670 (class 1255 OID 11286380)
-- Name: width(chip); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION width(chip) RETURNS integer
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'CHIP_getWidth';


ALTER FUNCTION public.width(chip) OWNER TO postgres;

--
-- TOC entry 1671 (class 1255 OID 11286381)
-- Name: within(geometry, geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION within(geometry, geometry) RETURNS boolean
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'within';


ALTER FUNCTION public.within(geometry, geometry) OWNER TO postgres;

--
-- TOC entry 1640 (class 1255 OID 11286382)
-- Name: x(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION x(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_x_point';


ALTER FUNCTION public.x(geometry) OWNER TO postgres;

--
-- TOC entry 1641 (class 1255 OID 11286383)
-- Name: xmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION xmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_xmax';


ALTER FUNCTION public.xmax(box3d) OWNER TO postgres;

--
-- TOC entry 1650 (class 1255 OID 11286384)
-- Name: xmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION xmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_xmin';


ALTER FUNCTION public.xmin(box3d) OWNER TO postgres;

--
-- TOC entry 1651 (class 1255 OID 11286385)
-- Name: y(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION y(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_y_point';


ALTER FUNCTION public.y(geometry) OWNER TO postgres;

--
-- TOC entry 1652 (class 1255 OID 11286386)
-- Name: ymax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ymax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_ymax';


ALTER FUNCTION public.ymax(box3d) OWNER TO postgres;

--
-- TOC entry 1653 (class 1255 OID 11286387)
-- Name: ymin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION ymin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_ymin';


ALTER FUNCTION public.ymin(box3d) OWNER TO postgres;

--
-- TOC entry 1654 (class 1255 OID 11286388)
-- Name: z(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION z(geometry) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_z_point';


ALTER FUNCTION public.z(geometry) OWNER TO postgres;

--
-- TOC entry 1616 (class 1255 OID 11286389)
-- Name: zmax(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION zmax(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_zmax';


ALTER FUNCTION public.zmax(box3d) OWNER TO postgres;

--
-- TOC entry 1622 (class 1255 OID 11286390)
-- Name: zmflag(geometry); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION zmflag(geometry) RETURNS smallint
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'LWGEOM_zmflag';


ALTER FUNCTION public.zmflag(geometry) OWNER TO postgres;

--
-- TOC entry 1672 (class 1255 OID 11286391)
-- Name: zmin(box3d); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION zmin(box3d) RETURNS double precision
    LANGUAGE c IMMUTABLE STRICT
    AS '$libdir/postgis-1.5', 'BOX3D_zmin';


ALTER FUNCTION public.zmin(box3d) OWNER TO postgres;

--
-- TOC entry 2839 (class 1255 OID 11286392)
-- Name: accum(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE accum(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_accum_finalfn
);


ALTER AGGREGATE public.accum(geometry) OWNER TO postgres;

--
-- TOC entry 2840 (class 1255 OID 11286393)
-- Name: collect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE collect(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_collect_finalfn
);


ALTER AGGREGATE public.collect(geometry) OWNER TO postgres;

--
-- TOC entry 2841 (class 1255 OID 11286397)
-- Name: extent(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE extent(geometry) (
    SFUNC = public.st_combine_bbox,
    STYPE = box3d_extent
);


ALTER AGGREGATE public.extent(geometry) OWNER TO postgres;

--
-- TOC entry 2842 (class 1255 OID 11286398)
-- Name: extent3d(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE extent3d(geometry) (
    SFUNC = public.combine_bbox,
    STYPE = box3d
);


ALTER AGGREGATE public.extent3d(geometry) OWNER TO postgres;

--
-- TOC entry 2843 (class 1255 OID 11286399)
-- Name: makeline(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE makeline(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_makeline_finalfn
);


ALTER AGGREGATE public.makeline(geometry) OWNER TO postgres;

--
-- TOC entry 2844 (class 1255 OID 11286400)
-- Name: memcollect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE memcollect(geometry) (
    SFUNC = public.st_collect,
    STYPE = geometry
);


ALTER AGGREGATE public.memcollect(geometry) OWNER TO postgres;

--
-- TOC entry 2845 (class 1255 OID 11286401)
-- Name: memgeomunion(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE memgeomunion(geometry) (
    SFUNC = geomunion,
    STYPE = geometry
);


ALTER AGGREGATE public.memgeomunion(geometry) OWNER TO postgres;

--
-- TOC entry 2846 (class 1255 OID 11286402)
-- Name: polygonize(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE polygonize(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_polygonize_finalfn
);


ALTER AGGREGATE public.polygonize(geometry) OWNER TO postgres;

--
-- TOC entry 2847 (class 1255 OID 11286403)
-- Name: st_accum(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_accum(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_accum_finalfn
);


ALTER AGGREGATE public.st_accum(geometry) OWNER TO postgres;

--
-- TOC entry 7287 (class 0 OID 0)
-- Dependencies: 2847
-- Name: AGGREGATE st_accum(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_accum(geometry) IS 'args: geomfield - Aggregate. Constructs an array of geometries.';


--
-- TOC entry 2848 (class 1255 OID 11286404)
-- Name: st_collect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_collect(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_collect_finalfn
);


ALTER AGGREGATE public.st_collect(geometry) OWNER TO postgres;

--
-- TOC entry 7288 (class 0 OID 0)
-- Dependencies: 2848
-- Name: AGGREGATE st_collect(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_collect(geometry) IS 'args: g1field - Return a specified ST_Geometry value from a collection of other geometries.';


--
-- TOC entry 2849 (class 1255 OID 11286405)
-- Name: st_extent(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_extent(geometry) (
    SFUNC = public.st_combine_bbox,
    STYPE = box3d_extent
);


ALTER AGGREGATE public.st_extent(geometry) OWNER TO postgres;

--
-- TOC entry 7289 (class 0 OID 0)
-- Dependencies: 2849
-- Name: AGGREGATE st_extent(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_extent(geometry) IS 'args: geomfield - an aggregate function that returns the bounding box that bounds rows of geometries.';


--
-- TOC entry 2850 (class 1255 OID 11286406)
-- Name: st_extent3d(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_extent3d(geometry) (
    SFUNC = public.st_combine_bbox,
    STYPE = box3d
);


ALTER AGGREGATE public.st_extent3d(geometry) OWNER TO postgres;

--
-- TOC entry 7290 (class 0 OID 0)
-- Dependencies: 2850
-- Name: AGGREGATE st_extent3d(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_extent3d(geometry) IS 'args: geomfield - an aggregate function that returns the box3D bounding box that bounds rows of geometries.';


--
-- TOC entry 2851 (class 1255 OID 11286407)
-- Name: st_makeline(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_makeline(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_makeline_finalfn
);


ALTER AGGREGATE public.st_makeline(geometry) OWNER TO postgres;

--
-- TOC entry 7291 (class 0 OID 0)
-- Dependencies: 2851
-- Name: AGGREGATE st_makeline(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_makeline(geometry) IS 'args: pointfield - Creates a Linestring from point geometries.';


--
-- TOC entry 2852 (class 1255 OID 11286408)
-- Name: st_memcollect(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_memcollect(geometry) (
    SFUNC = public.st_collect,
    STYPE = geometry
);


ALTER AGGREGATE public.st_memcollect(geometry) OWNER TO postgres;

--
-- TOC entry 2853 (class 1255 OID 11286409)
-- Name: st_memunion(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_memunion(geometry) (
    SFUNC = public.st_union,
    STYPE = geometry
);


ALTER AGGREGATE public.st_memunion(geometry) OWNER TO postgres;

--
-- TOC entry 7292 (class 0 OID 0)
-- Dependencies: 2853
-- Name: AGGREGATE st_memunion(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_memunion(geometry) IS 'args: geomfield - Same as ST_Union, only memory-friendly (uses less memory and more processor time).';


--
-- TOC entry 2854 (class 1255 OID 11286410)
-- Name: st_polygonize(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_polygonize(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_polygonize_finalfn
);


ALTER AGGREGATE public.st_polygonize(geometry) OWNER TO postgres;

--
-- TOC entry 7293 (class 0 OID 0)
-- Dependencies: 2854
-- Name: AGGREGATE st_polygonize(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_polygonize(geometry) IS 'args: geomfield - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.';


--
-- TOC entry 2855 (class 1255 OID 11286414)
-- Name: st_union(geometry); Type: AGGREGATE; Schema: public; Owner: postgres
--

CREATE AGGREGATE st_union(geometry) (
    SFUNC = pgis_geometry_accum_transfn,
    STYPE = pgis_abs,
    FINALFUNC = pgis_geometry_union_finalfn
);


ALTER AGGREGATE public.st_union(geometry) OWNER TO postgres;

--
-- TOC entry 7294 (class 0 OID 0)
-- Dependencies: 2855
-- Name: AGGREGATE st_union(geometry); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON AGGREGATE st_union(geometry) IS 'args: g1field - Returns a geometry that represents the point set union of the Geometries.';


--
-- TOC entry 3597 (class 2617 OID 11286415)
-- Name: #; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR # (
    PROCEDURE = icount,
    RIGHTARG = integer[]
);


ALTER OPERATOR public.# (NONE, integer[]) OWNER TO postgres;

--
-- TOC entry 3603 (class 2617 OID 11286416)
-- Name: #; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR # (
    PROCEDURE = idx,
    LEFTARG = integer[],
    RIGHTARG = integer
);


ALTER OPERATOR public.# (integer[], integer) OWNER TO postgres;

--
-- TOC entry 3606 (class 2617 OID 11286417)
-- Name: &; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR & (
    PROCEDURE = _int_inter,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = &
);


ALTER OPERATOR public.& (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3608 (class 2617 OID 11286418)
-- Name: &&; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR && (
    PROCEDURE = geometry_overlap,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &&,
    RESTRICT = geometry_gist_sel,
    JOIN = geometry_gist_joinsel
);


ALTER OPERATOR public.&& (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3612 (class 2617 OID 11286419)
-- Name: &&; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR && (
    PROCEDURE = geography_overlaps,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = &&,
    RESTRICT = geography_gist_selectivity,
    JOIN = geography_gist_join_selectivity
);


ALTER OPERATOR public.&& (geography, geography) OWNER TO postgres;

--
-- TOC entry 3613 (class 2617 OID 11286420)
-- Name: &&; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR && (
    PROCEDURE = _int_overlap,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = &&,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.&& (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3614 (class 2617 OID 11286422)
-- Name: &<; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR &< (
    PROCEDURE = geometry_overleft,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.&< (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3616 (class 2617 OID 11286424)
-- Name: &<|; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR &<| (
    PROCEDURE = geometry_overbelow,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = |&>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.&<| (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3617 (class 2617 OID 11286421)
-- Name: &>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR &> (
    PROCEDURE = geometry_overright,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &<,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.&> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3615 (class 2617 OID 11286425)
-- Name: +; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR + (
    PROCEDURE = intarray_push_elem,
    LEFTARG = integer[],
    RIGHTARG = integer
);


ALTER OPERATOR public.+ (integer[], integer) OWNER TO postgres;

--
-- TOC entry 3618 (class 2617 OID 11286426)
-- Name: +; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR + (
    PROCEDURE = intarray_push_array,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = +
);


ALTER OPERATOR public.+ (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3619 (class 2617 OID 11286427)
-- Name: -; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR - (
    PROCEDURE = intarray_del_elem,
    LEFTARG = integer[],
    RIGHTARG = integer
);


ALTER OPERATOR public.- (integer[], integer) OWNER TO postgres;

--
-- TOC entry 3620 (class 2617 OID 11286428)
-- Name: -; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR - (
    PROCEDURE = intset_subtract,
    LEFTARG = integer[],
    RIGHTARG = integer[]
);


ALTER OPERATOR public.- (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3621 (class 2617 OID 11286431)
-- Name: <; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR < (
    PROCEDURE = geometry_lt,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.< (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3623 (class 2617 OID 11286434)
-- Name: <; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR < (
    PROCEDURE = geography_lt,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.< (geography, geography) OWNER TO postgres;

--
-- TOC entry 3624 (class 2617 OID 11286436)
-- Name: <<; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR << (
    PROCEDURE = geometry_left,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = >>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.<< (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3625 (class 2617 OID 11286438)
-- Name: <<|; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR <<| (
    PROCEDURE = geometry_below,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = |>>,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.<<| (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3626 (class 2617 OID 11286439)
-- Name: <=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR <= (
    PROCEDURE = geometry_le,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3627 (class 2617 OID 11286440)
-- Name: <=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR <= (
    PROCEDURE = geography_le,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<= (geography, geography) OWNER TO postgres;

--
-- TOC entry 3628 (class 2617 OID 11286442)
-- Name: <@; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR <@ (
    PROCEDURE = _int_contained,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = @>,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<@ (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3629 (class 2617 OID 11286443)
-- Name: =; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR = (
    PROCEDURE = geometry_eq,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = =,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3630 (class 2617 OID 11286444)
-- Name: =; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR = (
    PROCEDURE = geography_eq,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = =,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.= (geography, geography) OWNER TO postgres;

--
-- TOC entry 3631 (class 2617 OID 11286429)
-- Name: >; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR > (
    PROCEDURE = geometry_gt,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3632 (class 2617 OID 11286432)
-- Name: >; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR > (
    PROCEDURE = geography_gt,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.> (geography, geography) OWNER TO postgres;

--
-- TOC entry 3633 (class 2617 OID 11286430)
-- Name: >=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR >= (
    PROCEDURE = geometry_ge,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.>= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3634 (class 2617 OID 11286433)
-- Name: >=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR >= (
    PROCEDURE = geography_ge,
    LEFTARG = geography,
    RIGHTARG = geography,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.>= (geography, geography) OWNER TO postgres;

--
-- TOC entry 3635 (class 2617 OID 11286435)
-- Name: >>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR >> (
    PROCEDURE = geometry_right,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <<,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.>> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3636 (class 2617 OID 11286446)
-- Name: @; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR @ (
    PROCEDURE = geometry_contained,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = ~,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@ (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3637 (class 2617 OID 11286448)
-- Name: @; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR @ (
    PROCEDURE = _int_contains,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = ~,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@ (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3638 (class 2617 OID 11286441)
-- Name: @>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR @> (
    PROCEDURE = _int_contains,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = <@,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@> (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3639 (class 2617 OID 11286450)
-- Name: @@; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR @@ (
    PROCEDURE = boolop,
    LEFTARG = integer[],
    RIGHTARG = query_int,
    COMMUTATOR = ~~,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@@ (integer[], query_int) OWNER TO postgres;

--
-- TOC entry 3640 (class 2617 OID 11286451)
-- Name: |; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR | (
    PROCEDURE = intset_union_elem,
    LEFTARG = integer[],
    RIGHTARG = integer
);


ALTER OPERATOR public.| (integer[], integer) OWNER TO postgres;

--
-- TOC entry 3641 (class 2617 OID 11286452)
-- Name: |; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR | (
    PROCEDURE = _int_union,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = |
);


ALTER OPERATOR public.| (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3622 (class 2617 OID 11286423)
-- Name: |&>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR |&> (
    PROCEDURE = geometry_overabove,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = &<|,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.|&> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3642 (class 2617 OID 11286437)
-- Name: |>>; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR |>> (
    PROCEDURE = geometry_above,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = <<|,
    RESTRICT = positionsel,
    JOIN = positionjoinsel
);


ALTER OPERATOR public.|>> (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3643 (class 2617 OID 11286445)
-- Name: ~; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR ~ (
    PROCEDURE = geometry_contain,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = @,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.~ (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3644 (class 2617 OID 11286447)
-- Name: ~; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR ~ (
    PROCEDURE = _int_contained,
    LEFTARG = integer[],
    RIGHTARG = integer[],
    COMMUTATOR = @,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.~ (integer[], integer[]) OWNER TO postgres;

--
-- TOC entry 3645 (class 2617 OID 11286453)
-- Name: ~=; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR ~= (
    PROCEDURE = geometry_samebox,
    LEFTARG = geometry,
    RIGHTARG = geometry,
    COMMUTATOR = ~=,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);


ALTER OPERATOR public.~= (geometry, geometry) OWNER TO postgres;

--
-- TOC entry 3646 (class 2617 OID 11286449)
-- Name: ~~; Type: OPERATOR; Schema: public; Owner: postgres
--

CREATE OPERATOR ~~ (
    PROCEDURE = rboolop,
    LEFTARG = query_int,
    RIGHTARG = integer[],
    COMMUTATOR = @@,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.~~ (query_int, integer[]) OWNER TO postgres;

--
-- TOC entry 3772 (class 2616 OID 11286455)
-- Name: btree_geography_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS btree_geography_ops
    DEFAULT FOR TYPE geography USING btree AS
    OPERATOR 1 <(geography,geography) ,
    OPERATOR 2 <=(geography,geography) ,
    OPERATOR 3 =(geography,geography) ,
    OPERATOR 4 >=(geography,geography) ,
    OPERATOR 5 >(geography,geography) ,
    FUNCTION 1 (geography, geography) geography_cmp(geography,geography);


ALTER OPERATOR CLASS public.btree_geography_ops USING btree OWNER TO postgres;

--
-- TOC entry 3773 (class 2616 OID 11286463)
-- Name: btree_geometry_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS btree_geometry_ops
    DEFAULT FOR TYPE geometry USING btree AS
    OPERATOR 1 <(geometry,geometry) ,
    OPERATOR 2 <=(geometry,geometry) ,
    OPERATOR 3 =(geometry,geometry) ,
    OPERATOR 4 >=(geometry,geometry) ,
    OPERATOR 5 >(geometry,geometry) ,
    FUNCTION 1 (geometry, geometry) geometry_cmp(geometry,geometry);


ALTER OPERATOR CLASS public.btree_geometry_ops USING btree OWNER TO postgres;

--
-- TOC entry 3774 (class 2616 OID 11286471)
-- Name: gin__int_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS gin__int_ops
    FOR TYPE integer[] USING gin AS
    STORAGE integer ,
    OPERATOR 3 &&(integer[],integer[]) ,
    OPERATOR 6 =(anyarray,anyarray) ,
    OPERATOR 7 @>(integer[],integer[]) ,
    OPERATOR 8 <@(integer[],integer[]) ,
    OPERATOR 13 @(integer[],integer[]) ,
    OPERATOR 14 ~(integer[],integer[]) ,
    OPERATOR 20 @@(integer[],query_int) ,
    FUNCTION 1 (integer[], integer[]) btint4cmp(integer,integer) ,
    FUNCTION 2 (integer[], integer[]) ginarrayextract(anyarray,internal) ,
    FUNCTION 3 (integer[], integer[]) ginint4_queryextract(internal,internal,smallint,internal,internal) ,
    FUNCTION 4 (integer[], integer[]) ginint4_consistent(internal,smallint,internal,integer,internal,internal);


ALTER OPERATOR CLASS public.gin__int_ops USING gin OWNER TO postgres;

--
-- TOC entry 3775 (class 2616 OID 11286484)
-- Name: gist__int_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS gist__int_ops
    DEFAULT FOR TYPE integer[] USING gist AS
    OPERATOR 3 &&(integer[],integer[]) ,
    OPERATOR 6 =(anyarray,anyarray) ,
    OPERATOR 7 @>(integer[],integer[]) ,
    OPERATOR 8 <@(integer[],integer[]) ,
    OPERATOR 13 @(integer[],integer[]) ,
    OPERATOR 14 ~(integer[],integer[]) ,
    OPERATOR 20 @@(integer[],query_int) ,
    FUNCTION 1 (integer[], integer[]) g_int_consistent(internal,integer[],integer,oid,internal) ,
    FUNCTION 2 (integer[], integer[]) g_int_union(internal,internal) ,
    FUNCTION 3 (integer[], integer[]) g_int_compress(internal) ,
    FUNCTION 4 (integer[], integer[]) g_int_decompress(internal) ,
    FUNCTION 5 (integer[], integer[]) g_int_penalty(internal,internal,internal) ,
    FUNCTION 6 (integer[], integer[]) g_int_picksplit(internal,internal) ,
    FUNCTION 7 (integer[], integer[]) g_int_same(integer[],integer[],internal);


ALTER OPERATOR CLASS public.gist__int_ops USING gist OWNER TO postgres;

--
-- TOC entry 3776 (class 2616 OID 11286500)
-- Name: gist__intbig_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS gist__intbig_ops
    FOR TYPE integer[] USING gist AS
    STORAGE intbig_gkey ,
    OPERATOR 3 &&(integer[],integer[]) ,
    OPERATOR 6 =(anyarray,anyarray) ,
    OPERATOR 7 @>(integer[],integer[]) ,
    OPERATOR 8 <@(integer[],integer[]) ,
    OPERATOR 13 @(integer[],integer[]) ,
    OPERATOR 14 ~(integer[],integer[]) ,
    OPERATOR 20 @@(integer[],query_int) ,
    FUNCTION 1 (integer[], integer[]) g_intbig_consistent(internal,internal,integer,oid,internal) ,
    FUNCTION 2 (integer[], integer[]) g_intbig_union(internal,internal) ,
    FUNCTION 3 (integer[], integer[]) g_intbig_compress(internal) ,
    FUNCTION 4 (integer[], integer[]) g_intbig_decompress(internal) ,
    FUNCTION 5 (integer[], integer[]) g_intbig_penalty(internal,internal,internal) ,
    FUNCTION 6 (integer[], integer[]) g_intbig_picksplit(internal,internal) ,
    FUNCTION 7 (integer[], integer[]) g_intbig_same(internal,internal,internal);


ALTER OPERATOR CLASS public.gist__intbig_ops USING gist OWNER TO postgres;

--
-- TOC entry 3777 (class 2616 OID 11286516)
-- Name: gist_geography_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS gist_geography_ops
    DEFAULT FOR TYPE geography USING gist AS
    STORAGE gidx ,
    OPERATOR 3 &&(geography,geography) ,
    FUNCTION 1 (geography, geography) geography_gist_consistent(internal,geometry,integer) ,
    FUNCTION 2 (geography, geography) geography_gist_union(bytea,internal) ,
    FUNCTION 3 (geography, geography) geography_gist_compress(internal) ,
    FUNCTION 4 (geography, geography) geography_gist_decompress(internal) ,
    FUNCTION 5 (geography, geography) geography_gist_penalty(internal,internal,internal) ,
    FUNCTION 6 (geography, geography) geography_gist_picksplit(internal,internal) ,
    FUNCTION 7 (geography, geography) geography_gist_same(box2d,box2d,internal);


ALTER OPERATOR CLASS public.gist_geography_ops USING gist OWNER TO postgres;

--
-- TOC entry 3778 (class 2616 OID 11286526)
-- Name: gist_geometry_ops; Type: OPERATOR CLASS; Schema: public; Owner: postgres
--

CREATE OPERATOR CLASS gist_geometry_ops
    DEFAULT FOR TYPE geometry USING gist AS
    STORAGE box2d ,
    OPERATOR 1 <<(geometry,geometry) ,
    OPERATOR 2 &<(geometry,geometry) ,
    OPERATOR 3 &&(geometry,geometry) ,
    OPERATOR 4 &>(geometry,geometry) ,
    OPERATOR 5 >>(geometry,geometry) ,
    OPERATOR 6 ~=(geometry,geometry) ,
    OPERATOR 7 ~(geometry,geometry) ,
    OPERATOR 8 @(geometry,geometry) ,
    OPERATOR 9 &<|(geometry,geometry) ,
    OPERATOR 10 <<|(geometry,geometry) ,
    OPERATOR 11 |>>(geometry,geometry) ,
    OPERATOR 12 |&>(geometry,geometry) ,
    FUNCTION 1 (geometry, geometry) lwgeom_gist_consistent(internal,geometry,integer) ,
    FUNCTION 2 (geometry, geometry) lwgeom_gist_union(bytea,internal) ,
    FUNCTION 3 (geometry, geometry) lwgeom_gist_compress(internal) ,
    FUNCTION 4 (geometry, geometry) lwgeom_gist_decompress(internal) ,
    FUNCTION 5 (geometry, geometry) lwgeom_gist_penalty(internal,internal,internal) ,
    FUNCTION 6 (geometry, geometry) lwgeom_gist_picksplit(internal,internal) ,
    FUNCTION 7 (geometry, geometry) lwgeom_gist_same(box2d,box2d,internal);


ALTER OPERATOR CLASS public.gist_geometry_ops USING gist OWNER TO postgres;

SET search_path = pg_catalog;

--
-- TOC entry 5159 (class 2605 OID 11286546)
-- Name: CAST (public.box2d AS public.box3d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box2d AS public.box3d) WITH FUNCTION public.box3d(public.box2d) AS IMPLICIT;


--
-- TOC entry 5160 (class 2605 OID 11286547)
-- Name: CAST (public.box2d AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box2d AS public.geometry) WITH FUNCTION public.geometry(public.box2d) AS IMPLICIT;


--
-- TOC entry 5161 (class 2605 OID 11286548)
-- Name: CAST (public.box3d AS box); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d AS box) WITH FUNCTION public.box(public.box3d) AS IMPLICIT;


--
-- TOC entry 5162 (class 2605 OID 11286549)
-- Name: CAST (public.box3d AS public.box2d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d AS public.box2d) WITH FUNCTION public.box2d(public.box3d) AS IMPLICIT;


--
-- TOC entry 5163 (class 2605 OID 11286550)
-- Name: CAST (public.box3d AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d AS public.geometry) WITH FUNCTION public.geometry(public.box3d) AS IMPLICIT;


--
-- TOC entry 5164 (class 2605 OID 11286551)
-- Name: CAST (public.box3d_extent AS public.box2d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d_extent AS public.box2d) WITH FUNCTION public.box2d(public.box3d_extent) AS IMPLICIT;


--
-- TOC entry 5165 (class 2605 OID 11286552)
-- Name: CAST (public.box3d_extent AS public.box3d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d_extent AS public.box3d) WITH FUNCTION public.box3d_extent(public.box3d_extent) AS IMPLICIT;


--
-- TOC entry 5166 (class 2605 OID 11286553)
-- Name: CAST (public.box3d_extent AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.box3d_extent AS public.geometry) WITH FUNCTION public.geometry(public.box3d_extent) AS IMPLICIT;


--
-- TOC entry 4964 (class 2605 OID 11286554)
-- Name: CAST (bytea AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (bytea AS public.geometry) WITH FUNCTION public.geometry(bytea) AS IMPLICIT;


--
-- TOC entry 5167 (class 2605 OID 11286555)
-- Name: CAST (public.chip AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.chip AS public.geometry) WITH FUNCTION public.geometry(public.chip) AS IMPLICIT;


--
-- TOC entry 5168 (class 2605 OID 11286556)
-- Name: CAST (public.geography AS public.geography); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geography AS public.geography) WITH FUNCTION public.geography(public.geography, integer, boolean) AS IMPLICIT;


--
-- TOC entry 5169 (class 2605 OID 11286557)
-- Name: CAST (public.geography AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geography AS public.geometry) WITH FUNCTION public.geometry(public.geography);


--
-- TOC entry 5172 (class 2605 OID 11286558)
-- Name: CAST (public.geometry AS box); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS box) WITH FUNCTION public.box(public.geometry) AS IMPLICIT;


--
-- TOC entry 5173 (class 2605 OID 11286559)
-- Name: CAST (public.geometry AS public.box2d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS public.box2d) WITH FUNCTION public.box2d(public.geometry) AS IMPLICIT;


--
-- TOC entry 5174 (class 2605 OID 11286560)
-- Name: CAST (public.geometry AS public.box3d); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS public.box3d) WITH FUNCTION public.box3d(public.geometry) AS IMPLICIT;


--
-- TOC entry 5170 (class 2605 OID 11286561)
-- Name: CAST (public.geometry AS bytea); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS bytea) WITH FUNCTION public.bytea(public.geometry) AS IMPLICIT;


--
-- TOC entry 5175 (class 2605 OID 11286562)
-- Name: CAST (public.geometry AS public.geography); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS public.geography) WITH FUNCTION public.geography(public.geometry) AS IMPLICIT;


--
-- TOC entry 5171 (class 2605 OID 11286563)
-- Name: CAST (public.geometry AS text); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (public.geometry AS text) WITH FUNCTION public.text(public.geometry) AS IMPLICIT;


--
-- TOC entry 5032 (class 2605 OID 11286564)
-- Name: CAST (text AS public.geometry); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (text AS public.geometry) WITH FUNCTION public.geometry(text) AS IMPLICIT;


SET search_path = public, pg_catalog;

--
-- TOC entry 301 (class 1259 OID 11286565)
-- Name: log_alteracoes; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes (
    codlog integer NOT NULL,
    data_alteracao timestamp with time zone,
    nome_chave character varying(255) NOT NULL,
    valor_chave character varying(255) NOT NULL,
    tabela character varying(100) NOT NULL,
    tipo integer,
    codusr integer,
    valores_antigos hstore,
    valores_novos hstore
);


ALTER TABLE log_alteracoes OWNER TO postgres;

SET search_path = alteracoes, pg_catalog;

--
-- TOC entry 511 (class 1259 OID 11296136)
-- Name: log_alteracoes_20150608_0614_w24; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150608_0614_w24 (
    CONSTRAINT log_alteracoes_20150608_0614_w24_data_alteracao_check CHECK (((data_alteracao >= '2015-06-08 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-06-14 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150608_0614_w24 OWNER TO postgres;

--
-- TOC entry 513 (class 1259 OID 11581636)
-- Name: log_alteracoes_20150615_0621_w25; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150615_0621_w25 (
    CONSTRAINT log_alteracoes_20150615_0621_w25_data_alteracao_check CHECK (((data_alteracao >= '2015-06-15 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-06-21 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150615_0621_w25 OWNER TO postgres;

--
-- TOC entry 518 (class 1259 OID 12237380)
-- Name: log_alteracoes_20150622_0628_w26; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150622_0628_w26 (
    CONSTRAINT log_alteracoes_20150622_0628_w26_data_alteracao_check CHECK (((data_alteracao >= '2015-06-22 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-06-28 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150622_0628_w26 OWNER TO postgres;

--
-- TOC entry 521 (class 1259 OID 12714415)
-- Name: log_alteracoes_20150629_0705_w27; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150629_0705_w27 (
    CONSTRAINT log_alteracoes_20150629_0705_w27_data_alteracao_check CHECK (((data_alteracao >= '2015-06-29 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-07-05 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150629_0705_w27 OWNER TO postgres;

--
-- TOC entry 522 (class 1259 OID 13399679)
-- Name: log_alteracoes_20150706_0712_w28; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150706_0712_w28 (
    CONSTRAINT log_alteracoes_20150706_0712_w28_data_alteracao_check CHECK (((data_alteracao >= '2015-07-06 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-07-12 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150706_0712_w28 OWNER TO postgres;

--
-- TOC entry 523 (class 1259 OID 13978973)
-- Name: log_alteracoes_20150713_0719_w29; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150713_0719_w29 (
    CONSTRAINT log_alteracoes_20150713_0719_w29_data_alteracao_check CHECK (((data_alteracao >= '2015-07-13 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-07-19 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150713_0719_w29 OWNER TO postgres;

--
-- TOC entry 524 (class 1259 OID 14535456)
-- Name: log_alteracoes_20150720_0726_w30; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150720_0726_w30 (
    CONSTRAINT log_alteracoes_20150720_0726_w30_data_alteracao_check CHECK (((data_alteracao >= '2015-07-20 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-07-26 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150720_0726_w30 OWNER TO postgres;

--
-- TOC entry 525 (class 1259 OID 15058255)
-- Name: log_alteracoes_20150727_0802_w31; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150727_0802_w31 (
    CONSTRAINT log_alteracoes_20150727_0802_w31_data_alteracao_check CHECK (((data_alteracao >= '2015-07-27 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-08-02 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150727_0802_w31 OWNER TO postgres;

--
-- TOC entry 536 (class 1259 OID 16896120)
-- Name: log_alteracoes_20150803_0809_w32; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150803_0809_w32 (
    CONSTRAINT log_alteracoes_20150803_0809_w32_data_alteracao_check CHECK (((data_alteracao >= '2015-08-03 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-08-09 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150803_0809_w32 OWNER TO postgres;

--
-- TOC entry 545 (class 1259 OID 17311070)
-- Name: log_alteracoes_20150810_0816_w33; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150810_0816_w33 (
    CONSTRAINT log_alteracoes_20150810_0816_w33_data_alteracao_check CHECK (((data_alteracao >= '2015-08-10 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-08-16 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150810_0816_w33 OWNER TO postgres;

--
-- TOC entry 547 (class 1259 OID 17740746)
-- Name: log_alteracoes_20150817_0823_w34; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150817_0823_w34 (
    CONSTRAINT log_alteracoes_20150817_0823_w34_data_alteracao_check CHECK (((data_alteracao >= '2015-08-17 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-08-23 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150817_0823_w34 OWNER TO postgres;

--
-- TOC entry 550 (class 1259 OID 18083242)
-- Name: log_alteracoes_20150824_0830_w35; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150824_0830_w35 (
    CONSTRAINT log_alteracoes_20150824_0830_w35_data_alteracao_check CHECK (((data_alteracao >= '2015-08-24 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-08-30 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150824_0830_w35 OWNER TO postgres;

--
-- TOC entry 561 (class 1259 OID 18472033)
-- Name: log_alteracoes_20150831_0906_w36; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150831_0906_w36 (
    CONSTRAINT log_alteracoes_20150831_0906_w36_data_alteracao_check CHECK (((data_alteracao >= '2015-08-31 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-09-06 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150831_0906_w36 OWNER TO postgres;

--
-- TOC entry 564 (class 1259 OID 18802856)
-- Name: log_alteracoes_20150907_0913_w37; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150907_0913_w37 (
    CONSTRAINT log_alteracoes_20150907_0913_w37_data_alteracao_check CHECK (((data_alteracao >= '2015-09-07 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-09-13 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150907_0913_w37 OWNER TO postgres;

--
-- TOC entry 566 (class 1259 OID 19119596)
-- Name: log_alteracoes_20150914_0920_w38; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150914_0920_w38 (
    CONSTRAINT log_alteracoes_20150914_0920_w38_data_alteracao_check CHECK (((data_alteracao >= '2015-09-14 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-09-20 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150914_0920_w38 OWNER TO postgres;

--
-- TOC entry 568 (class 1259 OID 19643898)
-- Name: log_alteracoes_20150921_0927_w39; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150921_0927_w39 (
    CONSTRAINT log_alteracoes_20150921_0927_w39_data_alteracao_check CHECK (((data_alteracao >= '2015-09-21 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-09-27 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150921_0927_w39 OWNER TO postgres;

--
-- TOC entry 583 (class 1259 OID 19960888)
-- Name: log_alteracoes_20150928_1004_w40; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20150928_1004_w40 (
    CONSTRAINT log_alteracoes_20150928_1004_w40_data_alteracao_check CHECK (((data_alteracao >= '2015-09-28 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-10-04 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20150928_1004_w40 OWNER TO postgres;

--
-- TOC entry 584 (class 1259 OID 20403699)
-- Name: log_alteracoes_20151005_1011_w41; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20151005_1011_w41 (
    CONSTRAINT log_alteracoes_20151005_1011_w41_data_alteracao_check CHECK (((data_alteracao >= '2015-10-05 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-10-11 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20151005_1011_w41 OWNER TO postgres;

--
-- TOC entry 586 (class 1259 OID 20821951)
-- Name: log_alteracoes_20151012_1018_w42; Type: TABLE; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE TABLE log_alteracoes_20151012_1018_w42 (
    CONSTRAINT log_alteracoes_20151012_1018_w42_data_alteracao_check CHECK (((data_alteracao >= '2015-10-12 00:00:00-03'::timestamp with time zone) AND (data_alteracao <= '2015-10-18 23:59:59.999-02'::timestamp with time zone)))
)
INHERITS (public.log_alteracoes);


ALTER TABLE log_alteracoes_20151012_1018_w42 OWNER TO postgres;

SET search_path = dashboard, pg_catalog;

--
-- TOC entry 302 (class 1259 OID 11287428)
-- Name: agendadashboard; Type: TABLE; Schema: dashboard; Owner: postgres; Tablespace: 
--

CREATE TABLE agendadashboard (
    codagendadashboard integer NOT NULL,
    codgrp integer,
    descricao character varying(200),
    inicio date NOT NULL,
    fim date NOT NULL,
    intervalo integer
);


ALTER TABLE agendadashboard OWNER TO postgres;

--
-- TOC entry 303 (class 1259 OID 11287431)
-- Name: agendadashboard_codagendadashboard_seq; Type: SEQUENCE; Schema: dashboard; Owner: postgres
--

CREATE SEQUENCE agendadashboard_codagendadashboard_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE agendadashboard_codagendadashboard_seq OWNER TO postgres;

--
-- TOC entry 7295 (class 0 OID 0)
-- Dependencies: 303
-- Name: agendadashboard_codagendadashboard_seq; Type: SEQUENCE OWNED BY; Schema: dashboard; Owner: postgres
--

ALTER SEQUENCE agendadashboard_codagendadashboard_seq OWNED BY agendadashboard.codagendadashboard;


--
-- TOC entry 304 (class 1259 OID 11287433)
-- Name: agendalayout; Type: TABLE; Schema: dashboard; Owner: postgres; Tablespace: 
--

CREATE TABLE agendalayout (
    codagendalayout integer NOT NULL,
    codagendadashboard integer NOT NULL,
    codlayoutdashboard integer NOT NULL,
    hrini time without time zone NOT NULL,
    hrfim time without time zone NOT NULL,
    segunda boolean,
    terca boolean,
    quarta boolean,
    quinta boolean,
    sexta boolean,
    sabado boolean,
    domingo boolean,
    ordem integer
);


ALTER TABLE agendalayout OWNER TO postgres;

--
-- TOC entry 305 (class 1259 OID 11287436)
-- Name: agendalayout_codagendalayout_seq; Type: SEQUENCE; Schema: dashboard; Owner: postgres
--

CREATE SEQUENCE agendalayout_codagendalayout_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE agendalayout_codagendalayout_seq OWNER TO postgres;

--
-- TOC entry 7296 (class 0 OID 0)
-- Dependencies: 305
-- Name: agendalayout_codagendalayout_seq; Type: SEQUENCE OWNED BY; Schema: dashboard; Owner: postgres
--

ALTER SEQUENCE agendalayout_codagendalayout_seq OWNED BY agendalayout.codagendalayout;


--
-- TOC entry 306 (class 1259 OID 11287438)
-- Name: fontedados; Type: TABLE; Schema: dashboard; Owner: postgres; Tablespace: 
--

CREATE TABLE fontedados (
    codfontedados integer NOT NULL,
    nome character varying(200) NOT NULL,
    descricao text,
    comando text,
    colunas text
);


ALTER TABLE fontedados OWNER TO postgres;

--
-- TOC entry 307 (class 1259 OID 11287444)
-- Name: fontedados_codfontedados_seq; Type: SEQUENCE; Schema: dashboard; Owner: postgres
--

CREATE SEQUENCE fontedados_codfontedados_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fontedados_codfontedados_seq OWNER TO postgres;

--
-- TOC entry 7297 (class 0 OID 0)
-- Dependencies: 307
-- Name: fontedados_codfontedados_seq; Type: SEQUENCE OWNED BY; Schema: dashboard; Owner: postgres
--

ALTER SEQUENCE fontedados_codfontedados_seq OWNED BY fontedados.codfontedados;


--
-- TOC entry 308 (class 1259 OID 11287446)
-- Name: fontedadosaux; Type: TABLE; Schema: dashboard; Owner: postgres; Tablespace: 
--

CREATE TABLE fontedadosaux (
    nome character varying(20),
    dtahrultupd timestamp with time zone,
    intervalo integer,
    sql text
);


ALTER TABLE fontedadosaux OWNER TO postgres;

--
-- TOC entry 309 (class 1259 OID 11287452)
-- Name: fontedadosparam; Type: TABLE; Schema: dashboard; Owner: postgres; Tablespace: 
--

CREATE TABLE fontedadosparam (
    codfontedadosparam integer NOT NULL,
    codfontedados integer NOT NULL,
    chave character varying(100) NOT NULL,
    rotulo character varying(100) NOT NULL,
    tipo character varying(20) NOT NULL,
    ordem integer NOT NULL,
    define_view boolean DEFAULT false,
    valor character varying(100)
);


ALTER TABLE fontedadosparam OWNER TO postgres;

--
-- TOC entry 310 (class 1259 OID 11287456)
-- Name: fontedadosparam_codfontedadosparam_seq; Type: SEQUENCE; Schema: dashboard; Owner: postgres
--

CREATE SEQUENCE fontedadosparam_codfontedadosparam_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fontedadosparam_codfontedadosparam_seq OWNER TO postgres;

--
-- TOC entry 7298 (class 0 OID 0)
-- Dependencies: 310
-- Name: fontedadosparam_codfontedadosparam_seq; Type: SEQUENCE OWNED BY; Schema: dashboard; Owner: postgres
--

ALTER SEQUENCE fontedadosparam_codfontedadosparam_seq OWNED BY fontedadosparam.codfontedadosparam;


--
-- TOC entry 311 (class 1259 OID 11287458)
-- Name: layoutdashboard; Type: TABLE; Schema: dashboard; Owner: postgres; Tablespace: 
--

CREATE TABLE layoutdashboard (
    codlayoutdashboard integer NOT NULL,
    nome character varying(150) NOT NULL,
    descricao character varying(200),
    largura integer NOT NULL,
    altura integer NOT NULL,
    dashboard text NOT NULL
);


ALTER TABLE layoutdashboard OWNER TO postgres;

--
-- TOC entry 312 (class 1259 OID 11287464)
-- Name: layoutdashboard_codlayoutdashboard_seq; Type: SEQUENCE; Schema: dashboard; Owner: postgres
--

CREATE SEQUENCE layoutdashboard_codlayoutdashboard_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE layoutdashboard_codlayoutdashboard_seq OWNER TO postgres;

--
-- TOC entry 7299 (class 0 OID 0)
-- Dependencies: 312
-- Name: layoutdashboard_codlayoutdashboard_seq; Type: SEQUENCE OWNED BY; Schema: dashboard; Owner: postgres
--

ALTER SEQUENCE layoutdashboard_codlayoutdashboard_seq OWNED BY layoutdashboard.codlayoutdashboard;


SET search_path = public, pg_catalog;

--
-- TOC entry 516 (class 1259 OID 11596992)
-- Name: dados_integracao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao (
    codregistro bigint NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    dtahrenviado timestamp with time zone,
    tipo character varying(20) NOT NULL,
    mensagem text DEFAULT '{}'::text,
    status_retorno boolean DEFAULT false,
    texto_retorno text DEFAULT ''::text,
    tentativas integer DEFAULT 0,
    dtahrtentativa timestamp with time zone
);


ALTER TABLE dados_integracao OWNER TO postgres;

SET search_path = integracao, pg_catalog;

--
-- TOC entry 517 (class 1259 OID 11600985)
-- Name: dados_integracao_20150615_0621_25; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20150615_0621_25 (
    CONSTRAINT dados_integracao_20150615_0621_25_dtahrincl_check CHECK (((dtahrincl >= '2015-06-15 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-06-21 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20150615_0621_25 OWNER TO postgres;

--
-- TOC entry 520 (class 1259 OID 12714097)
-- Name: dados_integracao_20150629_0705_27; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20150629_0705_27 (
    CONSTRAINT dados_integracao_20150629_0705_27_dtahrincl_check CHECK (((dtahrincl >= '2015-06-29 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-07-05 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20150629_0705_27 OWNER TO postgres;

--
-- TOC entry 537 (class 1259 OID 16918239)
-- Name: dados_integracao_20150803_0809_32; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20150803_0809_32 (
    CONSTRAINT dados_integracao_20150803_0809_32_dtahrincl_check CHECK (((dtahrincl >= '2015-08-03 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-08-09 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20150803_0809_32 OWNER TO postgres;

--
-- TOC entry 546 (class 1259 OID 17311081)
-- Name: dados_integracao_20150810_0816_33; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20150810_0816_33 (
    CONSTRAINT dados_integracao_20150810_0816_33_dtahrincl_check CHECK (((dtahrincl >= '2015-08-10 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-08-16 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20150810_0816_33 OWNER TO postgres;

--
-- TOC entry 563 (class 1259 OID 18802281)
-- Name: dados_integracao_20150907_0913_37; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20150907_0913_37 (
    CONSTRAINT dados_integracao_20150907_0913_37_dtahrincl_check CHECK (((dtahrincl >= '2015-09-07 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-09-13 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20150907_0913_37 OWNER TO postgres;

--
-- TOC entry 567 (class 1259 OID 19196533)
-- Name: dados_integracao_20150914_0920_38; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20150914_0920_38 (
    CONSTRAINT dados_integracao_20150914_0920_38_dtahrincl_check CHECK (((dtahrincl >= '2015-09-14 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-09-20 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20150914_0920_38 OWNER TO postgres;

--
-- TOC entry 585 (class 1259 OID 20555620)
-- Name: dados_integracao_20151005_1011_41; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20151005_1011_41 (
    CONSTRAINT dados_integracao_20151005_1011_41_dtahrincl_check CHECK (((dtahrincl >= '2015-10-05 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-10-11 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20151005_1011_41 OWNER TO postgres;

--
-- TOC entry 587 (class 1259 OID 20839050)
-- Name: dados_integracao_20151012_1018_42; Type: TABLE; Schema: integracao; Owner: postgres; Tablespace: 
--

CREATE TABLE dados_integracao_20151012_1018_42 (
    CONSTRAINT dados_integracao_20151012_1018_42_dtahrincl_check CHECK (((dtahrincl >= '2015-10-12 00:00:00-03'::timestamp with time zone) AND (dtahrincl <= '2015-10-18 23:59:59.999-02'::timestamp with time zone)))
)
INHERITS (public.dados_integracao);


ALTER TABLE dados_integracao_20151012_1018_42 OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- TOC entry 313 (class 1259 OID 11287466)
-- Name: acao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE acao (
    codacao integer NOT NULL,
    nome character varying(200) NOT NULL,
    chave character varying(200) NOT NULL,
    menu boolean DEFAULT true,
    icone character varying(200),
    ordem integer DEFAULT 0
);


ALTER TABLE acao OWNER TO postgres;

--
-- TOC entry 314 (class 1259 OID 11287474)
-- Name: acao_codacao_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE acao_codacao_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE acao_codacao_seq OWNER TO postgres;

--
-- TOC entry 7300 (class 0 OID 0)
-- Dependencies: 314
-- Name: acao_codacao_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE acao_codacao_seq OWNED BY acao.codacao;


--
-- TOC entry 315 (class 1259 OID 11287476)
-- Name: agenda; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE agenda (
    codagenda integer NOT NULL,
    codemp integer NOT NULL,
    id character varying(200) NOT NULL,
    intervalo integer DEFAULT 30 NOT NULL,
    dtavigencia date NOT NULL
);


ALTER TABLE agenda OWNER TO postgres;

--
-- TOC entry 316 (class 1259 OID 11287480)
-- Name: agenda_codagenda_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE agenda_codagenda_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE agenda_codagenda_seq OWNER TO postgres;

--
-- TOC entry 7301 (class 0 OID 0)
-- Dependencies: 316
-- Name: agenda_codagenda_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE agenda_codagenda_seq OWNED BY agenda.codagenda;


--
-- TOC entry 544 (class 1259 OID 17019105)
-- Name: agendadescarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE agendadescarga (
    codagendadescarga integer NOT NULL,
    codempcfgjanela integer,
    codempcfgturno integer,
    codembarque integer,
    numnf character varying(20),
    codstatagendadescarga integer,
    codemporig integer,
    codempdest integer,
    codveic integer,
    placacarreta1 character varying(10),
    placacarreta2 character varying(10),
    codmot integer,
    dtahragendamento timestamp with time zone,
    codemptra integer,
    dia_semana integer,
    descrstatagendadescarga character varying(50),
    dtahrstatagendadescarga timestamp with time zone DEFAULT now(),
    codusrstatagendadescarga integer,
    produto_sapid character varying(50),
    produto_descr character varying(255),
    produto_peso numeric(7,2) DEFAULT 0
);


ALTER TABLE agendadescarga OWNER TO postgres;

--
-- TOC entry 543 (class 1259 OID 17019103)
-- Name: agendadescarga_codagendadescarga_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE agendadescarga_codagendadescarga_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE agendadescarga_codagendadescarga_seq OWNER TO postgres;

--
-- TOC entry 7302 (class 0 OID 0)
-- Dependencies: 543
-- Name: agendadescarga_codagendadescarga_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE agendadescarga_codagendadescarga_seq OWNED BY agendadescarga.codagendadescarga;


--
-- TOC entry 317 (class 1259 OID 11287482)
-- Name: agendahr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE agendahr (
    codagendahr integer NOT NULL,
    codagenda integer NOT NULL,
    codemp integer,
    qtd integer NOT NULL,
    hrini time without time zone NOT NULL,
    hrfim time without time zone NOT NULL
);


ALTER TABLE agendahr OWNER TO postgres;

--
-- TOC entry 318 (class 1259 OID 11287485)
-- Name: agendahr_codagendahr_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE agendahr_codagendahr_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE agendahr_codagendahr_seq OWNER TO postgres;

--
-- TOC entry 7303 (class 0 OID 0)
-- Dependencies: 318
-- Name: agendahr_codagendahr_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE agendahr_codagendahr_seq OWNED BY agendahr.codagendahr;


--
-- TOC entry 319 (class 1259 OID 11287487)
-- Name: agendamento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE agendamento (
    codagendamento integer NOT NULL,
    codagenda integer NOT NULL,
    codagendahr integer NOT NULL,
    codembarque integer NOT NULL,
    codusrcancelado integer,
    codmotivocancelado integer,
    dta date NOT NULL,
    hrini time without time zone NOT NULL,
    hrfim time without time zone NOT NULL,
    obs text,
    extra boolean DEFAULT false,
    dtahrcancelado timestamp with time zone
);


ALTER TABLE agendamento OWNER TO postgres;

--
-- TOC entry 320 (class 1259 OID 11287494)
-- Name: agendamento_codagendamento_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE agendamento_codagendamento_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE agendamento_codagendamento_seq OWNER TO postgres;

--
-- TOC entry 7304 (class 0 OID 0)
-- Dependencies: 320
-- Name: agendamento_codagendamento_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE agendamento_codagendamento_seq OWNED BY agendamento.codagendamento;


--
-- TOC entry 321 (class 1259 OID 11287496)
-- Name: ajuda; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ajuda (
    codajuda integer NOT NULL,
    titulo character varying(255),
    ordem integer DEFAULT 0,
    codpai integer,
    dtahrcadastro timestamp with time zone,
    codmodulo integer
);


ALTER TABLE ajuda OWNER TO postgres;

--
-- TOC entry 322 (class 1259 OID 11287500)
-- Name: ajuda_codajuda_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ajuda_codajuda_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ajuda_codajuda_seq OWNER TO postgres;

--
-- TOC entry 7305 (class 0 OID 0)
-- Dependencies: 322
-- Name: ajuda_codajuda_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ajuda_codajuda_seq OWNED BY ajuda.codajuda;


--
-- TOC entry 323 (class 1259 OID 11287502)
-- Name: bid; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bid (
    codbid integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusralter integer,
    dtahralter timestamp with time zone,
    codciduforigem integer NOT NULL,
    dtavigencia date NOT NULL,
    prox_transp integer,
    codtpcarga integer,
    ativo boolean DEFAULT false,
    inativomanual boolean DEFAULT false,
    codbidregiao integer NOT NULL,
    codcidufdestino integer NOT NULL
);


ALTER TABLE bid OWNER TO postgres;

--
-- TOC entry 324 (class 1259 OID 11287507)
-- Name: bid_codbid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE bid_codbid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bid_codbid_seq OWNER TO postgres;

--
-- TOC entry 7306 (class 0 OID 0)
-- Dependencies: 324
-- Name: bid_codbid_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE bid_codbid_seq OWNED BY bid.codbid;


--
-- TOC entry 325 (class 1259 OID 11287509)
-- Name: bid_hist; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bid_hist (
    dta date NOT NULL,
    dtavigencia date NOT NULL,
    codbid integer NOT NULL,
    codbidtransp integer NOT NULL,
    qtdofertado numeric DEFAULT 0 NOT NULL,
    qtdrecusado numeric DEFAULT 0 NOT NULL,
    qtdrealizado numeric DEFAULT 0 NOT NULL,
    ofertas integer[] DEFAULT '{}'::integer[],
    embarques integer[] DEFAULT '{}'::integer[]
);


ALTER TABLE bid_hist OWNER TO postgres;

--
-- TOC entry 562 (class 1259 OID 18487603)
-- Name: bid_hist_201509; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bid_hist_201509 (
    CONSTRAINT bid_hist_201509_dta_check CHECK (((dta >= '2015-09-01'::date) AND (dta <= '2015-09-30'::date)))
)
INHERITS (bid_hist);


ALTER TABLE bid_hist_201509 OWNER TO postgres;

--
-- TOC entry 588 (class 1259 OID 20879586)
-- Name: bid_hist_201510; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bid_hist_201510 (
    CONSTRAINT bid_hist_201510_dta_check CHECK (((dta >= '2015-10-01'::date) AND (dta <= '2015-10-31'::date)))
)
INHERITS (bid_hist);


ALTER TABLE bid_hist_201510 OWNER TO postgres;

--
-- TOC entry 559 (class 1259 OID 18217581)
-- Name: bid_regiao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bid_regiao (
    codbidregiao integer NOT NULL,
    codusrincl integer,
    dtahrincl timestamp with time zone,
    codusralter integer,
    dtahralter timestamp with time zone,
    nome character varying(120),
    codemporig integer,
    cidades integer[],
    ativo boolean DEFAULT true
);


ALTER TABLE bid_regiao OWNER TO postgres;

--
-- TOC entry 558 (class 1259 OID 18217579)
-- Name: bid_regiao_codbidregiao_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE bid_regiao_codbidregiao_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bid_regiao_codbidregiao_seq OWNER TO postgres;

--
-- TOC entry 7307 (class 0 OID 0)
-- Dependencies: 558
-- Name: bid_regiao_codbidregiao_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE bid_regiao_codbidregiao_seq OWNED BY bid_regiao.codbidregiao;


--
-- TOC entry 326 (class 1259 OID 11287646)
-- Name: bid_spot; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bid_spot (
    codbidspot integer NOT NULL,
    codciduforigem integer NOT NULL,
    codcidufdestino integer NOT NULL,
    codemptra integer NOT NULL,
    codembarque integer,
    codprogcoleta integer,
    codtpcarga integer NOT NULL,
    dtaoferta date NOT NULL,
    recusado boolean DEFAULT false
);


ALTER TABLE bid_spot OWNER TO postgres;

--
-- TOC entry 327 (class 1259 OID 11287650)
-- Name: bid_spot_codbidspot_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE bid_spot_codbidspot_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bid_spot_codbidspot_seq OWNER TO postgres;

--
-- TOC entry 7308 (class 0 OID 0)
-- Dependencies: 327
-- Name: bid_spot_codbidspot_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE bid_spot_codbidspot_seq OWNED BY bid_spot.codbidspot;


--
-- TOC entry 328 (class 1259 OID 11287652)
-- Name: bid_transp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE bid_transp (
    codbidtransp integer NOT NULL,
    codbid integer NOT NULL,
    codemptra integer NOT NULL,
    pctprev double precision DEFAULT 0 NOT NULL,
    pctreal double precision DEFAULT 0 NOT NULL,
    nivelpart double precision DEFAULT 0 NOT NULL,
    qtdofertado numeric DEFAULT 0 NOT NULL,
    qtdrecusado numeric DEFAULT 0 NOT NULL,
    qtdrealizado numeric DEFAULT 0 NOT NULL,
    nivelperform double precision DEFAULT 0 NOT NULL,
    ordem integer DEFAULT 1 NOT NULL,
    ofertas integer[] DEFAULT '{}'::integer[],
    embarques integer[] DEFAULT '{}'::integer[],
    spots integer[] DEFAULT '{}'::integer[]
);


ALTER TABLE bid_transp OWNER TO postgres;

--
-- TOC entry 329 (class 1259 OID 11287669)
-- Name: bid_transp_codbidtransp_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE bid_transp_codbidtransp_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bid_transp_codbidtransp_seq OWNER TO postgres;

--
-- TOC entry 7309 (class 0 OID 0)
-- Dependencies: 329
-- Name: bid_transp_codbidtransp_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE bid_transp_codbidtransp_seq OWNED BY bid_transp.codbidtransp;


--
-- TOC entry 330 (class 1259 OID 11287671)
-- Name: cargaautooferta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargaautooferta (
    codcarga bigint NOT NULL,
    codbid integer,
    codcargagrupo integer,
    cargas bigint[] DEFAULT '{}'::bigint[],
    codemptra bigint[] DEFAULT '{}'::bigint[],
    motivos character varying(200)[] DEFAULT '{}'::character varying[]
);


ALTER TABLE cargaautooferta OWNER TO postgres;

--
-- TOC entry 331 (class 1259 OID 11287680)
-- Name: cargafluxo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargafluxo (
    codcargafluxo integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    id character varying(100) NOT NULL,
    descr character varying(200) NOT NULL,
    automatico boolean DEFAULT false,
    ativo boolean DEFAULT true,
    codemporig integer,
    codultemp integer,
    circuito boolean DEFAULT false,
    embarques integer[] DEFAULT '{}'::integer[],
    veiculos integer[] DEFAULT '{}'::integer[],
    transportadoras integer[] DEFAULT '{}'::integer[]
);


ALTER TABLE cargafluxo OWNER TO postgres;

--
-- TOC entry 332 (class 1259 OID 11287692)
-- Name: cargafluxo_codcargafluxo_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cargafluxo_codcargafluxo_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cargafluxo_codcargafluxo_seq OWNER TO postgres;

--
-- TOC entry 7310 (class 0 OID 0)
-- Dependencies: 332
-- Name: cargafluxo_codcargafluxo_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cargafluxo_codcargafluxo_seq OWNED BY cargafluxo.codcargafluxo;


--
-- TOC entry 333 (class 1259 OID 11287694)
-- Name: cargafluxoemp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargafluxoemp (
    codcargafluxoemp integer NOT NULL,
    codcargafluxo integer NOT NULL,
    codemporig integer,
    codempdest integer
);


ALTER TABLE cargafluxoemp OWNER TO postgres;

--
-- TOC entry 334 (class 1259 OID 11287697)
-- Name: cargafluxoemp_codcargafluxoemp_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cargafluxoemp_codcargafluxoemp_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cargafluxoemp_codcargafluxoemp_seq OWNER TO postgres;

--
-- TOC entry 7311 (class 0 OID 0)
-- Dependencies: 334
-- Name: cargafluxoemp_codcargafluxoemp_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cargafluxoemp_codcargafluxoemp_seq OWNED BY cargafluxoemp.codcargafluxoemp;


--
-- TOC entry 335 (class 1259 OID 11287699)
-- Name: cargafluxoveic; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargafluxoveic (
    codcargafluxoveic integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    dtahralter timestamp with time zone,
    codusralter integer,
    dtahrinativo timestamp with time zone,
    codcargafluxo integer NOT NULL,
    codveic integer,
    codembarque integer,
    id character varying(40) NOT NULL,
    embarques integer[] DEFAULT '{}'::integer[],
    ativo boolean DEFAULT true,
    codemptra integer
);


ALTER TABLE cargafluxoveic OWNER TO postgres;

--
-- TOC entry 336 (class 1259 OID 11287707)
-- Name: cargafluxoveic_codcargafluxoveic_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cargafluxoveic_codcargafluxoveic_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cargafluxoveic_codcargafluxoveic_seq OWNER TO postgres;

--
-- TOC entry 7312 (class 0 OID 0)
-- Dependencies: 336
-- Name: cargafluxoveic_codcargafluxoveic_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cargafluxoveic_codcargafluxoveic_seq OWNED BY cargafluxoveic.codcargafluxoveic;


--
-- TOC entry 337 (class 1259 OID 11287709)
-- Name: cargagrupo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cargagrupo (
    codcargagrupo integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codusralter integer,
    dtahralter timestamp with time zone,
    codempjanela integer,
    dtahrcoleta timestamp with time zone,
    prioridade integer NOT NULL,
    id character varying(60) NOT NULL,
    cor character varying(10),
    observacoes character varying(255),
    totpeso double precision,
    totvol double precision,
    totnumvol integer,
    totpalete integer,
    editavel boolean DEFAULT true,
    cargas integer[] DEFAULT '{}'::integer[],
    ativo boolean DEFAULT true,
    totpesods double precision,
    tempendencias boolean DEFAULT false,
    pendencias text[],
    tempendenciasds boolean DEFAULT false,
    dtaremessa date,
    agendamento_realizado integer DEFAULT (-1),
    codtpcarga integer,
    tpcarga_descr character varying(100)
);


ALTER TABLE cargagrupo OWNER TO postgres;

--
-- TOC entry 338 (class 1259 OID 11287722)
-- Name: cargagrupo_codcargagrupo_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cargagrupo_codcargagrupo_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cargagrupo_codcargagrupo_seq OWNER TO postgres;

--
-- TOC entry 7313 (class 0 OID 0)
-- Dependencies: 338
-- Name: cargagrupo_codcargagrupo_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cargagrupo_codcargagrupo_seq OWNED BY cargagrupo.codcargagrupo;


--
-- TOC entry 339 (class 1259 OID 11287724)
-- Name: sq_codcarreta; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codcarreta
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codcarreta OWNER TO postgres;

--
-- TOC entry 340 (class 1259 OID 11287726)
-- Name: carreta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE carreta (
    codcarreta integer DEFAULT nextval('sq_codcarreta'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    id character varying(30) NOT NULL,
    modelo character varying(20),
    codtpcarreta integer,
    codtecrastr integer,
    idequiprastr character varying(25),
    ultpos_long numeric(15,13),
    ultpos_lat numeric(15,13),
    ultpos_dtahr timestamp with time zone,
    ultpos_descr character varying(255),
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE carreta OWNER TO postgres;

--
-- TOC entry 341 (class 1259 OID 11287732)
-- Name: cfgdash; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE cfgdash (
    codcfgdash smallint NOT NULL,
    nome character varying(50) NOT NULL,
    xml text,
    ativo boolean DEFAULT true,
    codusrincl smallint NOT NULL,
    codusralter smallint,
    dtahrincl timestamp with time zone DEFAULT now(),
    dtahralter timestamp with time zone,
    newxml xml
);


ALTER TABLE cfgdash OWNER TO postgres;

--
-- TOC entry 342 (class 1259 OID 11287740)
-- Name: sq_ciduf_codciduf; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_ciduf_codciduf
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_ciduf_codciduf OWNER TO postgres;

--
-- TOC entry 343 (class 1259 OID 11287742)
-- Name: ciduf; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ciduf (
    codciduf integer DEFAULT nextval('sq_ciduf_codciduf'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codpais integer NOT NULL,
    nome character varying(50) NOT NULL,
    siglauf character(4),
    ddd integer,
    capital boolean NOT NULL,
    siglaregiao character(2),
    fusohr integer NOT NULL,
    hrverao boolean NOT NULL,
    pos_long numeric(15,13),
    pos_lat numeric(15,13)
);


ALTER TABLE ciduf OWNER TO postgres;

--
-- TOC entry 344 (class 1259 OID 11287747)
-- Name: config; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE config (
    codusrincl integer,
    dtahrincl timestamp with time zone,
    codusralter integer,
    dtahralter timestamp with time zone,
    codtpconfig integer NOT NULL,
    nome character varying(50) NOT NULL,
    descr character varying(255) NOT NULL,
    vlratual text NOT NULL,
    vlrpadrao text NOT NULL,
    porusuario boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT false NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE config OWNER TO postgres;

--
-- TOC entry 345 (class 1259 OID 11287756)
-- Name: conta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE conta (
    codconta integer NOT NULL,
    nome character varying(100) NOT NULL,
    ativo boolean DEFAULT true,
    grpembarcador boolean DEFAULT false NOT NULL
);


ALTER TABLE conta OWNER TO postgres;

--
-- TOC entry 7314 (class 0 OID 0)
-- Dependencies: 345
-- Name: COLUMN conta.grpembarcador; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN conta.grpembarcador IS 'Quando verdadeiro, indica que as empresas da conta exigem agendamento de vagas se o destino for o porto de Santos';


--
-- TOC entry 346 (class 1259 OID 11287760)
-- Name: conta_codconta_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE conta_codconta_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE conta_codconta_seq OWNER TO postgres;

--
-- TOC entry 7315 (class 0 OID 0)
-- Dependencies: 346
-- Name: conta_codconta_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE conta_codconta_seq OWNED BY conta.codconta;


--
-- TOC entry 347 (class 1259 OID 11287762)
-- Name: contato; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE contato (
    codcontato integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codemp integer NOT NULL,
    nome character varying(100) NOT NULL,
    funcao character varying(30),
    area character varying(30),
    email character varying(255),
    telefone character varying(100),
    recebealerta boolean DEFAULT false NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE contato OWNER TO postgres;

--
-- TOC entry 348 (class 1259 OID 11287771)
-- Name: contato_codcontato_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE contato_codcontato_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE contato_codcontato_seq OWNER TO postgres;

--
-- TOC entry 7316 (class 0 OID 0)
-- Dependencies: 348
-- Name: contato_codcontato_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE contato_codcontato_seq OWNED BY contato.codcontato;


--
-- TOC entry 515 (class 1259 OID 11596990)
-- Name: dados_integracao_codregistro_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE dados_integracao_codregistro_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dados_integracao_codregistro_seq OWNER TO postgres;

--
-- TOC entry 7317 (class 0 OID 0)
-- Dependencies: 515
-- Name: dados_integracao_codregistro_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE dados_integracao_codregistro_seq OWNED BY dados_integracao.codregistro;


--
-- TOC entry 349 (class 1259 OID 11287773)
-- Name: emailregra; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE emailregra (
    codemailregra integer NOT NULL,
    descr character varying(50) NOT NULL,
    chave character varying(50) NOT NULL,
    recebeemaillogado boolean DEFAULT false
);


ALTER TABLE emailregra OWNER TO postgres;

--
-- TOC entry 350 (class 1259 OID 11287777)
-- Name: emailregra_codemailregra_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE emailregra_codemailregra_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE emailregra_codemailregra_seq OWNER TO postgres;

--
-- TOC entry 7318 (class 0 OID 0)
-- Dependencies: 350
-- Name: emailregra_codemailregra_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE emailregra_codemailregra_seq OWNED BY emailregra.codemailregra;


--
-- TOC entry 351 (class 1259 OID 11287779)
-- Name: emailregrausr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE emailregrausr (
    codemailregra integer,
    codusr integer
);


ALTER TABLE emailregrausr OWNER TO postgres;

--
-- TOC entry 352 (class 1259 OID 11287782)
-- Name: sq_codemailtosend; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codemailtosend
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codemailtosend OWNER TO postgres;

--
-- TOC entry 353 (class 1259 OID 11287784)
-- Name: emailtosend; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE emailtosend (
    codemailtosend bigint DEFAULT nextval('sq_codemailtosend'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codtemplateemail character varying(250) NOT NULL,
    remetentenome character varying(250) NOT NULL,
    remetenteemail character varying(250) NOT NULL,
    destinatarionome character varying(250) NOT NULL,
    destinatarioemail character varying(250) NOT NULL,
    subject character varying(250) NOT NULL,
    msg text,
    statusenvio boolean DEFAULT false,
    dtahrenvio timestamp with time zone,
    codembarque bigint,
    codcarga bigint,
    codemp integer,
    anexos text,
    ocultar_listagem boolean DEFAULT false
);


ALTER TABLE emailtosend OWNER TO postgres;

--
-- TOC entry 354 (class 1259 OID 11287794)
-- Name: sq_codembarque; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codembarque
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codembarque OWNER TO postgres;

--
-- TOC entry 355 (class 1259 OID 11287796)
-- Name: embarque; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE embarque (
    codembarque bigint DEFAULT nextval('sq_codembarque'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codstatembarque integer DEFAULT 1 NOT NULL,
    descrstatembarque character varying(20) NOT NULL,
    dtahrstatembarque timestamp with time zone DEFAULT now(),
    codusrstatembarque integer NOT NULL,
    dtahrprevini timestamp with time zone,
    dtahrini timestamp with time zone,
    dtahrprevfim timestamp with time zone,
    dtahrfim timestamp with time zone,
    dtahrcancelado timestamp with time zone,
    dtahrsinistrado timestamp with time zone,
    codsitembarque integer DEFAULT 2,
    descrsitembarque character varying(255),
    dtahrsitembarque timestamp with time zone,
    codusrsitembarque integer,
    codtppriorsitembarque integer,
    dtahrretorno timestamp with time zone,
    dtahratrasado timestamp with time zone,
    dtahrnaoatrasado timestamp with time zone,
    temretorno boolean DEFAULT false NOT NULL,
    temlembrete boolean DEFAULT false NOT NULL,
    temextrainfo boolean DEFAULT false NOT NULL,
    temocorrencia boolean DEFAULT false NOT NULL,
    totprevcoleta integer DEFAULT 0 NOT NULL,
    totrealcoleta integer DEFAULT 0 NOT NULL,
    totpreventrega integer DEFAULT 0 NOT NULL,
    totrealentrega integer DEFAULT 0 NOT NULL,
    totnumvol integer DEFAULT 1 NOT NULL,
    totpeso numeric(7,2) DEFAULT 0 NOT NULL,
    totvol numeric(7,2) DEFAULT 0 NOT NULL,
    codmoeda integer,
    moeda_sigla character varying(10),
    totvlr numeric(11,2) DEFAULT 0 NOT NULL,
    id character varying(30),
    codmot1 integer,
    mot1_id character varying(30),
    mot1_nome character varying(50),
    codmot2 integer,
    mot2_id character varying(30),
    mot2_nome character varying(50),
    codveic integer,
    veic_id character varying(30),
    veic_cor character varying(20),
    veic_modelo character varying(30),
    veic_codtecrastr integer,
    veic_nometecrastr character varying(50),
    veic_idequiprastr character varying(25),
    veic_ultpos_long numeric(15,13),
    veic_ultpos_lat numeric(15,13),
    veic_ultpos_dtahr timestamp with time zone,
    veic_ultpos_descr character varying(255),
    codrastrmovel integer,
    rastrmovel_modelo character varying(20),
    rastrmovel_codtecrastr integer,
    rastrmovel_nometecrastr character varying(50),
    rastrmovel_idequiprastr character varying(25),
    rastrmovel_ultpos_long numeric(15,13),
    rastrmovel_ultpos_lat numeric(15,13),
    rastrmovel_ultpos_dtahr timestamp with time zone,
    rastrmovel_ultpos_descr character varying(255),
    codempembar integer,
    empembar_id character varying(30),
    empembar_nome character varying(100),
    empembar_codciduf integer,
    empembar_nomeciduf character varying(50),
    empembar_pos_long numeric(15,13),
    empembar_pos_lat numeric(15,13),
    codemptra integer,
    emptra_id character varying(30),
    emptra_nome character varying(100),
    emptra_codciduf integer,
    emptra_nomeciduf character varying(50),
    emptra_pos_long numeric(15,13),
    emptra_pos_lat numeric(15,13),
    codemporig integer,
    emporig_id character varying(30),
    emporig_nome character varying(100),
    emporig_codciduf integer,
    emporig_nomeciduf character varying(50),
    emporig_pos_long numeric(15,13),
    emporig_pos_lat numeric(15,13),
    codempdest integer,
    empdest_id character varying(30),
    empdest_nome character varying(100),
    empdest_codciduf integer,
    empdest_nomeciduf character varying(50),
    empdest_pos_long numeric(15,13),
    empdest_pos_lat numeric(15,13),
    codrota integer,
    rota_id character varying(30),
    rota_descr character varying(255),
    rota_progpos geometry,
    empembar_pos_area geometry,
    emptra_pos_area geometry,
    emporig_pos_area geometry,
    empdest_pos_area geometry,
    notificado boolean DEFAULT false NOT NULL,
    codtpoper integer,
    placacarreta character varying(10),
    climatizada boolean DEFAULT false,
    alertatemperatura boolean DEFAULT false,
    codtpevento integer,
    tpevento_nome character varying(200),
    ctrlcarregamento boolean DEFAULT false,
    ctrldescarregamento boolean DEFAULT false,
    docacoleta character varying(50),
    docaentrega character varying(50),
    entregaparcial boolean DEFAULT false,
    semagendamento boolean,
    codigogr character varying(30) DEFAULT ''::character varying,
    codemptnf integer,
    emptnf_id character varying(30),
    emptnf_nome character varying(100),
    emptnf_logradouro character varying(255),
    emptnf_bairro character varying(50),
    emptnf_cep character varying(15),
    emptnf_codciduf integer,
    emptnf_nomeciduf character varying(50),
    emptnf_pos_lat numeric(15,13),
    emptnf_pos_long numeric(15,13),
    emptnf_pos_area geometry,
    dtahrprevtnf timestamp with time zone,
    dtahrprevfimtnf timestamp with time zone,
    temregtemp boolean DEFAULT false,
    totnumpalete integer DEFAULT 0 NOT NULL,
    codcargafluxo integer,
    etapascircuito integer[] DEFAULT '{}'::integer[],
    dtahriniplanta timestamp with time zone,
    dtahrinidestino timestamp with time zone,
    anteriores integer[] DEFAULT '{}'::integer[],
    circuitoid character varying(60),
    cargasid text DEFAULT '{}'::text,
    cargaagendada boolean DEFAULT false,
    distanciatotal double precision,
    distanciapercorrida double precision DEFAULT 0,
    dtahrfimcalculada timestamp with time zone,
    dtahrinicalculada timestamp with time zone,
    dtaremessa date,
    dtahrprevinicoleta timestamp with time zone,
    ufcarreta character(2),
    codbidtransp integer,
    considerarbid boolean DEFAULT true,
    codtpcarga integer[],
    tpcarga_templimiteminimo numeric(7,2) DEFAULT 0,
    tpcarga_templimitemaximo numeric(7,2) DEFAULT 0,
    tpcarga_tempnormalminimo numeric(7,2) DEFAULT 0,
    tpcarga_tempnormalmaximo numeric(7,2) DEFAULT 0,
    dtahrrecalculo timestamp with time zone,
    warningtemperatura boolean DEFAULT false,
    agendamento_realizado integer DEFAULT 0,
    codstatagendadescarga integer,
    codusrstatagendadescarga integer,
    descrstatagendadescarga character varying(50),
    dtahrstatagendadescarga timestamp with time zone DEFAULT now(),
    placacarreta2 character varying(10),
    dtahragendadescarga timestamp with time zone,
    codagendadescarga integer,
    agendamento_notificado boolean DEFAULT false,
    incotermid integer DEFAULT 0 NOT NULL,
    incotermnome character varying(50),
    codprogcoleta integer,
    CONSTRAINT enforce_dims_empdest_pos_area CHECK ((st_ndims(empdest_pos_area) = 2)),
    CONSTRAINT enforce_dims_empembar_pos_area CHECK ((st_ndims(empembar_pos_area) = 2)),
    CONSTRAINT enforce_dims_emporig_pos_area CHECK ((st_ndims(emporig_pos_area) = 2)),
    CONSTRAINT enforce_dims_emptra_pos_area CHECK ((st_ndims(emptra_pos_area) = 2)),
    CONSTRAINT enforce_dims_rota_progpos CHECK ((st_ndims(rota_progpos) = 2)),
    CONSTRAINT enforce_geotype_empdest_pos_area CHECK (((geometrytype(empdest_pos_area) = 'POLYGON'::text) OR (empdest_pos_area IS NULL))),
    CONSTRAINT enforce_geotype_empembar_pos_area CHECK (((geometrytype(empembar_pos_area) = 'POLYGON'::text) OR (empembar_pos_area IS NULL))),
    CONSTRAINT enforce_geotype_emporig_pos_area CHECK (((geometrytype(emporig_pos_area) = 'POLYGON'::text) OR (emporig_pos_area IS NULL))),
    CONSTRAINT enforce_geotype_emptra_pos_area CHECK (((geometrytype(emptra_pos_area) = 'POLYGON'::text) OR (emptra_pos_area IS NULL))),
    CONSTRAINT enforce_geotype_rota_progpos CHECK (((geometrytype(rota_progpos) = 'LINESTRING'::text) OR (rota_progpos IS NULL))),
    CONSTRAINT enforce_srid_empdest_pos_area CHECK ((st_srid(empdest_pos_area) = 29101)),
    CONSTRAINT enforce_srid_empembar_pos_area CHECK ((st_srid(empembar_pos_area) = 29101)),
    CONSTRAINT enforce_srid_emporig_pos_area CHECK ((st_srid(emporig_pos_area) = 29101)),
    CONSTRAINT enforce_srid_emptra_pos_area CHECK ((st_srid(emptra_pos_area) = 29101)),
    CONSTRAINT enforce_srid_rota_progpos CHECK ((st_srid(rota_progpos) = 29101))
);


ALTER TABLE embarque OWNER TO postgres;

--
-- TOC entry 7319 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN embarque.incotermid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN embarque.incotermid IS 'Campo proveniente de integração SAP';


--
-- TOC entry 7320 (class 0 OID 0)
-- Dependencies: 355
-- Name: COLUMN embarque.incotermnome; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN embarque.incotermnome IS 'Campo proveniente de integração SAP';


--
-- TOC entry 356 (class 1259 OID 11287855)
-- Name: embarquealertatemp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE embarquealertatemp (
    codembarque integer NOT NULL,
    codempembar integer NOT NULL,
    codemptra integer NOT NULL,
    dtahr timestamp with time zone,
    tempminima numeric(10,2),
    tempmaxima numeric(10,2),
    tempinformada numeric(10,2),
    pos_lat numeric(15,13),
    pos_long numeric(15,13)
);


ALTER TABLE embarquealertatemp OWNER TO postgres;

--
-- TOC entry 357 (class 1259 OID 11287858)
-- Name: sq_codembarquecarga; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codembarquecarga
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codembarquecarga OWNER TO postgres;

--
-- TOC entry 358 (class 1259 OID 11287860)
-- Name: embarquecarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE embarquecarga (
    codembarquecarga bigint DEFAULT nextval('sq_codembarquecarga'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codembarque bigint NOT NULL,
    codcarga bigint NOT NULL,
    codemptra integer,
    emptra_id character varying(30),
    emptra_nome character varying(100),
    emptra_codciduf integer,
    emptra_nomeciduf character varying(50),
    emptra_pos_long numeric(15,13),
    emptra_pos_lat numeric(15,13),
    codemporig integer,
    emporig_id character varying(30),
    emporig_nome character varying(100),
    emporig_logradouro character varying(255),
    emporig_bairro character varying(50),
    emporig_cep character varying(10),
    emporig_codciduf integer,
    emporig_nomeciduf character varying(50),
    emporig_pos_long numeric(15,13),
    emporig_pos_lat numeric(15,13),
    dtahrprevcoleta timestamp with time zone,
    tempoprevcoleta integer DEFAULT 0 NOT NULL,
    dtahrinicoleta timestamp with time zone,
    dtahrfimcoleta timestamp with time zone,
    codempdest integer,
    empdest_id character varying(30),
    empdest_nome character varying(100),
    empdest_logradouro character varying(255),
    empdest_bairro character varying(50),
    empdest_cep character varying(10),
    empdest_codciduf integer,
    empdest_nomeciduf character varying(50),
    empdest_pos_long numeric(15,13),
    empdest_pos_lat numeric(15,13),
    dtahrpreventrega timestamp with time zone,
    tempopreventrega integer DEFAULT 0 NOT NULL,
    dtahrinientrega timestamp with time zone,
    dtahrfimentrega timestamp with time zone,
    codrastrmovel integer,
    rastrmovel_modelo character varying(20),
    rastrmovel_codtecrastr integer,
    rastrmovel_nometecrastr character varying(50),
    rastrmovel_idequiprastr character varying(25),
    rastrmovel_ultpos_long numeric(15,13),
    rastrmovel_ultpos_lat numeric(15,13),
    rastrmovel_ultpos_dtahr timestamp with time zone,
    rastrmovel_ultpos_descr character varying(255),
    emptra_pos_area geometry,
    emporig_pos_area geometry,
    empdest_pos_area geometry,
    dtahrcancelado timestamp with time zone,
    dtahrprevfimcoleta timestamp with time zone,
    dtahrprevfimentrega timestamp with time zone,
    codtpoper integer,
    codenderecodest integer,
    codtpevento integer,
    tpevento_nome character varying(200),
    tpcarga_tempminima numeric(10,2),
    tpcarga_tempmaxima numeric(10,2),
    prazo integer DEFAULT 0,
    distancia integer DEFAULT 0,
    codmotivo integer,
    codemptnf integer,
    emptnf_id character varying(30),
    emptnf_nome character varying(100),
    emptnf_logradouro character varying(255),
    emptnf_bairro character varying(50),
    emptnf_cep character varying(15),
    emptnf_codciduf integer,
    emptnf_nomeciduf character varying(50),
    emptnf_pos_lat numeric(15,13),
    emptnf_pos_long numeric(15,13),
    emptnf_pos_area geometry,
    dtahrprevtnf timestamp with time zone,
    dtahrprevfimtnf timestamp with time zone,
    dtahrinitnf timestamp with time zone,
    dtahrfimtnf timestamp with time zone,
    dtahrfimcalculada timestamp with time zone,
    distanciapercorrida double precision,
    CONSTRAINT enforce_dims_empdest_pos_area CHECK ((st_ndims(empdest_pos_area) = 2)),
    CONSTRAINT enforce_dims_emporig_pos_area CHECK ((st_ndims(emporig_pos_area) = 2)),
    CONSTRAINT enforce_dims_emptra_pos_area CHECK ((st_ndims(emptra_pos_area) = 2)),
    CONSTRAINT enforce_geotype_empdest_pos_area CHECK (((geometrytype(empdest_pos_area) = 'POLYGON'::text) OR (empdest_pos_area IS NULL))),
    CONSTRAINT enforce_geotype_emporig_pos_area CHECK (((geometrytype(emporig_pos_area) = 'POLYGON'::text) OR (emporig_pos_area IS NULL))),
    CONSTRAINT enforce_geotype_emptra_pos_area CHECK (((geometrytype(emptra_pos_area) = 'POLYGON'::text) OR (emptra_pos_area IS NULL))),
    CONSTRAINT enforce_srid_empdest_pos_area CHECK ((st_srid(empdest_pos_area) = 29101)),
    CONSTRAINT enforce_srid_emporig_pos_area CHECK ((st_srid(emporig_pos_area) = 29101)),
    CONSTRAINT enforce_srid_emptra_pos_area CHECK ((st_srid(emptra_pos_area) = 29101))
);


ALTER TABLE embarquecarga OWNER TO postgres;

--
-- TOC entry 359 (class 1259 OID 11287881)
-- Name: sq_codembarquecarreta; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codembarquecarreta
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codembarquecarreta OWNER TO postgres;

--
-- TOC entry 360 (class 1259 OID 11287883)
-- Name: embarquecarreta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE embarquecarreta (
    codembarquecarreta bigint DEFAULT nextval('sq_codembarquecarreta'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codembarque bigint NOT NULL,
    codcarreta integer,
    carreta_id character varying(30) NOT NULL,
    carreta_modelo character varying(20),
    carreta_codtecrastr integer,
    carreta_nometecrastr character varying(50),
    carreta_idequiprastr character varying(25),
    carreta_ultpos_long numeric(15,13),
    carreta_ultpos_lat numeric(15,13),
    carreta_ultpos_dtahr timestamp with time zone,
    carreta_ultpos_descr character varying(255)
);


ALTER TABLE embarquecarreta OWNER TO postgres;

--
-- TOC entry 361 (class 1259 OID 11287888)
-- Name: sq_codembartransp; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codembartransp
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codembartransp OWNER TO postgres;

--
-- TOC entry 362 (class 1259 OID 11287890)
-- Name: embartransp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE embartransp (
    codembartransp integer DEFAULT nextval('sq_codembartransp'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codempembar integer,
    codemptra integer,
    perccontrato numeric(7,2) DEFAULT 0 NOT NULL
);


ALTER TABLE embartransp OWNER TO postgres;

--
-- TOC entry 363 (class 1259 OID 11287896)
-- Name: sq_codemp; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codemp
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codemp OWNER TO postgres;

--
-- TOC entry 364 (class 1259 OID 11287898)
-- Name: emp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE emp (
    codemp integer DEFAULT nextval('sq_codemp'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    id character varying(30),
    nome character varying(100) NOT NULL,
    logo bytea,
    logradouro character varying(255),
    bairro character varying(50),
    cep character varying(10),
    codciduf integer,
    pos_manual boolean DEFAULT false NOT NULL,
    pos_long numeric(15,13),
    pos_lat numeric(15,13),
    pos_raio integer DEFAULT 200 NOT NULL,
    pos_area geometry,
    obs text,
    cli boolean DEFAULT false NOT NULL,
    embar boolean DEFAULT false NOT NULL,
    transp boolean DEFAULT false NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    apelido character varying(100),
    email character varying(255),
    embar_tempopermanencia integer DEFAULT 180,
    id2 character varying(30),
    codtpeventocjtocoleta integer,
    codtpeventocjtoentrega integer,
    codconta integer,
    codexpediente integer,
    cpfcnpj character varying(14),
    agendamento boolean DEFAULT false,
    cargacompartilhada boolean DEFAULT false,
    maxpaletes integer,
    maxvol integer,
    maxnumvol integer,
    maxpeso integer,
    tpveic integer[] DEFAULT '{}'::integer[],
    obscargas text,
    tempocoletacircuito integer DEFAULT 90,
    usardockscheduling boolean DEFAULT false,
    codempembar integer,
    tempoentregacircuito integer DEFAULT 45,
    codtpoper integer,
    forn boolean DEFAULT false NOT NULL,
    broker boolean DEFAULT false,
    embarqueautomatico boolean DEFAULT false,
    unid boolean DEFAULT false,
    codtppalete integer,
    usaragendadescarga boolean DEFAULT false,
    CONSTRAINT enforce_dims_pos_area CHECK ((st_ndims(pos_area) = 2)),
    CONSTRAINT enforce_geotype_pos_area CHECK (((geometrytype(pos_area) = 'POLYGON'::text) OR (pos_area IS NULL))),
    CONSTRAINT enforce_srid_pos_area CHECK ((st_srid(pos_area) = 29101))
);


ALTER TABLE emp OWNER TO postgres;

--
-- TOC entry 533 (class 1259 OID 15153967)
-- Name: empcfgjanela; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empcfgjanela (
    codempcfgjanela integer NOT NULL,
    codconta integer NOT NULL,
    codtpcarga integer,
    vagasturno text NOT NULL,
    dia_semana integer NOT NULL,
    codempdest integer NOT NULL,
    codemporigem integer,
    ativo boolean DEFAULT true NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codusralter integer,
    dtahralter timestamp with time zone
);


ALTER TABLE empcfgjanela OWNER TO postgres;

--
-- TOC entry 7321 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.codempcfgjanela; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.codempcfgjanela IS 'Chave primaria';


--
-- TOC entry 7322 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.codconta; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.codconta IS 'Codigo da conta';


--
-- TOC entry 7323 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.codtpcarga; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.codtpcarga IS '[Codigo do tipo de carga]';


--
-- TOC entry 7324 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.vagasturno; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.vagasturno IS 'Array JSON com os as vagas por turno';


--
-- TOC entry 7325 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.dia_semana; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.dia_semana IS 'Dia programado para a entrega';


--
-- TOC entry 7326 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.codempdest; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.codempdest IS 'Codigo da empresa de destino';


--
-- TOC entry 7327 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.codemporigem; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.codemporigem IS '[Codigo da empresa embarcadora]';


--
-- TOC entry 7328 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.ativo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.ativo IS 'Registro ativo';


--
-- TOC entry 7329 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.codusrincl; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.codusrincl IS 'Usuario que criou a configuracao';


--
-- TOC entry 7330 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.dtahrincl; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.dtahrincl IS 'Quando a configuracao foi criada';


--
-- TOC entry 7331 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.codusralter; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.codusralter IS '[Usuario que modificou a configuracao]';


--
-- TOC entry 7332 (class 0 OID 0)
-- Dependencies: 533
-- Name: COLUMN empcfgjanela.dtahralter; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgjanela.dtahralter IS '[Quando a configuracao foi modificada]';


--
-- TOC entry 532 (class 1259 OID 15153965)
-- Name: empcfgjanela_codempcfgjanela_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE empcfgjanela_codempcfgjanela_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE empcfgjanela_codempcfgjanela_seq OWNER TO postgres;

--
-- TOC entry 7333 (class 0 OID 0)
-- Dependencies: 532
-- Name: empcfgjanela_codempcfgjanela_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE empcfgjanela_codempcfgjanela_seq OWNED BY empcfgjanela.codempcfgjanela;


--
-- TOC entry 527 (class 1259 OID 15134405)
-- Name: empcfgturno; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empcfgturno (
    codempcfgturno integer NOT NULL,
    hrini time without time zone NOT NULL,
    hrfim time without time zone NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    idintegracao integer NOT NULL
);


ALTER TABLE empcfgturno OWNER TO postgres;

--
-- TOC entry 7334 (class 0 OID 0)
-- Dependencies: 527
-- Name: COLUMN empcfgturno.codempcfgturno; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgturno.codempcfgturno IS 'Chave primaria';


--
-- TOC entry 7335 (class 0 OID 0)
-- Dependencies: 527
-- Name: COLUMN empcfgturno.hrini; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgturno.hrini IS 'Hora de inicio do turno';


--
-- TOC entry 7336 (class 0 OID 0)
-- Dependencies: 527
-- Name: COLUMN empcfgturno.hrfim; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgturno.hrfim IS 'Hora de fim do turno';


--
-- TOC entry 7337 (class 0 OID 0)
-- Dependencies: 527
-- Name: COLUMN empcfgturno.ativo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN empcfgturno.ativo IS 'Registro ativo';


--
-- TOC entry 526 (class 1259 OID 15134403)
-- Name: empcfgturno_codempcfgturno_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE empcfgturno_codempcfgturno_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE empcfgturno_codempcfgturno_seq OWNER TO postgres;

--
-- TOC entry 7338 (class 0 OID 0)
-- Dependencies: 526
-- Name: empcfgturno_codempcfgturno_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE empcfgturno_codempcfgturno_seq OWNED BY empcfgturno.codempcfgturno;


--
-- TOC entry 365 (class 1259 OID 11287926)
-- Name: empendereco; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empendereco (
    codempendereco integer NOT NULL,
    codemp integer NOT NULL,
    logradouro character varying(255),
    bairro character varying(50),
    cep character varying(10),
    codciduf integer,
    pos_long numeric(15,13),
    pos_lat numeric(15,13),
    pos_raio integer DEFAULT 200 NOT NULL,
    pos_area geometry,
    padrao boolean DEFAULT false,
    ativo boolean DEFAULT true,
    intervalojanelas integer DEFAULT 120
);


ALTER TABLE empendereco OWNER TO postgres;

--
-- TOC entry 366 (class 1259 OID 11287936)
-- Name: empendereco_codempendereco_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE empendereco_codempendereco_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE empendereco_codempendereco_seq OWNER TO postgres;

--
-- TOC entry 7339 (class 0 OID 0)
-- Dependencies: 366
-- Name: empendereco_codempendereco_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE empendereco_codempendereco_seq OWNED BY empendereco.codempendereco;


--
-- TOC entry 367 (class 1259 OID 11287938)
-- Name: empjanela; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanela (
    codempjanela integer NOT NULL,
    codemp integer NOT NULL,
    codempendereco integer NOT NULL,
    inicio time without time zone,
    fim time without time zone,
    target integer,
    limite integer,
    limitegrupos integer DEFAULT 0,
    dtahrini timestamp with time zone,
    dtahrfim timestamp with time zone,
    dia integer,
    mes integer,
    ano integer,
    dia_semana integer,
    cargas bigint[] DEFAULT '{}'::bigint[],
    codempjanelahist integer,
    codjanelaoriginal integer,
    totpesoreal double precision DEFAULT 0,
    totpesocalc double precision DEFAULT 0,
    totgrupos integer DEFAULT 0
);


ALTER TABLE empjanela OWNER TO postgres;

--
-- TOC entry 529 (class 1259 OID 15147080)
-- Name: empjanela_201507; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanela_201507 (
    CONSTRAINT empjanela_201507_dtahrini_check CHECK (((dtahrini >= '2015-07-01 00:00:00-03'::timestamp with time zone) AND (dtahrini <= '2015-07-31 23:59:59-03'::timestamp with time zone)))
)
INHERITS (empjanela);


ALTER TABLE empjanela_201507 OWNER TO postgres;

--
-- TOC entry 528 (class 1259 OID 15147063)
-- Name: empjanela_201508; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanela_201508 (
    CONSTRAINT empjanela_201508_dtahrini_check CHECK (((dtahrini >= '2015-08-01 00:00:00-03'::timestamp with time zone) AND (dtahrini <= '2015-08-31 23:59:59-03'::timestamp with time zone)))
)
INHERITS (empjanela);


ALTER TABLE empjanela_201508 OWNER TO postgres;

--
-- TOC entry 551 (class 1259 OID 18154783)
-- Name: empjanela_201509; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanela_201509 (
    CONSTRAINT empjanela_201509_dtahrini_check CHECK (((dtahrini >= '2015-09-01 00:00:00-03'::timestamp with time zone) AND (dtahrini <= '2015-09-30 23:59:59-03'::timestamp with time zone)))
)
INHERITS (empjanela);


ALTER TABLE empjanela_201509 OWNER TO postgres;

--
-- TOC entry 560 (class 1259 OID 18341767)
-- Name: empjanela_201510; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanela_201510 (
    CONSTRAINT empjanela_201510_dtahrini_check CHECK (((dtahrini >= '2015-10-01 00:00:00-03'::timestamp with time zone) AND (dtahrini <= '2015-10-31 23:59:59-02'::timestamp with time zone)))
)
INHERITS (empjanela);


ALTER TABLE empjanela_201510 OWNER TO postgres;

--
-- TOC entry 589 (class 1259 OID 20879700)
-- Name: empjanela_201511; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanela_201511 (
    CONSTRAINT empjanela_201511_dtahrini_check CHECK (((dtahrini >= '2015-11-01 00:00:00-02'::timestamp with time zone) AND (dtahrini <= '2015-11-30 23:59:59-02'::timestamp with time zone)))
)
INHERITS (empjanela);


ALTER TABLE empjanela_201511 OWNER TO postgres;

--
-- TOC entry 368 (class 1259 OID 11288309)
-- Name: empjanela_codempjanela_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE empjanela_codempjanela_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE empjanela_codempjanela_seq OWNER TO postgres;

--
-- TOC entry 7340 (class 0 OID 0)
-- Dependencies: 368
-- Name: empjanela_codempjanela_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE empjanela_codempjanela_seq OWNED BY empjanela.codempjanela;


--
-- TOC entry 369 (class 1259 OID 11288311)
-- Name: empjanelahist; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanelahist (
    codempjanelahist integer NOT NULL,
    dtahrincl timestamp with time zone,
    codusrincl integer NOT NULL,
    codemp integer NOT NULL,
    codempendereco integer NOT NULL,
    ativo boolean DEFAULT true,
    janelas text,
    fatores text
);


ALTER TABLE empjanelahist OWNER TO postgres;

--
-- TOC entry 370 (class 1259 OID 11288318)
-- Name: empjanelahist_codempjanelahist_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE empjanelahist_codempjanelahist_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE empjanelahist_codempjanelahist_seq OWNER TO postgres;

--
-- TOC entry 7341 (class 0 OID 0)
-- Dependencies: 370
-- Name: empjanelahist_codempjanelahist_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE empjanelahist_codempjanelahist_seq OWNED BY empjanelahist.codempjanelahist;


--
-- TOC entry 371 (class 1259 OID 11288320)
-- Name: empjanelapeso; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE empjanelapeso (
    codempendereco integer NOT NULL,
    codtpoper integer NOT NULL,
    peso numeric(5,2)
);


ALTER TABLE empjanelapeso OWNER TO postgres;

--
-- TOC entry 372 (class 1259 OID 11288323)
-- Name: sq_codequiprastr; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codequiprastr
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codequiprastr OWNER TO postgres;

--
-- TOC entry 373 (class 1259 OID 11288325)
-- Name: equiprastr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE equiprastr (
    codequiprastr bigint DEFAULT nextval('sq_codequiprastr'::regclass) NOT NULL,
    status character(1) DEFAULT 'I'::bpchar NOT NULL,
    dtahrstatus timestamp with time zone DEFAULT now() NOT NULL,
    codtpentidade integer NOT NULL,
    codentidade integer NOT NULL,
    codtecrastr integer NOT NULL,
    idequiprastr character varying(25) NOT NULL,
    CONSTRAINT equiprastr_status_check CHECK ((status = ANY (ARRAY['I'::bpchar, 'A'::bpchar, 'E'::bpchar])))
);


ALTER TABLE equiprastr OWNER TO postgres;

--
-- TOC entry 374 (class 1259 OID 11288332)
-- Name: sq_codevento; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codevento
    START WITH 1562
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codevento OWNER TO postgres;

--
-- TOC entry 375 (class 1259 OID 11288334)
-- Name: evento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE evento (
    codevento bigint DEFAULT nextval('sq_codevento'::regclass) NOT NULL,
    codusrincl bigint NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone DEFAULT now(),
    codtpevento integer NOT NULL,
    veic_id character varying(255),
    dtahrevento timestamp with time zone DEFAULT now(),
    codembarque integer,
    codembarquecarga bigint
);


ALTER TABLE evento OWNER TO postgres;

--
-- TOC entry 376 (class 1259 OID 11288341)
-- Name: expediente; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expediente (
    codexpediente integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    dtahralter timestamp with time zone,
    codusralter integer,
    nome character varying(100) NOT NULL,
    padrao boolean DEFAULT false,
    ativo boolean DEFAULT true
);


ALTER TABLE expediente OWNER TO postgres;

--
-- TOC entry 377 (class 1259 OID 11288346)
-- Name: expediente_codexpediente_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expediente_codexpediente_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE expediente_codexpediente_seq OWNER TO postgres;

--
-- TOC entry 7342 (class 0 OID 0)
-- Dependencies: 377
-- Name: expediente_codexpediente_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expediente_codexpediente_seq OWNED BY expediente.codexpediente;


--
-- TOC entry 378 (class 1259 OID 11288348)
-- Name: expedientehorario; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE expedientehorario (
    codexpedientehorario integer NOT NULL,
    codexpediente integer NOT NULL,
    dia_semana integer NOT NULL,
    inicio time without time zone,
    fim time without time zone,
    sem_expediente boolean,
    dia_inteiro boolean
);


ALTER TABLE expedientehorario OWNER TO postgres;

--
-- TOC entry 379 (class 1259 OID 11288351)
-- Name: expedientehorario_codexpedientehorario_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE expedientehorario_codexpedientehorario_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE expedientehorario_codexpedientehorario_seq OWNER TO postgres;

--
-- TOC entry 7343 (class 0 OID 0)
-- Dependencies: 379
-- Name: expedientehorario_codexpedientehorario_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE expedientehorario_codexpedientehorario_seq OWNED BY expedientehorario.codexpedientehorario;


--
-- TOC entry 380 (class 1259 OID 11288353)
-- Name: sq_codextrainfo; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codextrainfo
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codextrainfo OWNER TO postgres;

--
-- TOC entry 381 (class 1259 OID 11288355)
-- Name: extrainfo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE extrainfo (
    codextrainfo bigint DEFAULT nextval('sq_codextrainfo'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codembarque bigint,
    codcarga bigint,
    nome character varying(50) NOT NULL,
    valor text,
    editavel boolean DEFAULT true NOT NULL
);


ALTER TABLE extrainfo OWNER TO postgres;

--
-- TOC entry 382 (class 1259 OID 11288364)
-- Name: faq; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE faq (
    codfaq integer NOT NULL,
    titulo character varying(255),
    ordem integer,
    dtahrcadastro timestamp with time zone,
    cliques integer DEFAULT 0
);


ALTER TABLE faq OWNER TO postgres;

--
-- TOC entry 383 (class 1259 OID 11288368)
-- Name: faq_codfaq_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE faq_codfaq_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE faq_codfaq_seq OWNER TO postgres;

--
-- TOC entry 7344 (class 0 OID 0)
-- Dependencies: 383
-- Name: faq_codfaq_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE faq_codfaq_seq OWNED BY faq.codfaq;


--
-- TOC entry 384 (class 1259 OID 11288370)
-- Name: feriado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE feriado (
    codferiado integer NOT NULL,
    codtpferiado integer NOT NULL,
    codciduf integer,
    nome character varying(200),
    descricao text,
    dia integer,
    mes integer,
    ano integer,
    repete_ano integer,
    repete_dia_semana integer,
    repete_semana_mes integer,
    facultativo boolean DEFAULT false,
    expediente boolean DEFAULT false,
    uf character varying(3),
    excecoes integer[] DEFAULT '{}'::integer[]
);


ALTER TABLE feriado OWNER TO postgres;

--
-- TOC entry 385 (class 1259 OID 11288379)
-- Name: feriado_codferiado_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feriado_codferiado_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feriado_codferiado_seq OWNER TO postgres;

--
-- TOC entry 7345 (class 0 OID 0)
-- Dependencies: 385
-- Name: feriado_codferiado_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feriado_codferiado_seq OWNED BY feriado.codferiado;


--
-- TOC entry 386 (class 1259 OID 11288381)
-- Name: filapos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNLOGGED TABLE filapos (
    codpos bigint NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codtecrastr integer NOT NULL,
    idequiprastr character varying(25) NOT NULL,
    dtahrtecrastr timestamp with time zone NOT NULL,
    tpptoref integer,
    codptoref integer,
    nomeptoref character varying(255),
    angulo numeric(4,1),
    dist numeric(8,2),
    dtahr timestamp with time zone NOT NULL,
    long numeric(15,13) NOT NULL,
    lat numeric(15,13) NOT NULL,
    veloc integer,
    ignicao integer
);


ALTER TABLE filapos OWNER TO postgres;

--
-- TOC entry 387 (class 1259 OID 11288385)
-- Name: filatemp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNLOGGED TABLE filatemp (
    codtemp bigint NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codtecrastr integer NOT NULL,
    idequiprastr character varying(25) NOT NULL,
    dtahrtecrastr timestamp with time zone NOT NULL,
    dtahr timestamp with time zone NOT NULL,
    long numeric(15,13) NOT NULL,
    lat numeric(15,13) NOT NULL,
    sensor integer DEFAULT 1 NOT NULL,
    temperatura numeric(10,2) NOT NULL
);


ALTER TABLE filatemp OWNER TO postgres;

--
-- TOC entry 388 (class 1259 OID 11288390)
-- Name: geography_columns; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW geography_columns AS
SELECT current_database() AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geography_column, geography_typmod_dims(a.atttypmod) AS coord_dimension, geography_typmod_srid(a.atttypmod) AS srid, geography_typmod_type(a.atttypmod) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE ((((((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char"])) AND (t.typname = 'geography'::name)) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid));


ALTER TABLE geography_columns OWNER TO postgres;

SET default_with_oids = true;

--
-- TOC entry 389 (class 1259 OID 11288395)
-- Name: geometry_columns; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE geometry_columns (
    f_table_catalog character varying(256) NOT NULL,
    f_table_schema character varying(256) NOT NULL,
    f_table_name character varying(256) NOT NULL,
    f_geometry_column character varying(256) NOT NULL,
    coord_dimension integer NOT NULL,
    srid integer NOT NULL,
    type character varying(30) NOT NULL
);


ALTER TABLE geometry_columns OWNER TO postgres;

--
-- TOC entry 390 (class 1259 OID 11288401)
-- Name: sq_codgrp; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codgrp
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codgrp OWNER TO postgres;

SET default_with_oids = false;

--
-- TOC entry 391 (class 1259 OID 11288403)
-- Name: grp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE grp (
    codgrp integer DEFAULT nextval('sq_codgrp'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    nome character varying(50) NOT NULL,
    descr text,
    ativo boolean DEFAULT true NOT NULL,
    interno boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT true NOT NULL,
    isadm boolean DEFAULT false,
    ips text DEFAULT ''::text
);


ALTER TABLE grp OWNER TO postgres;

--
-- TOC entry 392 (class 1259 OID 11288416)
-- Name: grpemp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE grpemp (
    codgrpemp integer NOT NULL,
    codgrp integer NOT NULL,
    codemp integer NOT NULL,
    tipoemp character varying(20)
);


ALTER TABLE grpemp OWNER TO postgres;

--
-- TOC entry 393 (class 1259 OID 11288419)
-- Name: grpemp_codgrpemp_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE grpemp_codgrpemp_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE grpemp_codgrpemp_seq OWNER TO postgres;

--
-- TOC entry 7346 (class 0 OID 0)
-- Dependencies: 393
-- Name: grpemp_codgrpemp_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE grpemp_codgrpemp_seq OWNED BY grpemp.codgrpemp;


--
-- TOC entry 394 (class 1259 OID 11288421)
-- Name: sq_codgrpusr; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codgrpusr
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codgrpusr OWNER TO postgres;

--
-- TOC entry 395 (class 1259 OID 11288423)
-- Name: grpusr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE grpusr (
    codgrpusr integer DEFAULT nextval('sq_codgrpusr'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codgrp integer NOT NULL,
    codusr integer NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE grpusr OWNER TO postgres;

--
-- TOC entry 396 (class 1259 OID 11288429)
-- Name: sq_codhistanotocor; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codhistanotocor
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codhistanotocor OWNER TO postgres;

--
-- TOC entry 397 (class 1259 OID 11288431)
-- Name: histanotocor; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histanotocor (
    codhistanotocor bigint DEFAULT nextval('sq_codhistanotocor'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codocor bigint NOT NULL,
    anot text NOT NULL
);


ALTER TABLE histanotocor OWNER TO postgres;

--
-- TOC entry 398 (class 1259 OID 11288439)
-- Name: histcompl; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histcompl (
    codhistcompl integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    tpoper integer NOT NULL,
    codtpentidade integer NOT NULL,
    codentidade integer NOT NULL,
    codcarga bigint NOT NULL,
    nomeresp character varying(100)
);


ALTER TABLE histcompl OWNER TO postgres;

--
-- TOC entry 399 (class 1259 OID 11288442)
-- Name: histcompl_codhistcompl_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE histcompl_codhistcompl_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE histcompl_codhistcompl_seq OWNER TO postgres;

--
-- TOC entry 7347 (class 0 OID 0)
-- Dependencies: 399
-- Name: histcompl_codhistcompl_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE histcompl_codhistcompl_seq OWNED BY histcompl.codhistcompl;


--
-- TOC entry 400 (class 1259 OID 11288444)
-- Name: histempjanelapeso; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histempjanelapeso (
    codempendereco integer NOT NULL,
    codtpoper integer NOT NULL,
    codempjanelahist integer NOT NULL,
    peso numeric(5,2) NOT NULL,
    dtahralter timestamp with time zone
);


ALTER TABLE histempjanelapeso OWNER TO postgres;

--
-- TOC entry 401 (class 1259 OID 11288447)
-- Name: histemppos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histemppos (
    codhistemppos integer NOT NULL,
    codemp integer NOT NULL,
    codusrincl integer NOT NULL,
    pos_manual boolean DEFAULT false NOT NULL,
    pos_long numeric(15,13),
    pos_lat numeric(15,13),
    pos_raio integer DEFAULT 200 NOT NULL,
    pos_area geometry,
    dtahr timestamp with time zone
);


ALTER TABLE histemppos OWNER TO postgres;

--
-- TOC entry 402 (class 1259 OID 11288455)
-- Name: histemppos_codhistemppos_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE histemppos_codhistemppos_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE histemppos_codhistemppos_seq OWNER TO postgres;

--
-- TOC entry 7348 (class 0 OID 0)
-- Dependencies: 402
-- Name: histemppos_codhistemppos_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE histemppos_codhistemppos_seq OWNED BY histemppos.codhistemppos;


--
-- TOC entry 403 (class 1259 OID 11288457)
-- Name: histmotivoembcarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histmotivoembcarga (
    codhistmotivoembcarga integer NOT NULL,
    codembarquecarga integer NOT NULL,
    codmotivo integer NOT NULL,
    dtahrmotivo timestamp with time zone
);


ALTER TABLE histmotivoembcarga OWNER TO postgres;

--
-- TOC entry 404 (class 1259 OID 11288460)
-- Name: histmotivoembcarga_codhistmotivoembcarga_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE histmotivoembcarga_codhistmotivoembcarga_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE histmotivoembcarga_codhistmotivoembcarga_seq OWNER TO postgres;

--
-- TOC entry 7349 (class 0 OID 0)
-- Dependencies: 404
-- Name: histmotivoembcarga_codhistmotivoembcarga_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE histmotivoembcarga_codhistmotivoembcarga_seq OWNED BY histmotivoembcarga.codhistmotivoembcarga;


--
-- TOC entry 405 (class 1259 OID 11288462)
-- Name: sq_codhistpreventrega; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codhistpreventrega
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codhistpreventrega OWNER TO postgres;

--
-- TOC entry 406 (class 1259 OID 11288464)
-- Name: histpreventrega; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histpreventrega (
    codhistpreventrega integer DEFAULT nextval('sq_codhistpreventrega'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codcarga bigint NOT NULL,
    dtahrpreventrega timestamp with time zone,
    isagendamento boolean DEFAULT false NOT NULL,
    motivo character varying(255) NOT NULL
);


ALTER TABLE histpreventrega OWNER TO postgres;

--
-- TOC entry 407 (class 1259 OID 11288470)
-- Name: sq_codhistsitcarga; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codhistsitcarga
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codhistsitcarga OWNER TO postgres;

--
-- TOC entry 408 (class 1259 OID 11288472)
-- Name: histsitcarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histsitcarga (
    codhistsitcarga bigint DEFAULT nextval('sq_codhistsitcarga'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codcarga bigint NOT NULL,
    codsitcarga integer NOT NULL,
    sitcarga_descr character varying(255) NOT NULL,
    sitcarga_defineatraso boolean NOT NULL,
    sitcarga_tiraatraso boolean NOT NULL
);


ALTER TABLE histsitcarga OWNER TO postgres;

--
-- TOC entry 409 (class 1259 OID 11288477)
-- Name: sq_codhistsitembarque; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codhistsitembarque
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codhistsitembarque OWNER TO postgres;

--
-- TOC entry 410 (class 1259 OID 11288479)
-- Name: histsitembarque; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histsitembarque (
    codhistsitembarque bigint DEFAULT nextval('sq_codhistsitembarque'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codembarque bigint NOT NULL,
    codsitembarque integer NOT NULL,
    sitembarque_descr character varying(255) NOT NULL,
    sitembarque_defineretorno boolean NOT NULL,
    sitembarque_defineatraso boolean NOT NULL,
    sitembarque_tiraatraso boolean NOT NULL
);


ALTER TABLE histsitembarque OWNER TO postgres;

--
-- TOC entry 541 (class 1259 OID 16964313)
-- Name: histstatagendadescarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histstatagendadescarga (
    codhiststatagendadescarga integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codstatagendadescarga integer NOT NULL,
    codagendadescarga integer NOT NULL,
    codembarque integer NOT NULL,
    numnf character varying(20),
    statagendadescarga_descr character varying(255) NOT NULL
);


ALTER TABLE histstatagendadescarga OWNER TO postgres;

--
-- TOC entry 540 (class 1259 OID 16964311)
-- Name: histstatagendadescarga_codagendadescarga_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE histstatagendadescarga_codagendadescarga_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE histstatagendadescarga_codagendadescarga_seq OWNER TO postgres;

--
-- TOC entry 7350 (class 0 OID 0)
-- Dependencies: 540
-- Name: histstatagendadescarga_codagendadescarga_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE histstatagendadescarga_codagendadescarga_seq OWNED BY histstatagendadescarga.codagendadescarga;


--
-- TOC entry 538 (class 1259 OID 16964307)
-- Name: histstatagendadescarga_codhiststatagendadescarga_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE histstatagendadescarga_codhiststatagendadescarga_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE histstatagendadescarga_codhiststatagendadescarga_seq OWNER TO postgres;

--
-- TOC entry 7351 (class 0 OID 0)
-- Dependencies: 538
-- Name: histstatagendadescarga_codhiststatagendadescarga_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE histstatagendadescarga_codhiststatagendadescarga_seq OWNED BY histstatagendadescarga.codhiststatagendadescarga;


--
-- TOC entry 539 (class 1259 OID 16964309)
-- Name: histstatagendadescarga_codstatagendadescarga_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE histstatagendadescarga_codstatagendadescarga_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE histstatagendadescarga_codstatagendadescarga_seq OWNER TO postgres;

--
-- TOC entry 7352 (class 0 OID 0)
-- Dependencies: 539
-- Name: histstatagendadescarga_codstatagendadescarga_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE histstatagendadescarga_codstatagendadescarga_seq OWNED BY histstatagendadescarga.codstatagendadescarga;


--
-- TOC entry 411 (class 1259 OID 11288484)
-- Name: sq_codhiststatcarga; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codhiststatcarga
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codhiststatcarga OWNER TO postgres;

--
-- TOC entry 412 (class 1259 OID 11288486)
-- Name: histstatcarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histstatcarga (
    codhiststatcarga bigint DEFAULT nextval('sq_codhiststatcarga'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codcarga bigint NOT NULL,
    codstatcarga integer NOT NULL,
    statcarga_descr character varying(20) NOT NULL,
    statcarga_defineredespacho boolean NOT NULL,
    statcarga_definecancelado boolean NOT NULL,
    statcarga_definesinistro boolean NOT NULL,
    statcarga_defineinicio boolean NOT NULL,
    statcarga_definefim boolean NOT NULL
);


ALTER TABLE histstatcarga OWNER TO postgres;

--
-- TOC entry 413 (class 1259 OID 11288491)
-- Name: sq_codhiststatembarque; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codhiststatembarque
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codhiststatembarque OWNER TO postgres;

--
-- TOC entry 414 (class 1259 OID 11288493)
-- Name: histstatembarque; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histstatembarque (
    codhiststatembarque bigint DEFAULT nextval('sq_codhiststatembarque'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codembarque bigint NOT NULL,
    codstatembarque integer NOT NULL,
    statembarque_descr character varying(20) NOT NULL,
    statembarque_definecancelado boolean NOT NULL,
    statembarque_definesinistro boolean NOT NULL,
    statembarque_defineinicio boolean NOT NULL,
    statembarque_definefim boolean NOT NULL
);


ALTER TABLE histstatembarque OWNER TO postgres;

--
-- TOC entry 415 (class 1259 OID 11288498)
-- Name: sq_codhiststatocor; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codhiststatocor
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codhiststatocor OWNER TO postgres;

--
-- TOC entry 416 (class 1259 OID 11288500)
-- Name: histstatocor; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histstatocor (
    codhiststatocor bigint DEFAULT nextval('sq_codhiststatocor'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codocor bigint NOT NULL,
    codstatocor integer NOT NULL,
    statocor_descr character varying(20) NOT NULL,
    statocor_exigeanotacao boolean DEFAULT false NOT NULL,
    statocor_definereaberto boolean DEFAULT false NOT NULL,
    statocor_defineencerrado boolean DEFAULT false NOT NULL
);


ALTER TABLE histstatocor OWNER TO postgres;

--
-- TOC entry 557 (class 1259 OID 18215203)
-- Name: histstatpedido; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histstatpedido (
    codhiststatpedido bigint NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    codpedido bigint NOT NULL,
    codstatpedido integer NOT NULL
);


ALTER TABLE histstatpedido OWNER TO postgres;

--
-- TOC entry 556 (class 1259 OID 18215201)
-- Name: histstatpedido_codhiststatpedido_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE histstatpedido_codhiststatpedido_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE histstatpedido_codhiststatpedido_seq OWNER TO postgres;

--
-- TOC entry 7353 (class 0 OID 0)
-- Dependencies: 556
-- Name: histstatpedido_codhiststatpedido_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE histstatpedido_codhiststatpedido_seq OWNED BY histstatpedido.codhiststatpedido;


--
-- TOC entry 417 (class 1259 OID 11288508)
-- Name: histvincequiprastr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE histvincequiprastr (
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    status character(1) DEFAULT 'I'::bpchar NOT NULL,
    codtecrastr integer NOT NULL,
    idequiprastr character varying(25) NOT NULL,
    eh_rastrmovel boolean DEFAULT false NOT NULL,
    codtpentidade integer NOT NULL,
    codentidade integer NOT NULL
);


ALTER TABLE histvincequiprastr OWNER TO postgres;

--
-- TOC entry 418 (class 1259 OID 11288515)
-- Name: idioma; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE idioma (
    codidioma integer NOT NULL,
    nome character varying(100),
    icone character varying(200),
    ativo boolean DEFAULT true,
    ordem integer DEFAULT 0,
    abreviacao character varying(3),
    padrao boolean DEFAULT false,
    siglamaps character varying(6)
);


ALTER TABLE idioma OWNER TO postgres;

--
-- TOC entry 419 (class 1259 OID 11288521)
-- Name: idioma_codidioma_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE idioma_codidioma_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE idioma_codidioma_seq OWNER TO postgres;

--
-- TOC entry 7354 (class 0 OID 0)
-- Dependencies: 419
-- Name: idioma_codidioma_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE idioma_codidioma_seq OWNED BY idioma.codidioma;


--
-- TOC entry 420 (class 1259 OID 11288523)
-- Name: kpiciclocircuito; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE kpiciclocircuito (
    codciclo integer NOT NULL,
    codcircuito integer,
    dtahrincl timestamp with time zone,
    dtahrprevini timestamp with time zone,
    dtahrprevfim timestamp with time zone,
    dtahrini timestamp with time zone,
    dtahrfim timestamp with time zone,
    codpriembarque bigint,
    codembarqueatual bigint,
    noprazo boolean,
    diferenca integer,
    embarques bigint[] DEFAULT '{}'::bigint[],
    transportadoras bigint[] DEFAULT '{}'::bigint[],
    embarcadores bigint[] DEFAULT '{}'::bigint[]
);


ALTER TABLE kpiciclocircuito OWNER TO postgres;

--
-- TOC entry 421 (class 1259 OID 11288532)
-- Name: kpiciclocircuito_codciclo_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE kpiciclocircuito_codciclo_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE kpiciclocircuito_codciclo_seq OWNER TO postgres;

--
-- TOC entry 7355 (class 0 OID 0)
-- Dependencies: 421
-- Name: kpiciclocircuito_codciclo_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE kpiciclocircuito_codciclo_seq OWNED BY kpiciclocircuito.codciclo;


--
-- TOC entry 572 (class 1259 OID 19650878)
-- Name: leilao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE leilao (
    codleilao integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    dtahralter timestamp with time zone,
    codusralter integer,
    codstatleilao integer NOT NULL,
    dtahrabertura timestamp with time zone NOT NULL,
    dtahrencerramento timestamp with time zone NOT NULL,
    dtahrstatus timestamp with time zone NOT NULL,
    codpedido bigint NOT NULL,
    codbid integer NOT NULL,
    totvol numeric NOT NULL,
    qtdelotes integer DEFAULT 0 NOT NULL,
    tamanholote integer DEFAULT 0 NOT NULL,
    dtahrultlance timestamp with time zone,
    codtranspultlance integer,
    vlrultlance numeric(10,2) DEFAULT 0,
    codciduforigem integer NOT NULL,
    codcidufdestino integer NOT NULL,
    codtpcarga integer NOT NULL,
    dtahrminlance timestamp with time zone,
    codtranspminlance integer,
    vlrminlance numeric(10,2) DEFAULT 0
);


ALTER TABLE leilao OWNER TO postgres;

--
-- TOC entry 571 (class 1259 OID 19650876)
-- Name: leilao_codleilao_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE leilao_codleilao_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE leilao_codleilao_seq OWNER TO postgres;

--
-- TOC entry 7356 (class 0 OID 0)
-- Dependencies: 571
-- Name: leilao_codleilao_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE leilao_codleilao_seq OWNED BY leilao.codleilao;


--
-- TOC entry 578 (class 1259 OID 19650986)
-- Name: leilaoaprovacao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE leilaoaprovacao (
    codleilaoaprovacao integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    codleilao integer NOT NULL,
    aprovado boolean NOT NULL
);


ALTER TABLE leilaoaprovacao OWNER TO postgres;

--
-- TOC entry 577 (class 1259 OID 19650984)
-- Name: leilaoaprovacao_codleilaoaprovacao_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE leilaoaprovacao_codleilaoaprovacao_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE leilaoaprovacao_codleilaoaprovacao_seq OWNER TO postgres;

--
-- TOC entry 7357 (class 0 OID 0)
-- Dependencies: 577
-- Name: leilaoaprovacao_codleilaoaprovacao_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE leilaoaprovacao_codleilaoaprovacao_seq OWNED BY leilaoaprovacao.codleilaoaprovacao;


--
-- TOC entry 582 (class 1259 OID 19651020)
-- Name: leilaofrete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE leilaofrete (
    codleilaofrete bigint NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    codleilaotpfrete integer NOT NULL,
    codciduforigem integer NOT NULL,
    codcidufdestino integer NOT NULL,
    codtpcarga integer NOT NULL,
    vlr numeric(10,2) DEFAULT 0 NOT NULL,
    dtavigencia date NOT NULL,
    ativo boolean
);


ALTER TABLE leilaofrete OWNER TO postgres;

--
-- TOC entry 581 (class 1259 OID 19651018)
-- Name: leilaofrete_codleilaofrete_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE leilaofrete_codleilaofrete_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE leilaofrete_codleilaofrete_seq OWNER TO postgres;

--
-- TOC entry 7358 (class 0 OID 0)
-- Dependencies: 581
-- Name: leilaofrete_codleilaofrete_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE leilaofrete_codleilaofrete_seq OWNED BY leilaofrete.codleilaofrete;


--
-- TOC entry 576 (class 1259 OID 19650957)
-- Name: leilaolance; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE leilaolance (
    codleilaolance bigint NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codusrincl integer NOT NULL,
    codleilaotransp integer NOT NULL,
    codemptra integer NOT NULL,
    codleilao integer NOT NULL,
    vlrlance numeric(10,2) DEFAULT 0 NOT NULL,
    minlotes integer DEFAULT 0 NOT NULL,
    maxlotes integer DEFAULT 0 NOT NULL
);


ALTER TABLE leilaolance OWNER TO postgres;

--
-- TOC entry 575 (class 1259 OID 19650955)
-- Name: leilaolance_codleilaolance_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE leilaolance_codleilaolance_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE leilaolance_codleilaolance_seq OWNER TO postgres;

--
-- TOC entry 7359 (class 0 OID 0)
-- Dependencies: 575
-- Name: leilaolance_codleilaolance_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE leilaolance_codleilaolance_seq OWNED BY leilaolance.codleilaolance;


--
-- TOC entry 580 (class 1259 OID 19651005)
-- Name: leilaotpfrete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE leilaotpfrete (
    codleilaotpfrete integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    nome character varying(200) NOT NULL,
    id character varying(10) NOT NULL,
    ativo boolean DEFAULT true
);


ALTER TABLE leilaotpfrete OWNER TO postgres;

--
-- TOC entry 579 (class 1259 OID 19651003)
-- Name: leilaotpfrete_codleilaotpfrete_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE leilaotpfrete_codleilaotpfrete_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE leilaotpfrete_codleilaotpfrete_seq OWNER TO postgres;

--
-- TOC entry 7360 (class 0 OID 0)
-- Dependencies: 579
-- Name: leilaotpfrete_codleilaotpfrete_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE leilaotpfrete_codleilaotpfrete_seq OWNED BY leilaotpfrete.codleilaotpfrete;


--
-- TOC entry 574 (class 1259 OID 19650926)
-- Name: leilaotransp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE leilaotransp (
    codleilaotransp integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    dtahrinativo timestamp with time zone,
    codleilao integer NOT NULL,
    codemptra integer NOT NULL,
    vlrlance numeric(10,2) DEFAULT 0 NOT NULL,
    minlotes integer DEFAULT 0 NOT NULL,
    maxlotes integer DEFAULT 0 NOT NULL,
    aprovado boolean DEFAULT false,
    ativo boolean DEFAULT true,
    qtdeaprovado integer DEFAULT 0 NOT NULL
);


ALTER TABLE leilaotransp OWNER TO postgres;

--
-- TOC entry 573 (class 1259 OID 19650924)
-- Name: leilaotransp_codleilaotransp_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE leilaotransp_codleilaotransp_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE leilaotransp_codleilaotransp_seq OWNER TO postgres;

--
-- TOC entry 7361 (class 0 OID 0)
-- Dependencies: 573
-- Name: leilaotransp_codleilaotransp_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE leilaotransp_codleilaotransp_seq OWNED BY leilaotransp.codleilaotransp;


--
-- TOC entry 422 (class 1259 OID 11288534)
-- Name: sq_codlembrete; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codlembrete
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codlembrete OWNER TO postgres;

--
-- TOC entry 423 (class 1259 OID 11288536)
-- Name: lembrete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE lembrete (
    codlembrete bigint DEFAULT nextval('sq_codlembrete'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusrbaixa integer,
    dtahrbaixa timestamp with time zone,
    dtahralarme timestamp with time zone,
    codembarque bigint,
    codcarga bigint,
    texto text
);


ALTER TABLE lembrete OWNER TO postgres;

--
-- TOC entry 424 (class 1259 OID 11288544)
-- Name: sq_codlocexped; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codlocexped
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codlocexped OWNER TO postgres;

--
-- TOC entry 425 (class 1259 OID 11288546)
-- Name: locexped; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE locexped (
    codlocexped integer DEFAULT nextval('sq_codlocexped'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codempembar integer,
    empembar_id character varying(30),
    empembar_nome character varying(100),
    codigoexterno character varying(20) NOT NULL
);


ALTER TABLE locexped OWNER TO postgres;

--
-- TOC entry 426 (class 1259 OID 11288551)
-- Name: log_alteracoes_codlog_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE log_alteracoes_codlog_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE log_alteracoes_codlog_seq OWNER TO postgres;

--
-- TOC entry 7362 (class 0 OID 0)
-- Dependencies: 426
-- Name: log_alteracoes_codlog_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE log_alteracoes_codlog_seq OWNED BY log_alteracoes.codlog;


--
-- TOC entry 427 (class 1259 OID 11288553)
-- Name: modulo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE modulo (
    codmodulo integer NOT NULL,
    codpai integer,
    nome character varying(200) NOT NULL,
    classname character varying(230) NOT NULL,
    alias character varying(100),
    largura integer DEFAULT 500,
    altura integer DEFAULT 300,
    minimizavel boolean DEFAULT true,
    maximizavel boolean DEFAULT true,
    fechavel boolean DEFAULT true,
    modal boolean DEFAULT false,
    maximizado boolean DEFAULT false,
    ordem integer DEFAULT 0,
    menu boolean DEFAULT true,
    icone character varying(200),
    redimensionavel boolean DEFAULT true,
    atualizavel boolean DEFAULT false,
    fechar_esc boolean DEFAULT false,
    multiplainstancia boolean DEFAULT false
);


ALTER TABLE modulo OWNER TO postgres;

--
-- TOC entry 428 (class 1259 OID 11288571)
-- Name: modulo_codmodulo_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE modulo_codmodulo_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE modulo_codmodulo_seq OWNER TO postgres;

--
-- TOC entry 7363 (class 0 OID 0)
-- Dependencies: 428
-- Name: modulo_codmodulo_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE modulo_codmodulo_seq OWNED BY modulo.codmodulo;


--
-- TOC entry 429 (class 1259 OID 11288573)
-- Name: moduloacao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE moduloacao (
    codacao integer NOT NULL,
    codmodulo integer NOT NULL
);


ALTER TABLE moduloacao OWNER TO postgres;

--
-- TOC entry 430 (class 1259 OID 11288576)
-- Name: moeda; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE moeda (
    codmoeda integer NOT NULL,
    descr character varying(20) NOT NULL,
    sigla character varying(10)
);


ALTER TABLE moeda OWNER TO postgres;

--
-- TOC entry 431 (class 1259 OID 11288579)
-- Name: sq_codmot; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codmot
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codmot OWNER TO postgres;

--
-- TOC entry 432 (class 1259 OID 11288581)
-- Name: mot; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE mot (
    codmot integer DEFAULT nextval('sq_codmot'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    id character varying(30) NOT NULL,
    nome character varying(50) NOT NULL,
    foto bytea,
    genero character(1),
    dtanasc date,
    codcidufnat integer,
    logradouro character varying(255),
    bairro character varying(50),
    cep character varying(15),
    codciduf integer,
    pos_manual boolean DEFAULT false NOT NULL,
    pos_long numeric(15,13),
    pos_lat numeric(15,13),
    obs text,
    ativo boolean DEFAULT true NOT NULL,
    rg character varying(20),
    telefone character varying(100),
    cnh character varying(20)
);


ALTER TABLE mot OWNER TO postgres;

--
-- TOC entry 433 (class 1259 OID 11288591)
-- Name: motemp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE motemp (
    codmot integer NOT NULL,
    codemp integer NOT NULL
);


ALTER TABLE motemp OWNER TO postgres;

--
-- TOC entry 434 (class 1259 OID 11288594)
-- Name: motivo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE motivo (
    codmotivo integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(255) NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    tipos integer[] DEFAULT '{}'::integer[],
    template_email character varying(100)
);


ALTER TABLE motivo OWNER TO postgres;

--
-- TOC entry 435 (class 1259 OID 11288603)
-- Name: motivotpentidade; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE motivotpentidade (
    codmotivotpentidade integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codtpentidade integer NOT NULL,
    codmotivo integer NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE motivotpentidade OWNER TO postgres;

--
-- TOC entry 436 (class 1259 OID 11288608)
-- Name: sq_nf; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_nf
    START WITH 2026
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_nf OWNER TO postgres;

--
-- TOC entry 437 (class 1259 OID 11288610)
-- Name: nf; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE nf (
    codnf integer DEFAULT nextval('sq_nf'::regclass) NOT NULL,
    codcarga integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusralter integer,
    dtahralter timestamp with time zone,
    id character varying(200),
    numnf character varying(20),
    numdoc character varying(20),
    numped character varying(30),
    numvol integer DEFAULT 1 NOT NULL,
    vol numeric(7,2) DEFAULT 0 NOT NULL,
    codmoeda integer DEFAULT 1 NOT NULL,
    moeda_sigla character varying(10),
    vlr numeric(11,2) DEFAULT 0 NOT NULL,
    peso numeric(7,2) DEFAULT 0 NOT NULL,
    delivery boolean DEFAULT true,
    codmotivo integer,
    entregue boolean
);


ALTER TABLE nf OWNER TO postgres;

--
-- TOC entry 438 (class 1259 OID 11288620)
-- Name: sq_codocor; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codocor
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codocor OWNER TO postgres;

--
-- TOC entry 439 (class 1259 OID 11288622)
-- Name: ocor; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ocor (
    codocor bigint DEFAULT nextval('sq_codocor'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codstatocor integer DEFAULT 1 NOT NULL,
    dtahrencerrado timestamp with time zone,
    dtahrreaberto timestamp with time zone,
    codtpprior integer NOT NULL,
    codempresp integer,
    dtahrempresp timestamp with time zone,
    codusrresp integer,
    dtahrusrresp timestamp with time zone,
    codtpentidade integer NOT NULL,
    codentidade integer NOT NULL,
    codmotivo integer,
    descr text NOT NULL
);


ALTER TABLE ocor OWNER TO postgres;

--
-- TOC entry 440 (class 1259 OID 11288631)
-- Name: painelcontrole; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE painelcontrole (
    codemptra integer NOT NULL,
    codempembar integer NOT NULL,
    codstatcarga integer NOT NULL,
    codsitcarga integer NOT NULL,
    qtde integer DEFAULT 0,
    pesobruto double precision DEFAULT 0,
    volume double precision DEFAULT 0,
    cargas integer[],
    viagens integer[],
    numpalete bigint DEFAULT 0
);


ALTER TABLE painelcontrole OWNER TO postgres;

--
-- TOC entry 441 (class 1259 OID 11288641)
-- Name: pais; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pais (
    codpais integer NOT NULL,
    nome character varying(50) NOT NULL,
    sigla character(3),
    mascara_cep character varying(20) NOT NULL,
    mascara_siglauf character varying(20) NOT NULL
);


ALTER TABLE pais OWNER TO postgres;

--
-- TOC entry 442 (class 1259 OID 11288644)
-- Name: palavra; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE palavra (
    codpalavra integer NOT NULL,
    nome_interno character varying(150),
    chave character varying(200),
    codentidade integer DEFAULT 0,
    codtpentidade integer
);


ALTER TABLE palavra OWNER TO postgres;

--
-- TOC entry 443 (class 1259 OID 11288648)
-- Name: palavra_codpalavra_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE palavra_codpalavra_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE palavra_codpalavra_seq OWNER TO postgres;

--
-- TOC entry 7364 (class 0 OID 0)
-- Dependencies: 443
-- Name: palavra_codpalavra_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE palavra_codpalavra_seq OWNED BY palavra.codpalavra;


--
-- TOC entry 555 (class 1259 OID 18161860)
-- Name: pedido; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pedido (
    codpedido bigint NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    dtahralter timestamp with time zone,
    codusralter integer,
    codstatpedido integer NOT NULL,
    codtpcarga integer NOT NULL,
    codempembar integer NOT NULL,
    codempdest integer NOT NULL,
    id character varying(200) NOT NULL,
    descr character varying(200) DEFAULT ''::character varying,
    obs text DEFAULT ''::text,
    qtde numeric(13,4) DEFAULT 0 NOT NULL,
    unid character varying(10) NOT NULL,
    dtahrprevcoleta timestamp with time zone,
    dtahrpreventrega timestamp with time zone,
    qtdeconsumida numeric(13,4) DEFAULT 0 NOT NULL,
    ofertas integer[] DEFAULT '{}'::integer[] NOT NULL,
    embarques bigint[] DEFAULT '{}'::bigint[] NOT NULL,
    cargas bigint[] DEFAULT '{}'::bigint[] NOT NULL,
    bids bigint[] DEFAULT '{}'::bigint[] NOT NULL,
    codtpoper integer NOT NULL,
    leiloado bigint[] DEFAULT '{}'::bigint[] NOT NULL,
    codpedidooriginal bigint
);


ALTER TABLE pedido OWNER TO postgres;

--
-- TOC entry 554 (class 1259 OID 18161858)
-- Name: pedido_codpedido_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pedido_codpedido_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pedido_codpedido_seq OWNER TO postgres;

--
-- TOC entry 7365 (class 0 OID 0)
-- Dependencies: 554
-- Name: pedido_codpedido_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pedido_codpedido_seq OWNED BY pedido.codpedido;


--
-- TOC entry 444 (class 1259 OID 11288650)
-- Name: permissao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE permissao (
    codacao integer,
    codmodulo integer,
    codgrp integer
);


ALTER TABLE permissao OWNER TO postgres;

--
-- TOC entry 445 (class 1259 OID 11288653)
-- Name: sq_codpos; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codpos
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codpos OWNER TO postgres;

--
-- TOC entry 446 (class 1259 OID 11288655)
-- Name: pos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE pos (
    codpos bigint DEFAULT nextval('sq_codpos'::regclass) NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codtecrastr integer NOT NULL,
    idequiprastr character varying(25) NOT NULL,
    dtahrtecrastr timestamp with time zone NOT NULL,
    tpptoref integer,
    codptoref integer,
    nomeptoref character varying(255),
    angulo numeric(4,1),
    dist numeric(8,2),
    dtahr timestamp with time zone NOT NULL,
    long numeric(15,13) NOT NULL,
    lat numeric(15,13) NOT NULL,
    veloc integer,
    ignicao integer
);


ALTER TABLE pos OWNER TO postgres;

SET default_tablespace = "int";

--
-- TOC entry 512 (class 1259 OID 11453259)
-- Name: pos_20150608_0614_w24; Type: TABLE; Schema: public; Owner: postgres; Tablespace: int
--

CREATE TABLE pos_20150608_0614_w24 (
    CONSTRAINT pos_20150608_0614_w24_dtahr_check CHECK (((dtahr >= '2015-06-08 00:00:00-03'::timestamp with time zone) AND (dtahr <= '2015-06-14 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (pos);


ALTER TABLE pos_20150608_0614_w24 OWNER TO postgres;

--
-- TOC entry 514 (class 1259 OID 11583516)
-- Name: pos_20150615_0621_w25; Type: TABLE; Schema: public; Owner: postgres; Tablespace: int
--

CREATE TABLE pos_20150615_0621_w25 (
    CONSTRAINT pos_20150615_0621_w25_dtahr_check CHECK (((dtahr >= '2015-06-15 00:00:00-03'::timestamp with time zone) AND (dtahr <= '2015-06-21 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (pos);


ALTER TABLE pos_20150615_0621_w25 OWNER TO postgres;

--
-- TOC entry 519 (class 1259 OID 12524283)
-- Name: pos_20150622_0628_w26; Type: TABLE; Schema: public; Owner: postgres; Tablespace: int
--

CREATE TABLE pos_20150622_0628_w26 (
    CONSTRAINT pos_20150622_0628_w26_dtahr_check CHECK (((dtahr >= '2015-06-22 00:00:00-03'::timestamp with time zone) AND (dtahr <= '2015-06-28 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (pos);


ALTER TABLE pos_20150622_0628_w26 OWNER TO postgres;

--
-- TOC entry 549 (class 1259 OID 17997721)
-- Name: pos_20150817_0823_w34; Type: TABLE; Schema: public; Owner: postgres; Tablespace: int
--

CREATE TABLE pos_20150817_0823_w34 (
    CONSTRAINT pos_20150817_0823_w34_dtahr_check CHECK (((dtahr >= '2015-08-17 00:00:00-03'::timestamp with time zone) AND (dtahr <= '2015-08-23 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (pos);


ALTER TABLE pos_20150817_0823_w34 OWNER TO postgres;

--
-- TOC entry 565 (class 1259 OID 18814007)
-- Name: pos_20150907_0913_w37; Type: TABLE; Schema: public; Owner: postgres; Tablespace: int
--

CREATE TABLE pos_20150907_0913_w37 (
    CONSTRAINT pos_20150907_0913_w37_dtahr_check CHECK (((dtahr >= '2015-09-07 00:00:00-03'::timestamp with time zone) AND (dtahr <= '2015-09-13 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (pos);


ALTER TABLE pos_20150907_0913_w37 OWNER TO postgres;

--
-- TOC entry 447 (class 1259 OID 11288708)
-- Name: sq_codprazotransito; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codprazotransito
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codprazotransito OWNER TO postgres;

SET default_tablespace = '';

--
-- TOC entry 448 (class 1259 OID 11288710)
-- Name: prazotransito; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE prazotransito (
    codprazotransito bigint DEFAULT nextval('sq_codprazotransito'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codciduforig integer NOT NULL,
    codcidufdest integer NOT NULL,
    dtavigencia date,
    distancia integer,
    prazo integer,
    codemptra integer,
    tipo integer DEFAULT 1,
    ativo boolean DEFAULT true
);


ALTER TABLE prazotransito OWNER TO postgres;

--
-- TOC entry 531 (class 1259 OID 15153958)
-- Name: produto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE produto (
    codproduto integer NOT NULL,
    codtpcarga integer NOT NULL,
    sapid integer NOT NULL,
    descr character varying(100) NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE produto OWNER TO postgres;

--
-- TOC entry 7366 (class 0 OID 0)
-- Dependencies: 531
-- Name: COLUMN produto.codproduto; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN produto.codproduto IS 'Chave primaria';


--
-- TOC entry 7367 (class 0 OID 0)
-- Dependencies: 531
-- Name: COLUMN produto.codtpcarga; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN produto.codtpcarga IS 'Tipo da carga (VHP/VVHP)';


--
-- TOC entry 7368 (class 0 OID 0)
-- Dependencies: 531
-- Name: COLUMN produto.sapid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN produto.sapid IS 'Codigo enviado pelo SAP';


--
-- TOC entry 7369 (class 0 OID 0)
-- Dependencies: 531
-- Name: COLUMN produto.descr; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN produto.descr IS 'Descricao';


--
-- TOC entry 7370 (class 0 OID 0)
-- Dependencies: 531
-- Name: COLUMN produto.ativo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN produto.ativo IS 'Registro ativo';


--
-- TOC entry 530 (class 1259 OID 15153956)
-- Name: produto_codproduto_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE produto_codproduto_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE produto_codproduto_seq OWNER TO postgres;

--
-- TOC entry 7371 (class 0 OID 0)
-- Dependencies: 530
-- Name: produto_codproduto_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE produto_codproduto_seq OWNED BY produto.codproduto;


--
-- TOC entry 449 (class 1259 OID 11288717)
-- Name: sq_codprogcoleta; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codprogcoleta
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codprogcoleta OWNER TO postgres;

--
-- TOC entry 450 (class 1259 OID 11288719)
-- Name: progcoleta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE progcoleta (
    codprogcoleta bigint DEFAULT nextval('sq_codprogcoleta'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codusralter integer,
    dtahralter timestamp with time zone,
    dtahrprevini timestamp with time zone,
    dtahrprevatual timestamp with time zone,
    dtahrcancelado timestamp with time zone,
    codusrcancelado integer,
    dtahraceite timestamp with time zone,
    codusraceite integer,
    dtahrrecusa timestamp with time zone,
    codusrrecusa integer,
    codembarque bigint,
    codemptra integer,
    codtpveic integer,
    totalcarga integer DEFAULT 0 NOT NULL,
    totalnumvol integer DEFAULT 0 NOT NULL,
    totalpeso numeric(12,2) DEFAULT 0 NOT NULL,
    totalvol numeric(12,2) DEFAULT 0 NOT NULL,
    codempembar bigint,
    notificado boolean DEFAULT false NOT NULL,
    notificadoembarque boolean DEFAULT false,
    codstatprogcoleta integer,
    descrstatprogcoleta character varying(50),
    codtpoper integer,
    progoriginal text,
    prazocontratual integer DEFAULT 24,
    foraprazocontratual boolean DEFAULT false,
    dtahrlimiteaceite timestamp with time zone,
    totalnumpalete integer DEFAULT 0 NOT NULL,
    cargasid text DEFAULT '{}'::text,
    cargaagendada boolean DEFAULT false,
    dtahrpreventrega timestamp with time zone,
    dtaremessa date,
    obs text,
    codbidtransp integer,
    considerarbid boolean DEFAULT true,
    codtpcarga integer[],
    venda boolean DEFAULT false,
    temdelivery boolean DEFAULT false,
    agendamento_realizado integer DEFAULT 0,
    embarques bigint[] DEFAULT '{}'::bigint[] NOT NULL,
    qtde numeric DEFAULT 0 NOT NULL,
    qtdeconsumida numeric DEFAULT 0 NOT NULL,
    codpedido bigint,
    codempdest integer,
    unid character varying(10) DEFAULT ''::character varying NOT NULL,
    simultanea boolean DEFAULT false,
    codprogcoletaoriginal integer
);


ALTER TABLE progcoleta OWNER TO postgres;

--
-- TOC entry 451 (class 1259 OID 11288742)
-- Name: sq_codprogcoletacarga; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codprogcoletacarga
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codprogcoletacarga OWNER TO postgres;

--
-- TOC entry 452 (class 1259 OID 11288744)
-- Name: progcoletacarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE progcoletacarga (
    codprogcoletacarga bigint DEFAULT nextval('sq_codprogcoletacarga'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codprogcoleta bigint NOT NULL,
    codcarga bigint NOT NULL
);


ALTER TABLE progcoletacarga OWNER TO postgres;

--
-- TOC entry 453 (class 1259 OID 11288749)
-- Name: ptoref; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ptoref (
    tp integer NOT NULL,
    cod integer NOT NULL,
    nome character varying(255) NOT NULL,
    coord geometry,
    CONSTRAINT enforce_dims_coord CHECK ((st_ndims(coord) = 2)),
    CONSTRAINT enforce_geotype_coord CHECK (((geometrytype(coord) = 'POINT'::text) OR (coord IS NULL))),
    CONSTRAINT enforce_srid_coord CHECK ((st_srid(coord) = 29101))
);


ALTER TABLE ptoref OWNER TO postgres;

--
-- TOC entry 454 (class 1259 OID 11288758)
-- Name: sq_codrastrmovel; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codrastrmovel
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codrastrmovel OWNER TO postgres;

--
-- TOC entry 455 (class 1259 OID 11288760)
-- Name: rastrmovel; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE rastrmovel (
    codrastrmovel integer DEFAULT nextval('sq_codrastrmovel'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    modelo character varying(20),
    codtecrastr integer,
    idequiprastr character varying(25),
    ultpos_long numeric(15,13),
    ultpos_lat numeric(15,13),
    ultpos_dtahr timestamp with time zone,
    ultpos_descr character varying(255),
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE rastrmovel OWNER TO postgres;

--
-- TOC entry 456 (class 1259 OID 11288766)
-- Name: relatorio; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE relatorio (
    codrelatorio integer NOT NULL,
    tipo integer NOT NULL,
    titulo character varying(200),
    arquivo character varying(200),
    ordem integer,
    codcategoria integer,
    parametros text,
    visivel boolean DEFAULT true,
    padrao boolean,
    versao numeric(5,2) DEFAULT 1 NOT NULL,
    nome character varying(200)
);


ALTER TABLE relatorio OWNER TO postgres;

--
-- TOC entry 457 (class 1259 OID 11288774)
-- Name: relatorio_codrelatorio_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE relatorio_codrelatorio_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE relatorio_codrelatorio_seq OWNER TO postgres;

--
-- TOC entry 7372 (class 0 OID 0)
-- Dependencies: 457
-- Name: relatorio_codrelatorio_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE relatorio_codrelatorio_seq OWNED BY relatorio.codrelatorio;


--
-- TOC entry 458 (class 1259 OID 11288776)
-- Name: sq_codrota; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codrota
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codrota OWNER TO postgres;

--
-- TOC entry 459 (class 1259 OID 11288778)
-- Name: rota; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE rota (
    codrota integer DEFAULT nextval('sq_codrota'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    id character varying(30),
    descr character varying(255) NOT NULL,
    progpos geometry,
    ativo boolean DEFAULT true NOT NULL,
    CONSTRAINT enforce_dims_progpos CHECK ((st_ndims(progpos) = 2)),
    CONSTRAINT enforce_geotype_progpos CHECK (((geometrytype(progpos) = 'LINESTRING'::text) OR (progpos IS NULL))),
    CONSTRAINT enforce_srid_progpos CHECK ((st_srid(progpos) = 29101))
);


ALTER TABLE rota OWNER TO postgres;

--
-- TOC entry 460 (class 1259 OID 11288790)
-- Name: sitcarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sitcarga (
    codsitcarga integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(255) NOT NULL,
    codtpprior integer,
    geraocor boolean DEFAULT false NOT NULL,
    defineatraso boolean DEFAULT false NOT NULL,
    tiraatraso boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT true NOT NULL,
    manual boolean DEFAULT true NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE sitcarga OWNER TO postgres;

--
-- TOC entry 461 (class 1259 OID 11288800)
-- Name: sitembarque; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sitembarque (
    codsitembarque integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(255) NOT NULL,
    codtpprior integer,
    geraocor boolean DEFAULT false NOT NULL,
    defineretorno boolean DEFAULT false NOT NULL,
    defineatraso boolean DEFAULT false NOT NULL,
    tiraatraso boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT true NOT NULL,
    manual boolean DEFAULT true NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE sitembarque OWNER TO postgres;

--
-- TOC entry 462 (class 1259 OID 11288811)
-- Name: spatial_ref_sys; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE spatial_ref_sys (
    srid integer NOT NULL,
    auth_name character varying(256),
    auth_srid integer,
    srtext character varying(2048),
    proj4text character varying(2048)
);


ALTER TABLE spatial_ref_sys OWNER TO postgres;

--
-- TOC entry 542 (class 1259 OID 17018745)
-- Name: sq_codagendadescarga; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codagendadescarga
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codagendadescarga OWNER TO postgres;

--
-- TOC entry 463 (class 1259 OID 11288817)
-- Name: sq_codtemp; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codtemp
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codtemp OWNER TO postgres;

--
-- TOC entry 464 (class 1259 OID 11288819)
-- Name: sq_codtemplateemail; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codtemplateemail
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codtemplateemail OWNER TO postgres;

--
-- TOC entry 465 (class 1259 OID 11288821)
-- Name: sq_codtpcarga; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codtpcarga
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codtpcarga OWNER TO postgres;

--
-- TOC entry 466 (class 1259 OID 11288823)
-- Name: sq_codtpevento; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codtpevento
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_codtpevento OWNER TO postgres;

--
-- TOC entry 467 (class 1259 OID 11288825)
-- Name: sq_codtpveic; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codtpveic
    START WITH 1000
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codtpveic OWNER TO postgres;

--
-- TOC entry 468 (class 1259 OID 11288827)
-- Name: sq_codusr; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codusr
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codusr OWNER TO postgres;

--
-- TOC entry 469 (class 1259 OID 11288829)
-- Name: sq_codveic; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_codveic
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    MAXVALUE 2147483647
    CACHE 1;


ALTER TABLE sq_codveic OWNER TO postgres;

--
-- TOC entry 470 (class 1259 OID 11288831)
-- Name: sq_tpcodevento; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sq_tpcodevento
    START WITH 32
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sq_tpcodevento OWNER TO postgres;

--
-- TOC entry 535 (class 1259 OID 16894562)
-- Name: statagendadescarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE statagendadescarga (
    codstatagendadescarga integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(50) NOT NULL,
    definecancelado boolean DEFAULT false NOT NULL,
    defineinicio boolean DEFAULT false NOT NULL,
    definefim boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT true NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    cor character(6),
    corsecundaria character(6),
    idintegracao integer
);


ALTER TABLE statagendadescarga OWNER TO postgres;

--
-- TOC entry 534 (class 1259 OID 16894560)
-- Name: statagendadescarga_codstatagendadescarga_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE statagendadescarga_codstatagendadescarga_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE statagendadescarga_codstatagendadescarga_seq OWNER TO postgres;

--
-- TOC entry 7373 (class 0 OID 0)
-- Dependencies: 534
-- Name: statagendadescarga_codstatagendadescarga_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE statagendadescarga_codstatagendadescarga_seq OWNED BY statagendadescarga.codstatagendadescarga;


--
-- TOC entry 471 (class 1259 OID 11288833)
-- Name: statcarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE statcarga (
    codstatcarga integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(20) NOT NULL,
    defineredespacho boolean DEFAULT false NOT NULL,
    definecancelado boolean DEFAULT false NOT NULL,
    definesinistro boolean DEFAULT false NOT NULL,
    defineinicio boolean DEFAULT false NOT NULL,
    definefim boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT false NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    cor character(6),
    ordem_painel integer DEFAULT 0,
    corsecundaria character(6),
    icone character varying(100) DEFAULT 'imagens/icones/lock.png'::character varying
);


ALTER TABLE statcarga OWNER TO postgres;

--
-- TOC entry 472 (class 1259 OID 11288846)
-- Name: statembarque; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE statembarque (
    codstatembarque integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(20) NOT NULL,
    definecancelado boolean DEFAULT false NOT NULL,
    definesinistro boolean DEFAULT false NOT NULL,
    defineinicio boolean DEFAULT false NOT NULL,
    definefim boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT true NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    cor character(6),
    corsecundaria character(6),
    defineprogramado boolean DEFAULT false NOT NULL
);


ALTER TABLE statembarque OWNER TO postgres;

--
-- TOC entry 570 (class 1259 OID 19650859)
-- Name: statleilao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE statleilao (
    codstatleilao integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    nome character varying(100) NOT NULL,
    id character varying(100) NOT NULL,
    defineaberto boolean DEFAULT false,
    definecancelado boolean DEFAULT false,
    defineencerrado boolean DEFAULT false,
    defineaprovado boolean DEFAULT false,
    definereprovado boolean DEFAULT false,
    defineagaprovacao boolean DEFAULT false
);


ALTER TABLE statleilao OWNER TO postgres;

--
-- TOC entry 569 (class 1259 OID 19650857)
-- Name: statleilao_codstatleilao_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE statleilao_codstatleilao_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE statleilao_codstatleilao_seq OWNER TO postgres;

--
-- TOC entry 7374 (class 0 OID 0)
-- Dependencies: 569
-- Name: statleilao_codstatleilao_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE statleilao_codstatleilao_seq OWNED BY statleilao.codstatleilao;


--
-- TOC entry 473 (class 1259 OID 11288857)
-- Name: statocor; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE statocor (
    codstatocor integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(20) NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    editavel boolean DEFAULT false NOT NULL,
    exigeanotacao boolean DEFAULT true NOT NULL,
    definereaberto boolean DEFAULT false NOT NULL,
    defineencerrado boolean DEFAULT false NOT NULL
);


ALTER TABLE statocor OWNER TO postgres;

--
-- TOC entry 553 (class 1259 OID 18161834)
-- Name: statpedido; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE statpedido (
    codstatpedido integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    dtahralter timestamp with time zone,
    codusralter integer,
    nome character varying(200) NOT NULL,
    cor character varying(15) DEFAULT '#FFFFFF'::character varying NOT NULL,
    id character varying(100) NOT NULL,
    ordem integer DEFAULT 0 NOT NULL,
    definepodecancelar boolean DEFAULT false,
    definepodeofertar boolean DEFAULT false,
    definecancelado boolean DEFAULT false,
    defineofertado boolean DEFAULT false,
    definepodeeditar boolean DEFAULT false,
    ativo boolean DEFAULT true,
    defineagliberacao boolean DEFAULT false,
    defineagofertainicial boolean DEFAULT false,
    defineagleilao boolean DEFAULT false,
    definepodeleiloar boolean DEFAULT false,
    defineleiloado boolean DEFAULT false
);


ALTER TABLE statpedido OWNER TO postgres;

--
-- TOC entry 552 (class 1259 OID 18161832)
-- Name: statpedido_codstatpedido_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE statpedido_codstatpedido_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE statpedido_codstatpedido_seq OWNER TO postgres;

--
-- TOC entry 7375 (class 0 OID 0)
-- Dependencies: 552
-- Name: statpedido_codstatpedido_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE statpedido_codstatpedido_seq OWNED BY statpedido.codstatpedido;


--
-- TOC entry 474 (class 1259 OID 11288866)
-- Name: statprogcoleta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE statprogcoleta (
    codstatprogcoleta integer NOT NULL,
    descr character varying(50),
    definecancelado boolean DEFAULT false,
    definerecusado boolean DEFAULT false,
    defineaceito boolean DEFAULT false,
    ativo boolean DEFAULT true,
    cor character varying(10)
);


ALTER TABLE statprogcoleta OWNER TO postgres;

--
-- TOC entry 475 (class 1259 OID 11288873)
-- Name: tecrastr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tecrastr (
    codtecrastr integer NOT NULL,
    nome character varying(50) NOT NULL,
    toleranciasinal integer DEFAULT 30
);


ALTER TABLE tecrastr OWNER TO postgres;

--
-- TOC entry 476 (class 1259 OID 11288877)
-- Name: temp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE temp (
    codtemp bigint DEFAULT nextval('sq_codtemp'::regclass) NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codtecrastr integer NOT NULL,
    idequiprastr character varying(25) NOT NULL,
    dtahrtecrastr timestamp with time zone NOT NULL,
    dtahr timestamp with time zone NOT NULL,
    long numeric(15,13) NOT NULL,
    lat numeric(15,13) NOT NULL,
    sensor integer DEFAULT 1,
    temperatura numeric(10,2) NOT NULL
);


ALTER TABLE temp OWNER TO postgres;

--
-- TOC entry 477 (class 1259 OID 11288883)
-- Name: temp_20140505_0511_w19; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE temp_20140505_0511_w19 (
    CONSTRAINT temp_20140505_0511_w19_dtahr_check CHECK (((dtahr >= '2014-05-05 00:00:00-03'::timestamp with time zone) AND (dtahr <= '2014-05-11 23:59:59.999-03'::timestamp with time zone)))
)
INHERITS (temp);


ALTER TABLE temp_20140505_0511_w19 OWNER TO postgres;

--
-- TOC entry 478 (class 1259 OID 11288890)
-- Name: templateemail; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE templateemail (
    codtemplateemail integer DEFAULT nextval('sq_codtemplateemail'::regclass) NOT NULL,
    descricao character varying(50) NOT NULL,
    subject character varying(250) NOT NULL,
    modelo text,
    ativo boolean DEFAULT true,
    codusrincl integer NOT NULL,
    codusralter integer,
    dtahrincl timestamp with time zone DEFAULT now(),
    dtahralter timestamp with time zone
);


ALTER TABLE templateemail OWNER TO postgres;

--
-- TOC entry 479 (class 1259 OID 11288899)
-- Name: token; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE token (
    token character varying(20) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone,
    dtahrexpir timestamp with time zone,
    statususo boolean DEFAULT false,
    dtahruso timestamp with time zone
);


ALTER TABLE token OWNER TO postgres;

--
-- TOC entry 480 (class 1259 OID 11288903)
-- Name: tpcarga; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpcarga (
    codtpcarga integer DEFAULT nextval('sq_codtpcarga'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    id character varying(30),
    descr character varying(255) NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    climatizada boolean DEFAULT false,
    templimiteminimo numeric(7,2) DEFAULT 0,
    tempnormalminimo numeric(7,2) DEFAULT 0,
    tempnormalmaximo numeric(7,2) DEFAULT 0,
    templimitemaximo numeric(7,2) DEFAULT 0,
    prioridade integer DEFAULT 0,
    usaragendadescarga boolean DEFAULT false NOT NULL
);


ALTER TABLE tpcarga OWNER TO postgres;

--
-- TOC entry 7376 (class 0 OID 0)
-- Dependencies: 480
-- Name: COLUMN tpcarga.usaragendadescarga; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN tpcarga.usaragendadescarga IS 'Tipo de carga faz parte das regras do agendamento de descarga.';


--
-- TOC entry 481 (class 1259 OID 11288915)
-- Name: tpcarreta; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpcarreta (
    codtpcarreta integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    nome character varying(50) NOT NULL,
    vol numeric(7,2) DEFAULT 0,
    peso numeric(7,2) DEFAULT 0,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE tpcarreta OWNER TO postgres;

--
-- TOC entry 482 (class 1259 OID 11288922)
-- Name: tpconfig; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpconfig (
    codtpconfig integer NOT NULL,
    descr character varying(255) NOT NULL
);


ALTER TABLE tpconfig OWNER TO postgres;

--
-- TOC entry 483 (class 1259 OID 11288925)
-- Name: tpentidade; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpentidade (
    codtpentidade integer NOT NULL,
    descr character varying(50) NOT NULL
);


ALTER TABLE tpentidade OWNER TO postgres;

--
-- TOC entry 484 (class 1259 OID 11288928)
-- Name: tpevento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpevento (
    codtpevento integer NOT NULL,
    codtpeventocjto integer NOT NULL,
    codmodulo integer,
    proxcodstatcarga integer,
    proxcodstatembarque integer,
    nome character varying(200) NOT NULL,
    ordemexec integer DEFAULT 0 NOT NULL,
    tempomedio integer NOT NULL,
    servico character varying(255),
    execservantes boolean DEFAULT true,
    exibirpainel boolean DEFAULT true,
    ativo boolean DEFAULT true,
    cor character varying(20) DEFAULT 'FFCC00'::character varying,
    tempomediomin integer DEFAULT 0,
    tempomediomax integer DEFAULT 0,
    sapid character varying(10),
    multiplaescolha boolean DEFAULT false,
    finalizaretapa boolean DEFAULT false
);


ALTER TABLE tpevento OWNER TO postgres;

--
-- TOC entry 485 (class 1259 OID 11288934)
-- Name: tpevento_codtpevento_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tpevento_codtpevento_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tpevento_codtpevento_seq OWNER TO postgres;

--
-- TOC entry 7377 (class 0 OID 0)
-- Dependencies: 485
-- Name: tpevento_codtpevento_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tpevento_codtpevento_seq OWNED BY tpevento.codtpevento;


--
-- TOC entry 486 (class 1259 OID 11288936)
-- Name: tpeventocjto; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpeventocjto (
    codtpeventocjto integer NOT NULL,
    nome character varying(200) NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE tpeventocjto OWNER TO postgres;

--
-- TOC entry 487 (class 1259 OID 11288940)
-- Name: tpeventocjto_codtpeventocjto_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tpeventocjto_codtpeventocjto_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tpeventocjto_codtpeventocjto_seq OWNER TO postgres;

--
-- TOC entry 7378 (class 0 OID 0)
-- Dependencies: 487
-- Name: tpeventocjto_codtpeventocjto_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tpeventocjto_codtpeventocjto_seq OWNED BY tpeventocjto.codtpeventocjto;


--
-- TOC entry 488 (class 1259 OID 11288942)
-- Name: tpeventoembarque; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpeventoembarque (
    codtpeventoembarque integer NOT NULL,
    codemp integer NOT NULL,
    codusr integer,
    codembarque integer NOT NULL,
    codtpevento integer NOT NULL,
    codtpeventocjto integer NOT NULL,
    nometpevento character varying(200) NOT NULL,
    ordemexec integer NOT NULL,
    dtahrprevini timestamp with time zone NOT NULL,
    dtahrprevfim timestamp with time zone NOT NULL,
    dtahrini timestamp with time zone,
    dtahrfim timestamp with time zone,
    pos_lat double precision,
    pos_long double precision,
    iniciadoposalvo boolean DEFAULT false,
    dtahrprevfimmenor timestamp with time zone,
    dtahrprevfimmaior timestamp with time zone,
    alertaenviado boolean DEFAULT false
);


ALTER TABLE tpeventoembarque OWNER TO postgres;

--
-- TOC entry 489 (class 1259 OID 11288945)
-- Name: tpeventoembarque_codtpeventoembarque_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tpeventoembarque_codtpeventoembarque_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tpeventoembarque_codtpeventoembarque_seq OWNER TO postgres;

--
-- TOC entry 7379 (class 0 OID 0)
-- Dependencies: 489
-- Name: tpeventoembarque_codtpeventoembarque_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tpeventoembarque_codtpeventoembarque_seq OWNED BY tpeventoembarque.codtpeventoembarque;


--
-- TOC entry 510 (class 1259 OID 11291982)
-- Name: tpeventoemp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpeventoemp (
    codtpeventoemp integer NOT NULL,
    dtahrincl timestamp with time zone,
    codusrincl integer,
    dtahralter timestamp with time zone,
    codusralter integer,
    codtpevento integer,
    codemp integer,
    ordem integer,
    pos_area geometry,
    pos_lat numeric,
    pos_long numeric,
    ativo boolean DEFAULT true
);


ALTER TABLE tpeventoemp OWNER TO postgres;

--
-- TOC entry 509 (class 1259 OID 11291980)
-- Name: tpeventoemp_codtpeventoemp_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tpeventoemp_codtpeventoemp_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tpeventoemp_codtpeventoemp_seq OWNER TO postgres;

--
-- TOC entry 7380 (class 0 OID 0)
-- Dependencies: 509
-- Name: tpeventoemp_codtpeventoemp_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tpeventoemp_codtpeventoemp_seq OWNED BY tpeventoemp.codtpeventoemp;


--
-- TOC entry 490 (class 1259 OID 11288947)
-- Name: tpeventousr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpeventousr (
    codtpevento integer NOT NULL,
    codusr integer NOT NULL,
    codemp integer NOT NULL
);


ALTER TABLE tpeventousr OWNER TO postgres;

--
-- TOC entry 491 (class 1259 OID 11288950)
-- Name: tpferiado; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpferiado (
    codtpferiado integer NOT NULL,
    nome character varying(100),
    cor character varying(10),
    federal boolean,
    estadual boolean,
    municipal boolean
);


ALTER TABLE tpferiado OWNER TO postgres;

--
-- TOC entry 492 (class 1259 OID 11288953)
-- Name: tpferiado_codtpferiado_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tpferiado_codtpferiado_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tpferiado_codtpferiado_seq OWNER TO postgres;

--
-- TOC entry 7381 (class 0 OID 0)
-- Dependencies: 492
-- Name: tpferiado_codtpferiado_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tpferiado_codtpferiado_seq OWNED BY tpferiado.codtpferiado;


--
-- TOC entry 493 (class 1259 OID 11288955)
-- Name: tpmotivo; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpmotivo (
    codtpmotivo integer NOT NULL,
    descr character varying(50) NOT NULL,
    chave character varying(50)
);


ALTER TABLE tpmotivo OWNER TO postgres;

--
-- TOC entry 494 (class 1259 OID 11288958)
-- Name: tpoper; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpoper (
    codtpoper integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    descr character varying(20) NOT NULL,
    temredespacho boolean DEFAULT false NOT NULL,
    editavel boolean DEFAULT false NOT NULL,
    ativo boolean DEFAULT true NOT NULL,
    exibirroteiro boolean DEFAULT false,
    usarrastreamento boolean DEFAULT true,
    distribuicao boolean DEFAULT false,
    ctrlcarregamento boolean DEFAULT false,
    ctrldescarregamento boolean DEFAULT false,
    tipoprazotransito integer DEFAULT 1,
    importarnotas boolean DEFAULT true,
    definetnf boolean DEFAULT false,
    prazoaceite integer DEFAULT 1440,
    cor character varying(10) DEFAULT 'ffffff'::character varying,
    considerarfds boolean DEFAULT false,
    hrinicio time without time zone DEFAULT '07:00:00'::time without time zone,
    hrlimite time without time zone DEFAULT '17:00:00'::time without time zone,
    prioridadeds integer DEFAULT (-1),
    defineautooferta boolean DEFAULT false,
    id character varying(20) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE tpoper OWNER TO postgres;

--
-- TOC entry 495 (class 1259 OID 11288980)
-- Name: tppalete; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tppalete (
    codtppalete integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusralter integer,
    dtahralter timestamp with time zone,
    nome character varying(100) NOT NULL,
    cor character varying(10),
    largura double precision,
    altura double precision,
    comprimento double precision,
    volume double precision,
    peso double precision,
    ativo boolean
);


ALTER TABLE tppalete OWNER TO postgres;

--
-- TOC entry 496 (class 1259 OID 11288983)
-- Name: tppalete_codtppalete_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tppalete_codtppalete_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tppalete_codtppalete_seq OWNER TO postgres;

--
-- TOC entry 7382 (class 0 OID 0)
-- Dependencies: 496
-- Name: tppalete_codtppalete_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tppalete_codtppalete_seq OWNED BY tppalete.codtppalete;


--
-- TOC entry 497 (class 1259 OID 11288985)
-- Name: tpprior; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpprior (
    codtpprior integer NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    nome character varying(50) NOT NULL,
    descr character varying(255),
    corfonte character(6) NOT NULL,
    corfundo character(6) NOT NULL,
    corsemaforo character(6) NOT NULL,
    prioridade integer DEFAULT 0 NOT NULL,
    ativo boolean DEFAULT true NOT NULL
);


ALTER TABLE tpprior OWNER TO postgres;

--
-- TOC entry 498 (class 1259 OID 11288991)
-- Name: tpveic; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpveic (
    codtpveic integer DEFAULT nextval('sq_codtpveic'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    nome character varying(50) NOT NULL,
    vol numeric(7,2) DEFAULT 0,
    peso numeric(7,2) DEFAULT 0,
    ativo boolean DEFAULT true NOT NULL,
    comprimento numeric(10,2) DEFAULT 0,
    largura numeric(10,2) DEFAULT 0,
    altura numeric(10,2) DEFAULT 0,
    eixos integer DEFAULT 0
);


ALTER TABLE tpveic OWNER TO postgres;

--
-- TOC entry 499 (class 1259 OID 11289003)
-- Name: tpveicoper; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE tpveicoper (
    codtpveicoper integer NOT NULL,
    dtahrincl timestamp with time zone NOT NULL,
    codusrincl integer NOT NULL,
    dtahralter timestamp with time zone,
    codusralter integer,
    codigoexterno character varying(20) NOT NULL,
    codtpoper integer NOT NULL,
    codtpcarga integer,
    codtpveic integer
);


ALTER TABLE tpveicoper OWNER TO postgres;

--
-- TOC entry 500 (class 1259 OID 11289006)
-- Name: tpveicoper_codtpveicoper_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tpveicoper_codtpveicoper_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tpveicoper_codtpveicoper_seq OWNER TO postgres;

--
-- TOC entry 7383 (class 0 OID 0)
-- Dependencies: 500
-- Name: tpveicoper_codtpveicoper_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tpveicoper_codtpveicoper_seq OWNED BY tpveicoper.codtpveicoper;


--
-- TOC entry 501 (class 1259 OID 11289008)
-- Name: traducao; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE traducao (
    codpalavra integer NOT NULL,
    codidioma integer NOT NULL,
    valor text
);


ALTER TABLE traducao OWNER TO postgres;

--
-- TOC entry 502 (class 1259 OID 11289014)
-- Name: usr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usr (
    codusr integer DEFAULT nextval('sq_codusr'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    codemp integer,
    nome character varying(50) NOT NULL,
    email character varying(255),
    avatar bytea,
    nomeacesso character varying(20),
    senhaacesso character varying(32) NOT NULL,
    senhaacessoant character varying(20),
    ativo boolean DEFAULT true NOT NULL,
    editavel boolean DEFAULT true NOT NULL,
    integrador boolean DEFAULT false NOT NULL,
    alterar_senha boolean DEFAULT true,
    dtahrexpirasenha timestamp with time zone,
    qtdetentativas integer DEFAULT 0,
    bloqueado boolean DEFAULT false,
    dtahrbloqueiasenha timestamp with time zone
);


ALTER TABLE usr OWNER TO postgres;

--
-- TOC entry 503 (class 1259 OID 11289028)
-- Name: usrhistsenha; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usrhistsenha (
    codusrhistsenha integer NOT NULL,
    codusr integer NOT NULL,
    dtahrincl timestamp with time zone,
    senha character varying(32)
);


ALTER TABLE usrhistsenha OWNER TO postgres;

--
-- TOC entry 504 (class 1259 OID 11289031)
-- Name: usrhistsenha_codusrhistsenha_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE usrhistsenha_codusrhistsenha_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE usrhistsenha_codusrhistsenha_seq OWNER TO postgres;

--
-- TOC entry 7384 (class 0 OID 0)
-- Dependencies: 504
-- Name: usrhistsenha_codusrhistsenha_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE usrhistsenha_codusrhistsenha_seq OWNED BY usrhistsenha.codusrhistsenha;


--
-- TOC entry 505 (class 1259 OID 11289033)
-- Name: usrperfil; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE usrperfil (
    codusr integer NOT NULL,
    codidioma integer,
    wallpaper character varying(200),
    foto character varying(200),
    atalhos text,
    janelas text,
    colunas text,
    config text DEFAULT '{"auto_hide_menu":false}'::text
);


ALTER TABLE usrperfil OWNER TO postgres;

--
-- TOC entry 506 (class 1259 OID 11289040)
-- Name: veic; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE veic (
    codveic integer DEFAULT nextval('sq_codveic'::regclass) NOT NULL,
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now(),
    codusralter integer,
    dtahralter timestamp with time zone,
    id character varying(30) NOT NULL,
    cor character varying(20),
    modelo character varying(20),
    codtpveic integer,
    codtecrastr integer,
    idequiprastr character varying(25),
    ultpos_long numeric(15,13),
    ultpos_lat numeric(15,13),
    ultpos_dtahr timestamp with time zone,
    ultpos_descr character varying(255),
    ativo boolean DEFAULT true NOT NULL,
    codcargafluxo integer,
    uf character(2)
);


ALTER TABLE veic OWNER TO postgres;

--
-- TOC entry 507 (class 1259 OID 11289046)
-- Name: veicemp; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE veicemp (
    codveic integer NOT NULL,
    codemp integer NOT NULL
);


ALTER TABLE veicemp OWNER TO postgres;

--
-- TOC entry 548 (class 1259 OID 17891124)
-- Name: vevento; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE vevento (
    codtpeventoembarque integer,
    codtpevento integer,
    codemp integer,
    ordem integer,
    nome character varying(200),
    proxcodstatembarque integer,
    proxcodstatcarga integer
);


ALTER TABLE vevento OWNER TO postgres;

--
-- TOC entry 508 (class 1259 OID 11289049)
-- Name: vincequiprastr; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE vincequiprastr (
    codusrincl integer NOT NULL,
    dtahrincl timestamp with time zone DEFAULT now() NOT NULL,
    codtecrastr integer NOT NULL,
    idequiprastr character varying(25) NOT NULL,
    eh_rastrmovel boolean DEFAULT false NOT NULL,
    codtpentidade integer NOT NULL,
    codentidade integer NOT NULL,
    status character(1) DEFAULT 'I'::bpchar NOT NULL,
    dtahrstatus timestamp with time zone DEFAULT now() NOT NULL,
    dtahrdesat timestamp with time zone,
    CONSTRAINT vincequiprastr_status_check CHECK ((status = ANY (ARRAY['I'::bpchar, 'A'::bpchar, 'D'::bpchar, 'E'::bpchar])))
);


ALTER TABLE vincequiprastr OWNER TO postgres;

SET search_path = alteracoes, pg_catalog;

--
-- TOC entry 5732 (class 2604 OID 11296139)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150608_0614_w24 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5737 (class 2604 OID 11581639)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150615_0621_w25 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5755 (class 2604 OID 12237383)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150622_0628_w26 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5767 (class 2604 OID 12714418)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150629_0705_w27 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5769 (class 2604 OID 13399682)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150706_0712_w28 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5771 (class 2604 OID 13978976)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150713_0719_w29 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5773 (class 2604 OID 14535459)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150720_0726_w30 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5775 (class 2604 OID 15058258)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150727_0802_w31 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5805 (class 2604 OID 16896123)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150803_0809_w32 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5819 (class 2604 OID 17311073)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150810_0816_w33 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5828 (class 2604 OID 17740749)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150817_0823_w34 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5833 (class 2604 OID 18083245)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150824_0830_w35 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5876 (class 2604 OID 18472036)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150831_0906_w36 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5891 (class 2604 OID 18802859)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150907_0913_w37 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5896 (class 2604 OID 19119599)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150914_0920_w38 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5905 (class 2604 OID 19643901)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150921_0927_w39 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5936 (class 2604 OID 19960891)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20150928_1004_w40 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5938 (class 2604 OID 20403702)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20151005_1011_w41 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5947 (class 2604 OID 20821954)
-- Name: codlog; Type: DEFAULT; Schema: alteracoes; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes_20151012_1018_w42 ALTER COLUMN codlog SET DEFAULT nextval('public.log_alteracoes_codlog_seq'::regclass);


SET search_path = dashboard, pg_catalog;

--
-- TOC entry 5241 (class 2604 OID 11289448)
-- Name: codagendadashboard; Type: DEFAULT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY agendadashboard ALTER COLUMN codagendadashboard SET DEFAULT nextval('agendadashboard_codagendadashboard_seq'::regclass);


--
-- TOC entry 5242 (class 2604 OID 11289449)
-- Name: codagendalayout; Type: DEFAULT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY agendalayout ALTER COLUMN codagendalayout SET DEFAULT nextval('agendalayout_codagendalayout_seq'::regclass);


--
-- TOC entry 5243 (class 2604 OID 11289450)
-- Name: codfontedados; Type: DEFAULT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY fontedados ALTER COLUMN codfontedados SET DEFAULT nextval('fontedados_codfontedados_seq'::regclass);


--
-- TOC entry 5245 (class 2604 OID 11289451)
-- Name: codfontedadosparam; Type: DEFAULT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY fontedadosparam ALTER COLUMN codfontedadosparam SET DEFAULT nextval('fontedadosparam_codfontedadosparam_seq'::regclass);


--
-- TOC entry 5246 (class 2604 OID 11289452)
-- Name: codlayoutdashboard; Type: DEFAULT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY layoutdashboard ALTER COLUMN codlayoutdashboard SET DEFAULT nextval('layoutdashboard_codlayoutdashboard_seq'::regclass);


SET search_path = integracao, pg_catalog;

--
-- TOC entry 5748 (class 2604 OID 11600988)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150615_0621_25 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5749 (class 2604 OID 11600989)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150615_0621_25 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5750 (class 2604 OID 11600990)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150615_0621_25 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5751 (class 2604 OID 11600991)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150615_0621_25 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5752 (class 2604 OID 11600992)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150615_0621_25 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5753 (class 2604 OID 11600993)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150615_0621_25 ALTER COLUMN tentativas SET DEFAULT 0;


--
-- TOC entry 5760 (class 2604 OID 12714100)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150629_0705_27 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5761 (class 2604 OID 12714101)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150629_0705_27 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5762 (class 2604 OID 12714102)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150629_0705_27 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5763 (class 2604 OID 12714103)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150629_0705_27 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5764 (class 2604 OID 12714104)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150629_0705_27 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5765 (class 2604 OID 12714105)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150629_0705_27 ALTER COLUMN tentativas SET DEFAULT 0;


--
-- TOC entry 5807 (class 2604 OID 16918242)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150803_0809_32 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5808 (class 2604 OID 16918243)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150803_0809_32 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5809 (class 2604 OID 16918244)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150803_0809_32 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5810 (class 2604 OID 16918245)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150803_0809_32 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5811 (class 2604 OID 16918246)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150803_0809_32 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5812 (class 2604 OID 16918247)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150803_0809_32 ALTER COLUMN tentativas SET DEFAULT 0;


--
-- TOC entry 5821 (class 2604 OID 17311084)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150810_0816_33 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5822 (class 2604 OID 17311085)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150810_0816_33 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5823 (class 2604 OID 17311086)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150810_0816_33 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5824 (class 2604 OID 17311087)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150810_0816_33 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5825 (class 2604 OID 17311088)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150810_0816_33 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5826 (class 2604 OID 17311089)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150810_0816_33 ALTER COLUMN tentativas SET DEFAULT 0;


--
-- TOC entry 5884 (class 2604 OID 18802284)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150907_0913_37 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5885 (class 2604 OID 18802285)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150907_0913_37 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5886 (class 2604 OID 18802286)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150907_0913_37 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5887 (class 2604 OID 18802287)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150907_0913_37 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5888 (class 2604 OID 18802288)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150907_0913_37 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5889 (class 2604 OID 18802289)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150907_0913_37 ALTER COLUMN tentativas SET DEFAULT 0;


--
-- TOC entry 5898 (class 2604 OID 19196536)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150914_0920_38 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5899 (class 2604 OID 19196537)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150914_0920_38 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5900 (class 2604 OID 19196538)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150914_0920_38 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5901 (class 2604 OID 19196539)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150914_0920_38 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5902 (class 2604 OID 19196540)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150914_0920_38 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5903 (class 2604 OID 19196541)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20150914_0920_38 ALTER COLUMN tentativas SET DEFAULT 0;


--
-- TOC entry 5940 (class 2604 OID 20555623)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151005_1011_41 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5941 (class 2604 OID 20555624)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151005_1011_41 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5942 (class 2604 OID 20555625)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151005_1011_41 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5943 (class 2604 OID 20555626)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151005_1011_41 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5944 (class 2604 OID 20555627)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151005_1011_41 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5945 (class 2604 OID 20555628)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151005_1011_41 ALTER COLUMN tentativas SET DEFAULT 0;


--
-- TOC entry 5949 (class 2604 OID 20839053)
-- Name: codregistro; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151012_1018_42 ALTER COLUMN codregistro SET DEFAULT nextval('public.dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5950 (class 2604 OID 20839054)
-- Name: dtahrincl; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151012_1018_42 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5951 (class 2604 OID 20839055)
-- Name: mensagem; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151012_1018_42 ALTER COLUMN mensagem SET DEFAULT '{}'::text;


--
-- TOC entry 5952 (class 2604 OID 20839056)
-- Name: status_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151012_1018_42 ALTER COLUMN status_retorno SET DEFAULT false;


--
-- TOC entry 5953 (class 2604 OID 20839057)
-- Name: texto_retorno; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151012_1018_42 ALTER COLUMN texto_retorno SET DEFAULT ''::text;


--
-- TOC entry 5954 (class 2604 OID 20839058)
-- Name: tentativas; Type: DEFAULT; Schema: integracao; Owner: postgres
--

ALTER TABLE ONLY dados_integracao_20151012_1018_42 ALTER COLUMN tentativas SET DEFAULT 0;


SET search_path = public, pg_catalog;

--
-- TOC entry 5249 (class 2604 OID 11289453)
-- Name: codacao; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY acao ALTER COLUMN codacao SET DEFAULT nextval('acao_codacao_seq'::regclass);


--
-- TOC entry 5251 (class 2604 OID 11289454)
-- Name: codagenda; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agenda ALTER COLUMN codagenda SET DEFAULT nextval('agenda_codagenda_seq'::regclass);


--
-- TOC entry 5816 (class 2604 OID 17019108)
-- Name: codagendadescarga; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga ALTER COLUMN codagendadescarga SET DEFAULT nextval('agendadescarga_codagendadescarga_seq'::regclass);


--
-- TOC entry 5252 (class 2604 OID 11289455)
-- Name: codagendahr; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendahr ALTER COLUMN codagendahr SET DEFAULT nextval('agendahr_codagendahr_seq'::regclass);


--
-- TOC entry 5254 (class 2604 OID 11289456)
-- Name: codagendamento; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendamento ALTER COLUMN codagendamento SET DEFAULT nextval('agendamento_codagendamento_seq'::regclass);


--
-- TOC entry 5256 (class 2604 OID 11289457)
-- Name: codajuda; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ajuda ALTER COLUMN codajuda SET DEFAULT nextval('ajuda_codajuda_seq'::regclass);


--
-- TOC entry 5259 (class 2604 OID 11289461)
-- Name: codbid; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid ALTER COLUMN codbid SET DEFAULT nextval('bid_codbid_seq'::regclass);


--
-- TOC entry 5878 (class 2604 OID 18487606)
-- Name: qtdofertado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201509 ALTER COLUMN qtdofertado SET DEFAULT 0;


--
-- TOC entry 5879 (class 2604 OID 18487607)
-- Name: qtdrecusado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201509 ALTER COLUMN qtdrecusado SET DEFAULT 0;


--
-- TOC entry 5880 (class 2604 OID 18487608)
-- Name: qtdrealizado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201509 ALTER COLUMN qtdrealizado SET DEFAULT 0;


--
-- TOC entry 5881 (class 2604 OID 18487609)
-- Name: ofertas; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201509 ALTER COLUMN ofertas SET DEFAULT '{}'::integer[];


--
-- TOC entry 5882 (class 2604 OID 18487610)
-- Name: embarques; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201509 ALTER COLUMN embarques SET DEFAULT '{}'::integer[];


--
-- TOC entry 5956 (class 2604 OID 20879589)
-- Name: qtdofertado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201510 ALTER COLUMN qtdofertado SET DEFAULT 0;


--
-- TOC entry 5957 (class 2604 OID 20879590)
-- Name: qtdrecusado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201510 ALTER COLUMN qtdrecusado SET DEFAULT 0;


--
-- TOC entry 5958 (class 2604 OID 20879591)
-- Name: qtdrealizado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201510 ALTER COLUMN qtdrealizado SET DEFAULT 0;


--
-- TOC entry 5959 (class 2604 OID 20879592)
-- Name: ofertas; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201510 ALTER COLUMN ofertas SET DEFAULT '{}'::integer[];


--
-- TOC entry 5960 (class 2604 OID 20879593)
-- Name: embarques; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_hist_201510 ALTER COLUMN embarques SET DEFAULT '{}'::integer[];


--
-- TOC entry 5867 (class 2604 OID 18217584)
-- Name: codbidregiao; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_regiao ALTER COLUMN codbidregiao SET DEFAULT nextval('bid_regiao_codbidregiao_seq'::regclass);


--
-- TOC entry 5266 (class 2604 OID 11289532)
-- Name: codbidspot; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_spot ALTER COLUMN codbidspot SET DEFAULT nextval('bid_spot_codbidspot_seq'::regclass);


--
-- TOC entry 5278 (class 2604 OID 11289533)
-- Name: codbidtransp; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_transp ALTER COLUMN codbidtransp SET DEFAULT nextval('bid_transp_codbidtransp_seq'::regclass);


--
-- TOC entry 5288 (class 2604 OID 11289534)
-- Name: codcargafluxo; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxo ALTER COLUMN codcargafluxo SET DEFAULT nextval('cargafluxo_codcargafluxo_seq'::regclass);


--
-- TOC entry 5289 (class 2604 OID 11289535)
-- Name: codcargafluxoemp; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxoemp ALTER COLUMN codcargafluxoemp SET DEFAULT nextval('cargafluxoemp_codcargafluxoemp_seq'::regclass);


--
-- TOC entry 5292 (class 2604 OID 11289536)
-- Name: codcargafluxoveic; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxoveic ALTER COLUMN codcargafluxoveic SET DEFAULT nextval('cargafluxoveic_codcargafluxoveic_seq'::regclass);


--
-- TOC entry 5300 (class 2604 OID 11289537)
-- Name: codcargagrupo; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargagrupo ALTER COLUMN codcargagrupo SET DEFAULT nextval('cargagrupo_codcargagrupo_seq'::regclass);


--
-- TOC entry 5313 (class 2604 OID 11289538)
-- Name: codconta; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY conta ALTER COLUMN codconta SET DEFAULT nextval('conta_codconta_seq'::regclass);


--
-- TOC entry 5317 (class 2604 OID 11289539)
-- Name: codcontato; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contato ALTER COLUMN codcontato SET DEFAULT nextval('contato_codcontato_seq'::regclass);


--
-- TOC entry 5742 (class 2604 OID 11596995)
-- Name: codregistro; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dados_integracao ALTER COLUMN codregistro SET DEFAULT nextval('dados_integracao_codregistro_seq'::regclass);


--
-- TOC entry 5319 (class 2604 OID 11289540)
-- Name: codemailregra; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY emailregra ALTER COLUMN codemailregra SET DEFAULT nextval('emailregra_codemailregra_seq'::regclass);


--
-- TOC entry 5795 (class 2604 OID 15153970)
-- Name: codempcfgjanela; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empcfgjanela ALTER COLUMN codempcfgjanela SET DEFAULT nextval('empcfgjanela_codempcfgjanela_seq'::regclass);


--
-- TOC entry 5777 (class 2604 OID 15134408)
-- Name: codempcfgturno; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empcfgturno ALTER COLUMN codempcfgturno SET DEFAULT nextval('empcfgturno_codempcfgturno_seq'::regclass);


--
-- TOC entry 5427 (class 2604 OID 11289541)
-- Name: codempendereco; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empendereco ALTER COLUMN codempendereco SET DEFAULT nextval('empendereco_codempendereco_seq'::regclass);


--
-- TOC entry 5433 (class 2604 OID 11289542)
-- Name: codempjanela; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela ALTER COLUMN codempjanela SET DEFAULT nextval('empjanela_codempjanela_seq'::regclass);


--
-- TOC entry 5786 (class 2604 OID 15147083)
-- Name: codempjanela; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201507 ALTER COLUMN codempjanela SET DEFAULT nextval('empjanela_codempjanela_seq'::regclass);


--
-- TOC entry 5787 (class 2604 OID 15147084)
-- Name: limitegrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201507 ALTER COLUMN limitegrupos SET DEFAULT 0;


--
-- TOC entry 5788 (class 2604 OID 15147085)
-- Name: cargas; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201507 ALTER COLUMN cargas SET DEFAULT '{}'::bigint[];


--
-- TOC entry 5789 (class 2604 OID 15147086)
-- Name: totpesoreal; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201507 ALTER COLUMN totpesoreal SET DEFAULT 0;


--
-- TOC entry 5790 (class 2604 OID 15147087)
-- Name: totpesocalc; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201507 ALTER COLUMN totpesocalc SET DEFAULT 0;


--
-- TOC entry 5791 (class 2604 OID 15147088)
-- Name: totgrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201507 ALTER COLUMN totgrupos SET DEFAULT 0;


--
-- TOC entry 5779 (class 2604 OID 15147066)
-- Name: codempjanela; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201508 ALTER COLUMN codempjanela SET DEFAULT nextval('empjanela_codempjanela_seq'::regclass);


--
-- TOC entry 5780 (class 2604 OID 15147067)
-- Name: limitegrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201508 ALTER COLUMN limitegrupos SET DEFAULT 0;


--
-- TOC entry 5781 (class 2604 OID 15147068)
-- Name: cargas; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201508 ALTER COLUMN cargas SET DEFAULT '{}'::bigint[];


--
-- TOC entry 5782 (class 2604 OID 15147069)
-- Name: totpesoreal; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201508 ALTER COLUMN totpesoreal SET DEFAULT 0;


--
-- TOC entry 5783 (class 2604 OID 15147070)
-- Name: totpesocalc; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201508 ALTER COLUMN totpesocalc SET DEFAULT 0;


--
-- TOC entry 5784 (class 2604 OID 15147071)
-- Name: totgrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201508 ALTER COLUMN totgrupos SET DEFAULT 0;


--
-- TOC entry 5835 (class 2604 OID 18154786)
-- Name: codempjanela; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201509 ALTER COLUMN codempjanela SET DEFAULT nextval('empjanela_codempjanela_seq'::regclass);


--
-- TOC entry 5836 (class 2604 OID 18154787)
-- Name: limitegrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201509 ALTER COLUMN limitegrupos SET DEFAULT 0;


--
-- TOC entry 5837 (class 2604 OID 18154788)
-- Name: cargas; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201509 ALTER COLUMN cargas SET DEFAULT '{}'::bigint[];


--
-- TOC entry 5838 (class 2604 OID 18154789)
-- Name: totpesoreal; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201509 ALTER COLUMN totpesoreal SET DEFAULT 0;


--
-- TOC entry 5839 (class 2604 OID 18154790)
-- Name: totpesocalc; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201509 ALTER COLUMN totpesocalc SET DEFAULT 0;


--
-- TOC entry 5840 (class 2604 OID 18154791)
-- Name: totgrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201509 ALTER COLUMN totgrupos SET DEFAULT 0;


--
-- TOC entry 5869 (class 2604 OID 18341770)
-- Name: codempjanela; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201510 ALTER COLUMN codempjanela SET DEFAULT nextval('empjanela_codempjanela_seq'::regclass);


--
-- TOC entry 5870 (class 2604 OID 18341771)
-- Name: limitegrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201510 ALTER COLUMN limitegrupos SET DEFAULT 0;


--
-- TOC entry 5871 (class 2604 OID 18341772)
-- Name: cargas; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201510 ALTER COLUMN cargas SET DEFAULT '{}'::bigint[];


--
-- TOC entry 5872 (class 2604 OID 18341773)
-- Name: totpesoreal; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201510 ALTER COLUMN totpesoreal SET DEFAULT 0;


--
-- TOC entry 5873 (class 2604 OID 18341774)
-- Name: totpesocalc; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201510 ALTER COLUMN totpesocalc SET DEFAULT 0;


--
-- TOC entry 5874 (class 2604 OID 18341775)
-- Name: totgrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201510 ALTER COLUMN totgrupos SET DEFAULT 0;


--
-- TOC entry 5962 (class 2604 OID 20879703)
-- Name: codempjanela; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201511 ALTER COLUMN codempjanela SET DEFAULT nextval('empjanela_codempjanela_seq'::regclass);


--
-- TOC entry 5963 (class 2604 OID 20879704)
-- Name: limitegrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201511 ALTER COLUMN limitegrupos SET DEFAULT 0;


--
-- TOC entry 5964 (class 2604 OID 20879705)
-- Name: cargas; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201511 ALTER COLUMN cargas SET DEFAULT '{}'::bigint[];


--
-- TOC entry 5965 (class 2604 OID 20879706)
-- Name: totpesoreal; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201511 ALTER COLUMN totpesoreal SET DEFAULT 0;


--
-- TOC entry 5966 (class 2604 OID 20879707)
-- Name: totpesocalc; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201511 ALTER COLUMN totpesocalc SET DEFAULT 0;


--
-- TOC entry 5967 (class 2604 OID 20879708)
-- Name: totgrupos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanela_201511 ALTER COLUMN totgrupos SET DEFAULT 0;


--
-- TOC entry 5435 (class 2604 OID 11289723)
-- Name: codempjanelahist; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empjanelahist ALTER COLUMN codempjanelahist SET DEFAULT nextval('empjanelahist_codempjanelahist_seq'::regclass);


--
-- TOC entry 5446 (class 2604 OID 11289724)
-- Name: codexpediente; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expediente ALTER COLUMN codexpediente SET DEFAULT nextval('expediente_codexpediente_seq'::regclass);


--
-- TOC entry 5447 (class 2604 OID 11289725)
-- Name: codexpedientehorario; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY expedientehorario ALTER COLUMN codexpedientehorario SET DEFAULT nextval('expedientehorario_codexpedientehorario_seq'::regclass);


--
-- TOC entry 5452 (class 2604 OID 11289726)
-- Name: codfaq; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY faq ALTER COLUMN codfaq SET DEFAULT nextval('faq_codfaq_seq'::regclass);


--
-- TOC entry 5456 (class 2604 OID 11289727)
-- Name: codferiado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feriado ALTER COLUMN codferiado SET DEFAULT nextval('feriado_codferiado_seq'::regclass);


--
-- TOC entry 5467 (class 2604 OID 11289728)
-- Name: codgrpemp; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY grpemp ALTER COLUMN codgrpemp SET DEFAULT nextval('grpemp_codgrpemp_seq'::regclass);


--
-- TOC entry 5473 (class 2604 OID 11289729)
-- Name: codhistcompl; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histcompl ALTER COLUMN codhistcompl SET DEFAULT nextval('histcompl_codhistcompl_seq'::regclass);


--
-- TOC entry 5476 (class 2604 OID 11289730)
-- Name: codhistemppos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histemppos ALTER COLUMN codhistemppos SET DEFAULT nextval('histemppos_codhistemppos_seq'::regclass);


--
-- TOC entry 5477 (class 2604 OID 11289731)
-- Name: codhistmotivoembcarga; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histmotivoembcarga ALTER COLUMN codhistmotivoembcarga SET DEFAULT nextval('histmotivoembcarga_codhistmotivoembcarga_seq'::regclass);


--
-- TOC entry 5814 (class 2604 OID 16964316)
-- Name: codhiststatagendadescarga; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histstatagendadescarga ALTER COLUMN codhiststatagendadescarga SET DEFAULT nextval('histstatagendadescarga_codhiststatagendadescarga_seq'::regclass);


--
-- TOC entry 5866 (class 2604 OID 18215206)
-- Name: codhiststatpedido; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histstatpedido ALTER COLUMN codhiststatpedido SET DEFAULT nextval('histstatpedido_codhiststatpedido_seq'::regclass);


--
-- TOC entry 5500 (class 2604 OID 11289732)
-- Name: codidioma; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY idioma ALTER COLUMN codidioma SET DEFAULT nextval('idioma_codidioma_seq'::regclass);


--
-- TOC entry 5504 (class 2604 OID 11289733)
-- Name: codciclo; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY kpiciclocircuito ALTER COLUMN codciclo SET DEFAULT nextval('kpiciclocircuito_codciclo_seq'::regclass);


--
-- TOC entry 5914 (class 2604 OID 19650881)
-- Name: codleilao; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao ALTER COLUMN codleilao SET DEFAULT nextval('leilao_codleilao_seq'::regclass);


--
-- TOC entry 5931 (class 2604 OID 19650989)
-- Name: codleilaoaprovacao; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaoaprovacao ALTER COLUMN codleilaoaprovacao SET DEFAULT nextval('leilaoaprovacao_codleilaoaprovacao_seq'::regclass);


--
-- TOC entry 5934 (class 2604 OID 19651023)
-- Name: codleilaofrete; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaofrete ALTER COLUMN codleilaofrete SET DEFAULT nextval('leilaofrete_codleilaofrete_seq'::regclass);


--
-- TOC entry 5926 (class 2604 OID 19650960)
-- Name: codleilaolance; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaolance ALTER COLUMN codleilaolance SET DEFAULT nextval('leilaolance_codleilaolance_seq'::regclass);


--
-- TOC entry 5932 (class 2604 OID 19651008)
-- Name: codleilaotpfrete; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaotpfrete ALTER COLUMN codleilaotpfrete SET DEFAULT nextval('leilaotpfrete_codleilaotpfrete_seq'::regclass);


--
-- TOC entry 5919 (class 2604 OID 19650929)
-- Name: codleilaotransp; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaotransp ALTER COLUMN codleilaotransp SET DEFAULT nextval('leilaotransp_codleilaotransp_seq'::regclass);


--
-- TOC entry 5240 (class 2604 OID 11289734)
-- Name: codlog; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY log_alteracoes ALTER COLUMN codlog SET DEFAULT nextval('log_alteracoes_codlog_seq'::regclass);


--
-- TOC entry 5522 (class 2604 OID 11289735)
-- Name: codmodulo; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY modulo ALTER COLUMN codmodulo SET DEFAULT nextval('modulo_codmodulo_seq'::regclass);


--
-- TOC entry 5547 (class 2604 OID 11289736)
-- Name: codpalavra; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY palavra ALTER COLUMN codpalavra SET DEFAULT nextval('palavra_codpalavra_seq'::regclass);


--
-- TOC entry 5856 (class 2604 OID 18161863)
-- Name: codpedido; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido ALTER COLUMN codpedido SET DEFAULT nextval('pedido_codpedido_seq'::regclass);


--
-- TOC entry 5734 (class 2604 OID 11453262)
-- Name: codpos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150608_0614_w24 ALTER COLUMN codpos SET DEFAULT nextval('sq_codpos'::regclass);


--
-- TOC entry 5735 (class 2604 OID 11453263)
-- Name: dtahrincl; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150608_0614_w24 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5739 (class 2604 OID 11583519)
-- Name: codpos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150615_0621_w25 ALTER COLUMN codpos SET DEFAULT nextval('sq_codpos'::regclass);


--
-- TOC entry 5740 (class 2604 OID 11583520)
-- Name: dtahrincl; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150615_0621_w25 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5757 (class 2604 OID 12524286)
-- Name: codpos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150622_0628_w26 ALTER COLUMN codpos SET DEFAULT nextval('sq_codpos'::regclass);


--
-- TOC entry 5758 (class 2604 OID 12524287)
-- Name: dtahrincl; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150622_0628_w26 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5830 (class 2604 OID 17997724)
-- Name: codpos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150817_0823_w34 ALTER COLUMN codpos SET DEFAULT nextval('sq_codpos'::regclass);


--
-- TOC entry 5831 (class 2604 OID 17997725)
-- Name: dtahrincl; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150817_0823_w34 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5893 (class 2604 OID 18814010)
-- Name: codpos; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150907_0913_w37 ALTER COLUMN codpos SET DEFAULT nextval('sq_codpos'::regclass);


--
-- TOC entry 5894 (class 2604 OID 18814011)
-- Name: dtahrincl; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pos_20150907_0913_w37 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5793 (class 2604 OID 15153961)
-- Name: codproduto; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY produto ALTER COLUMN codproduto SET DEFAULT nextval('produto_codproduto_seq'::regclass);


--
-- TOC entry 5586 (class 2604 OID 11289753)
-- Name: codrelatorio; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY relatorio ALTER COLUMN codrelatorio SET DEFAULT nextval('relatorio_codrelatorio_seq'::regclass);


--
-- TOC entry 5798 (class 2604 OID 16894565)
-- Name: codstatagendadescarga; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY statagendadescarga ALTER COLUMN codstatagendadescarga SET DEFAULT nextval('statagendadescarga_codstatagendadescarga_seq'::regclass);


--
-- TOC entry 5907 (class 2604 OID 19650862)
-- Name: codstatleilao; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY statleilao ALTER COLUMN codstatleilao SET DEFAULT nextval('statleilao_codstatleilao_seq'::regclass);


--
-- TOC entry 5842 (class 2604 OID 18161837)
-- Name: codstatpedido; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY statpedido ALTER COLUMN codstatpedido SET DEFAULT nextval('statpedido_codstatpedido_seq'::regclass);


--
-- TOC entry 5640 (class 2604 OID 11289754)
-- Name: codtemp; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY temp_20140505_0511_w19 ALTER COLUMN codtemp SET DEFAULT nextval('sq_codtemp'::regclass);


--
-- TOC entry 5641 (class 2604 OID 11289755)
-- Name: dtahrincl; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY temp_20140505_0511_w19 ALTER COLUMN dtahrincl SET DEFAULT now();


--
-- TOC entry 5642 (class 2604 OID 11289756)
-- Name: sensor; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY temp_20140505_0511_w19 ALTER COLUMN sensor SET DEFAULT 1;


--
-- TOC entry 5671 (class 2604 OID 11289757)
-- Name: codtpevento; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpevento ALTER COLUMN codtpevento SET DEFAULT nextval('tpevento_codtpevento_seq'::regclass);


--
-- TOC entry 5673 (class 2604 OID 11289758)
-- Name: codtpeventocjto; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpeventocjto ALTER COLUMN codtpeventocjto SET DEFAULT nextval('tpeventocjto_codtpeventocjto_seq'::regclass);


--
-- TOC entry 5676 (class 2604 OID 11289759)
-- Name: codtpeventoembarque; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpeventoembarque ALTER COLUMN codtpeventoembarque SET DEFAULT nextval('tpeventoembarque_codtpeventoembarque_seq'::regclass);


--
-- TOC entry 5730 (class 2604 OID 11291985)
-- Name: codtpeventoemp; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpeventoemp ALTER COLUMN codtpeventoemp SET DEFAULT nextval('tpeventoemp_codtpeventoemp_seq'::regclass);


--
-- TOC entry 5677 (class 2604 OID 11289760)
-- Name: codtpferiado; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpferiado ALTER COLUMN codtpferiado SET DEFAULT nextval('tpferiado_codtpferiado_seq'::regclass);


--
-- TOC entry 5698 (class 2604 OID 11289761)
-- Name: codtppalete; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tppalete ALTER COLUMN codtppalete SET DEFAULT nextval('tppalete_codtppalete_seq'::regclass);


--
-- TOC entry 5711 (class 2604 OID 11289762)
-- Name: codtpveicoper; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpveicoper ALTER COLUMN codtpveicoper SET DEFAULT nextval('tpveicoper_codtpveicoper_seq'::regclass);


--
-- TOC entry 5720 (class 2604 OID 11289763)
-- Name: codusrhistsenha; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY usrhistsenha ALTER COLUMN codusrhistsenha SET DEFAULT nextval('usrhistsenha_codusrhistsenha_seq'::regclass);


SET search_path = alteracoes, pg_catalog;

--
-- TOC entry 6448 (class 2606 OID 11296146)
-- Name: log_alteracoes_20150608_0614_w24_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150608_0614_w24
    ADD CONSTRAINT log_alteracoes_20150608_0614_w24_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6454 (class 2606 OID 11581646)
-- Name: log_alteracoes_20150615_0621_w25_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150615_0621_w25
    ADD CONSTRAINT log_alteracoes_20150615_0621_w25_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6462 (class 2606 OID 12237390)
-- Name: log_alteracoes_20150622_0628_w26_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150622_0628_w26
    ADD CONSTRAINT log_alteracoes_20150622_0628_w26_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6468 (class 2606 OID 12714425)
-- Name: log_alteracoes_20150629_0705_w27_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150629_0705_w27
    ADD CONSTRAINT log_alteracoes_20150629_0705_w27_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6471 (class 2606 OID 13399689)
-- Name: log_alteracoes_20150706_0712_w28_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150706_0712_w28
    ADD CONSTRAINT log_alteracoes_20150706_0712_w28_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6474 (class 2606 OID 13978983)
-- Name: log_alteracoes_20150713_0719_w29_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150713_0719_w29
    ADD CONSTRAINT log_alteracoes_20150713_0719_w29_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6477 (class 2606 OID 14535466)
-- Name: log_alteracoes_20150720_0726_w30_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150720_0726_w30
    ADD CONSTRAINT log_alteracoes_20150720_0726_w30_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6480 (class 2606 OID 15058265)
-- Name: log_alteracoes_20150727_0802_w31_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150727_0802_w31
    ADD CONSTRAINT log_alteracoes_20150727_0802_w31_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6500 (class 2606 OID 16896130)
-- Name: log_alteracoes_20150803_0809_w32_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150803_0809_w32
    ADD CONSTRAINT log_alteracoes_20150803_0809_w32_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6507 (class 2606 OID 17311080)
-- Name: log_alteracoes_20150810_0816_w33_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150810_0816_w33
    ADD CONSTRAINT log_alteracoes_20150810_0816_w33_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6510 (class 2606 OID 17740756)
-- Name: log_alteracoes_20150817_0823_w34_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150817_0823_w34
    ADD CONSTRAINT log_alteracoes_20150817_0823_w34_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6516 (class 2606 OID 18083252)
-- Name: log_alteracoes_20150824_0830_w35_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150824_0830_w35
    ADD CONSTRAINT log_alteracoes_20150824_0830_w35_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6535 (class 2606 OID 18472043)
-- Name: log_alteracoes_20150831_0906_w36_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150831_0906_w36
    ADD CONSTRAINT log_alteracoes_20150831_0906_w36_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6542 (class 2606 OID 18802866)
-- Name: log_alteracoes_20150907_0913_w37_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150907_0913_w37
    ADD CONSTRAINT log_alteracoes_20150907_0913_w37_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6548 (class 2606 OID 19119606)
-- Name: log_alteracoes_20150914_0920_w38_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150914_0920_w38
    ADD CONSTRAINT log_alteracoes_20150914_0920_w38_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6551 (class 2606 OID 19643908)
-- Name: log_alteracoes_20150921_0927_w39_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150921_0927_w39
    ADD CONSTRAINT log_alteracoes_20150921_0927_w39_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6582 (class 2606 OID 19960898)
-- Name: log_alteracoes_20150928_1004_w40_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20150928_1004_w40
    ADD CONSTRAINT log_alteracoes_20150928_1004_w40_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6585 (class 2606 OID 20403709)
-- Name: log_alteracoes_20151005_1011_w41_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20151005_1011_w41
    ADD CONSTRAINT log_alteracoes_20151005_1011_w41_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6588 (class 2606 OID 20821961)
-- Name: log_alteracoes_20151012_1018_w42_pkey; Type: CONSTRAINT; Schema: alteracoes; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes_20151012_1018_w42
    ADD CONSTRAINT log_alteracoes_20151012_1018_w42_pkey PRIMARY KEY (codlog);


SET search_path = dashboard, pg_catalog;

--
-- TOC entry 6043 (class 2606 OID 11290419)
-- Name: agendadashboard_pkey; Type: CONSTRAINT; Schema: dashboard; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY agendadashboard
    ADD CONSTRAINT agendadashboard_pkey PRIMARY KEY (codagendadashboard);


--
-- TOC entry 6045 (class 2606 OID 11290421)
-- Name: agendalayout_pkey; Type: CONSTRAINT; Schema: dashboard; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY agendalayout
    ADD CONSTRAINT agendalayout_pkey PRIMARY KEY (codagendalayout);


--
-- TOC entry 6047 (class 2606 OID 11290423)
-- Name: fontedados_pkey; Type: CONSTRAINT; Schema: dashboard; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY fontedados
    ADD CONSTRAINT fontedados_pkey PRIMARY KEY (codfontedados);


--
-- TOC entry 6049 (class 2606 OID 11290425)
-- Name: fontedadosparam_pkey; Type: CONSTRAINT; Schema: dashboard; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY fontedadosparam
    ADD CONSTRAINT fontedadosparam_pkey PRIMARY KEY (codfontedadosparam);


--
-- TOC entry 6051 (class 2606 OID 11290427)
-- Name: layoutdashboard_pkey; Type: CONSTRAINT; Schema: dashboard; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY layoutdashboard
    ADD CONSTRAINT layoutdashboard_pkey PRIMARY KEY (codlayoutdashboard);


SET search_path = public, pg_catalog;

--
-- TOC entry 6053 (class 2606 OID 11290429)
-- Name: acao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY acao
    ADD CONSTRAINT acao_pkey PRIMARY KEY (codacao);


--
-- TOC entry 6055 (class 2606 OID 11290431)
-- Name: agenda_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY agenda
    ADD CONSTRAINT agenda_pkey PRIMARY KEY (codagenda);


--
-- TOC entry 6504 (class 2606 OID 17020352)
-- Name: agendadescarga_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT agendadescarga_pkey PRIMARY KEY (codagendadescarga);


--
-- TOC entry 6062 (class 2606 OID 11290433)
-- Name: agendahr_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY agendahr
    ADD CONSTRAINT agendahr_pkey PRIMARY KEY (codagendahr);


--
-- TOC entry 6064 (class 2606 OID 11290435)
-- Name: agendamento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY agendamento
    ADD CONSTRAINT agendamento_pkey PRIMARY KEY (codagendamento);


--
-- TOC entry 6078 (class 2606 OID 11290437)
-- Name: ajuda_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ajuda
    ADD CONSTRAINT ajuda_pkey PRIMARY KEY (codajuda);


--
-- TOC entry 6080 (class 2606 OID 11290439)
-- Name: bid_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY bid
    ADD CONSTRAINT bid_pkey PRIMARY KEY (codbid);


--
-- TOC entry 6528 (class 2606 OID 18217590)
-- Name: bid_regiao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY bid_regiao
    ADD CONSTRAINT bid_regiao_pkey PRIMARY KEY (codbidregiao);


--
-- TOC entry 6090 (class 2606 OID 11290441)
-- Name: bid_spot_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY bid_spot
    ADD CONSTRAINT bid_spot_pkey PRIMARY KEY (codbidspot);


--
-- TOC entry 6099 (class 2606 OID 11290443)
-- Name: bid_transp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY bid_transp
    ADD CONSTRAINT bid_transp_pkey PRIMARY KEY (codbidtransp);


--
-- TOC entry 6103 (class 2606 OID 11290445)
-- Name: cargaautooferta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargaautooferta
    ADD CONSTRAINT cargaautooferta_pkey PRIMARY KEY (codcarga);


--
-- TOC entry 6109 (class 2606 OID 11290447)
-- Name: cargafluxo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargafluxo
    ADD CONSTRAINT cargafluxo_pkey PRIMARY KEY (codcargafluxo);


--
-- TOC entry 6115 (class 2606 OID 11290449)
-- Name: cargafluxoemp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargafluxoemp
    ADD CONSTRAINT cargafluxoemp_pkey PRIMARY KEY (codcargafluxoemp);


--
-- TOC entry 6117 (class 2606 OID 11290451)
-- Name: cargafluxoveic_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargafluxoveic
    ADD CONSTRAINT cargafluxoveic_pkey PRIMARY KEY (codcargafluxoveic);


--
-- TOC entry 6119 (class 2606 OID 11290453)
-- Name: cargagrupo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cargagrupo
    ADD CONSTRAINT cargagrupo_pkey PRIMARY KEY (codcargagrupo);


--
-- TOC entry 6133 (class 2606 OID 11290455)
-- Name: conta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY conta
    ADD CONSTRAINT conta_pkey PRIMARY KEY (codconta);


--
-- TOC entry 6459 (class 2606 OID 11597005)
-- Name: dados_integracao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY dados_integracao
    ADD CONSTRAINT dados_integracao_pkey PRIMARY KEY (codregistro);


--
-- TOC entry 6137 (class 2606 OID 11290457)
-- Name: emailregra_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY emailregra
    ADD CONSTRAINT emailregra_pkey PRIMARY KEY (codemailregra);


--
-- TOC entry 6482 (class 2606 OID 15134411)
-- Name: empcfgturno_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY empcfgturno
    ADD CONSTRAINT empcfgturno_pkey PRIMARY KEY (codempcfgturno);


--
-- TOC entry 6182 (class 2606 OID 11290459)
-- Name: empendereco_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY empendereco
    ADD CONSTRAINT empendereco_pkey PRIMARY KEY (codempendereco);


--
-- TOC entry 6187 (class 2606 OID 11290461)
-- Name: empjanela_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY empjanela
    ADD CONSTRAINT empjanela_pkey PRIMARY KEY (codempjanela);


--
-- TOC entry 6192 (class 2606 OID 11290463)
-- Name: empjanelahist_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY empjanelahist
    ADD CONSTRAINT empjanelahist_pkey PRIMARY KEY (codempjanelahist);


--
-- TOC entry 6194 (class 2606 OID 11290465)
-- Name: empjanelapeso_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY empjanelapeso
    ADD CONSTRAINT empjanelapeso_pkey PRIMARY KEY (codempendereco, codtpoper);


--
-- TOC entry 6199 (class 2606 OID 11290467)
-- Name: expediente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expediente
    ADD CONSTRAINT expediente_pkey PRIMARY KEY (codexpediente);


--
-- TOC entry 6201 (class 2606 OID 11290469)
-- Name: expedientehorario_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY expedientehorario
    ADD CONSTRAINT expedientehorario_pkey PRIMARY KEY (codexpedientehorario);


--
-- TOC entry 6205 (class 2606 OID 11290471)
-- Name: faq_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY faq
    ADD CONSTRAINT faq_pkey PRIMARY KEY (codfaq);


--
-- TOC entry 6207 (class 2606 OID 11290473)
-- Name: feriado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY feriado
    ADD CONSTRAINT feriado_pkey PRIMARY KEY (codferiado);


--
-- TOC entry 6211 (class 2606 OID 11290475)
-- Name: geometry_columns_pk; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY geometry_columns
    ADD CONSTRAINT geometry_columns_pk PRIMARY KEY (f_table_catalog, f_table_schema, f_table_name, f_geometry_column);


--
-- TOC entry 6223 (class 2606 OID 11290477)
-- Name: histcompl_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histcompl
    ADD CONSTRAINT histcompl_pkey PRIMARY KEY (codhistcompl);


--
-- TOC entry 6229 (class 2606 OID 11290479)
-- Name: histempjanelapeso_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histempjanelapeso
    ADD CONSTRAINT histempjanelapeso_pkey PRIMARY KEY (codempendereco, codtpoper, codempjanelahist);


--
-- TOC entry 6231 (class 2606 OID 11290481)
-- Name: histemppos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histemppos
    ADD CONSTRAINT histemppos_pkey PRIMARY KEY (codhistemppos);


--
-- TOC entry 6233 (class 2606 OID 11290483)
-- Name: histmotivoembcarga_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histmotivoembcarga
    ADD CONSTRAINT histmotivoembcarga_pkey PRIMARY KEY (codhistmotivoembcarga);


--
-- TOC entry 6526 (class 2606 OID 18215208)
-- Name: histstatpedido_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histstatpedido
    ADD CONSTRAINT histstatpedido_pkey PRIMARY KEY (codhiststatpedido);


--
-- TOC entry 6251 (class 2606 OID 11290485)
-- Name: idioma_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY idioma
    ADD CONSTRAINT idioma_pkey PRIMARY KEY (codidioma);


--
-- TOC entry 6257 (class 2606 OID 11290487)
-- Name: kpiciclocircuito_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY kpiciclocircuito
    ADD CONSTRAINT kpiciclocircuito_pkey PRIMARY KEY (codciclo);


--
-- TOC entry 6560 (class 2606 OID 19650889)
-- Name: leilao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_pkey PRIMARY KEY (codleilao);


--
-- TOC entry 6572 (class 2606 OID 19650991)
-- Name: leilaoaprovacao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY leilaoaprovacao
    ADD CONSTRAINT leilaoaprovacao_pkey PRIMARY KEY (codleilaoaprovacao);


--
-- TOC entry 6579 (class 2606 OID 19651026)
-- Name: leilaofrete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY leilaofrete
    ADD CONSTRAINT leilaofrete_pkey PRIMARY KEY (codleilaofrete);


--
-- TOC entry 6569 (class 2606 OID 19650966)
-- Name: leilaolance_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY leilaolance
    ADD CONSTRAINT leilaolance_pkey PRIMARY KEY (codleilaolance);


--
-- TOC entry 6574 (class 2606 OID 19651011)
-- Name: leilaotpfrete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY leilaotpfrete
    ADD CONSTRAINT leilaotpfrete_pkey PRIMARY KEY (codleilaotpfrete);


--
-- TOC entry 6565 (class 2606 OID 19650936)
-- Name: leilaotransp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY leilaotransp
    ADD CONSTRAINT leilaotransp_pkey PRIMARY KEY (codleilaotransp);


--
-- TOC entry 6041 (class 2606 OID 11290489)
-- Name: log_alteracoes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY log_alteracoes
    ADD CONSTRAINT log_alteracoes_pkey PRIMARY KEY (codlog);


--
-- TOC entry 6264 (class 2606 OID 11290494)
-- Name: modulo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY modulo
    ADD CONSTRAINT modulo_pkey PRIMARY KEY (codmodulo);


--
-- TOC entry 6266 (class 2606 OID 11290496)
-- Name: moduloacao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY moduloacao
    ADD CONSTRAINT moduloacao_pkey PRIMARY KEY (codacao, codmodulo);


--
-- TOC entry 6275 (class 2606 OID 11290498)
-- Name: motemp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY motemp
    ADD CONSTRAINT motemp_pkey PRIMARY KEY (codmot, codemp);


--
-- TOC entry 6293 (class 2606 OID 11290500)
-- Name: painelcontrole_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY painelcontrole
    ADD CONSTRAINT painelcontrole_pkey PRIMARY KEY (codemptra, codempembar, codstatcarga, codsitcarga);


--
-- TOC entry 6301 (class 2606 OID 11290502)
-- Name: palavra_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY palavra
    ADD CONSTRAINT palavra_pkey PRIMARY KEY (codpalavra);


--
-- TOC entry 6524 (class 2606 OID 18161876)
-- Name: pedido_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_pkey PRIMARY KEY (codpedido);


--
-- TOC entry 6038 (class 2606 OID 11290504)
-- Name: pk_carga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT pk_carga PRIMARY KEY (codcarga);


--
-- TOC entry 6122 (class 2606 OID 11290506)
-- Name: pk_carreta; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY carreta
    ADD CONSTRAINT pk_carreta PRIMARY KEY (codcarreta);


--
-- TOC entry 6125 (class 2606 OID 11290508)
-- Name: pk_cfgdash; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY cfgdash
    ADD CONSTRAINT pk_cfgdash PRIMARY KEY (codcfgdash);


--
-- TOC entry 6128 (class 2606 OID 11290510)
-- Name: pk_ciduf; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ciduf
    ADD CONSTRAINT pk_ciduf PRIMARY KEY (codciduf);


--
-- TOC entry 6131 (class 2606 OID 11290512)
-- Name: pk_config; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY config
    ADD CONSTRAINT pk_config PRIMARY KEY (nome);


--
-- TOC entry 6135 (class 2606 OID 11290514)
-- Name: pk_contato; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY contato
    ADD CONSTRAINT pk_contato PRIMARY KEY (codcontato);


--
-- TOC entry 6139 (class 2606 OID 11290516)
-- Name: pk_emailtosend; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY emailtosend
    ADD CONSTRAINT pk_emailtosend PRIMARY KEY (codemailtosend);


--
-- TOC entry 6151 (class 2606 OID 11290518)
-- Name: pk_embarque; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT pk_embarque PRIMARY KEY (codembarque);


--
-- TOC entry 6162 (class 2606 OID 11290520)
-- Name: pk_embarquecarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embarquecarga
    ADD CONSTRAINT pk_embarquecarga PRIMARY KEY (codembarquecarga);


--
-- TOC entry 6165 (class 2606 OID 11290522)
-- Name: pk_embarquecarreta; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embarquecarreta
    ADD CONSTRAINT pk_embarquecarreta PRIMARY KEY (codembarquecarreta);


--
-- TOC entry 6168 (class 2606 OID 11290524)
-- Name: pk_embartransp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY embartransp
    ADD CONSTRAINT pk_embartransp PRIMARY KEY (codembartransp);


--
-- TOC entry 6179 (class 2606 OID 11290526)
-- Name: pk_emp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY emp
    ADD CONSTRAINT pk_emp PRIMARY KEY (codemp);


--
-- TOC entry 6494 (class 2606 OID 15153975)
-- Name: pk_empcfgjanela; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY empcfgjanela
    ADD CONSTRAINT pk_empcfgjanela PRIMARY KEY (codempcfgjanela);


--
-- TOC entry 6197 (class 2606 OID 11290528)
-- Name: pk_evento; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY evento
    ADD CONSTRAINT pk_evento PRIMARY KEY (codevento);


--
-- TOC entry 6203 (class 2606 OID 11290530)
-- Name: pk_extrainfo; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY extrainfo
    ADD CONSTRAINT pk_extrainfo PRIMARY KEY (codextrainfo);


--
-- TOC entry 6213 (class 2606 OID 11290532)
-- Name: pk_grp_codgrp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grp
    ADD CONSTRAINT pk_grp_codgrp PRIMARY KEY (codgrp);


--
-- TOC entry 6216 (class 2606 OID 11290534)
-- Name: pk_grpemp_codgrpemp; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grpemp
    ADD CONSTRAINT pk_grpemp_codgrpemp PRIMARY KEY (codgrpemp);


--
-- TOC entry 6218 (class 2606 OID 11290536)
-- Name: pk_grpusr_codgrpusr; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY grpusr
    ADD CONSTRAINT pk_grpusr_codgrpusr PRIMARY KEY (codgrpusr);


--
-- TOC entry 6221 (class 2606 OID 11290538)
-- Name: pk_histanotocor; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histanotocor
    ADD CONSTRAINT pk_histanotocor PRIMARY KEY (codhistanotocor);


--
-- TOC entry 6235 (class 2606 OID 11290540)
-- Name: pk_histpreventrega; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histpreventrega
    ADD CONSTRAINT pk_histpreventrega PRIMARY KEY (codhistpreventrega);


--
-- TOC entry 6237 (class 2606 OID 11290542)
-- Name: pk_histsitcarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histsitcarga
    ADD CONSTRAINT pk_histsitcarga PRIMARY KEY (codhistsitcarga);


--
-- TOC entry 6239 (class 2606 OID 11290544)
-- Name: pk_histsitembarque; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histsitembarque
    ADD CONSTRAINT pk_histsitembarque PRIMARY KEY (codhistsitembarque);


--
-- TOC entry 6502 (class 2606 OID 16964321)
-- Name: pk_histstatagendadescarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histstatagendadescarga
    ADD CONSTRAINT pk_histstatagendadescarga PRIMARY KEY (codhiststatagendadescarga);


--
-- TOC entry 6241 (class 2606 OID 11290546)
-- Name: pk_histstatcarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histstatcarga
    ADD CONSTRAINT pk_histstatcarga PRIMARY KEY (codhiststatcarga);


--
-- TOC entry 6243 (class 2606 OID 11290548)
-- Name: pk_histstatembarque; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histstatembarque
    ADD CONSTRAINT pk_histstatembarque PRIMARY KEY (codhiststatembarque);


--
-- TOC entry 6245 (class 2606 OID 11290550)
-- Name: pk_histstatocor; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY histstatocor
    ADD CONSTRAINT pk_histstatocor PRIMARY KEY (codhiststatocor);


--
-- TOC entry 6259 (class 2606 OID 11290552)
-- Name: pk_lembrete; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY lembrete
    ADD CONSTRAINT pk_lembrete PRIMARY KEY (codlembrete);


--
-- TOC entry 6262 (class 2606 OID 11290554)
-- Name: pk_locexped_codlocexped; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY locexped
    ADD CONSTRAINT pk_locexped_codlocexped PRIMARY KEY (codlocexped);


--
-- TOC entry 6268 (class 2606 OID 11290556)
-- Name: pk_moeda; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY moeda
    ADD CONSTRAINT pk_moeda PRIMARY KEY (codmoeda);


--
-- TOC entry 6272 (class 2606 OID 11290558)
-- Name: pk_mot; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY mot
    ADD CONSTRAINT pk_mot PRIMARY KEY (codmot);


--
-- TOC entry 6277 (class 2606 OID 11290560)
-- Name: pk_motivo; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY motivo
    ADD CONSTRAINT pk_motivo PRIMARY KEY (codmotivo);


--
-- TOC entry 6280 (class 2606 OID 11290562)
-- Name: pk_motivotpentidade; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY motivotpentidade
    ADD CONSTRAINT pk_motivotpentidade PRIMARY KEY (codmotivo, codtpentidade);


--
-- TOC entry 6282 (class 2606 OID 11290564)
-- Name: pk_nf; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY nf
    ADD CONSTRAINT pk_nf PRIMARY KEY (codnf);


--
-- TOC entry 6288 (class 2606 OID 11290566)
-- Name: pk_ocor; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY ocor
    ADD CONSTRAINT pk_ocor PRIMARY KEY (codocor);


--
-- TOC entry 6295 (class 2606 OID 11290568)
-- Name: pk_pais; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pais
    ADD CONSTRAINT pk_pais PRIMARY KEY (codpais);


--
-- TOC entry 6304 (class 2606 OID 11290570)
-- Name: pk_pos_parent; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos
    ADD CONSTRAINT pk_pos_parent PRIMARY KEY (codpos);


--
-- TOC entry 6308 (class 2606 OID 11290572)
-- Name: pk_prazotransito; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY prazotransito
    ADD CONSTRAINT pk_prazotransito PRIMARY KEY (codprazotransito);


--
-- TOC entry 6492 (class 2606 OID 15153964)
-- Name: pk_produto; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY produto
    ADD CONSTRAINT pk_produto PRIMARY KEY (codproduto);


--
-- TOC entry 6325 (class 2606 OID 11290574)
-- Name: pk_rastrmovel; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rastrmovel
    ADD CONSTRAINT pk_rastrmovel PRIMARY KEY (codrastrmovel);


--
-- TOC entry 6330 (class 2606 OID 11290576)
-- Name: pk_rota; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY rota
    ADD CONSTRAINT pk_rota PRIMARY KEY (codrota);


--
-- TOC entry 6332 (class 2606 OID 11290578)
-- Name: pk_sitcarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sitcarga
    ADD CONSTRAINT pk_sitcarga PRIMARY KEY (codsitcarga);


--
-- TOC entry 6335 (class 2606 OID 11290580)
-- Name: pk_sitembarque; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sitembarque
    ADD CONSTRAINT pk_sitembarque PRIMARY KEY (codsitembarque);


--
-- TOC entry 6496 (class 2606 OID 16894573)
-- Name: pk_statagendadescarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY statagendadescarga
    ADD CONSTRAINT pk_statagendadescarga PRIMARY KEY (codstatagendadescarga);


--
-- TOC entry 6340 (class 2606 OID 11290582)
-- Name: pk_statcarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY statcarga
    ADD CONSTRAINT pk_statcarga PRIMARY KEY (codstatcarga);


--
-- TOC entry 6343 (class 2606 OID 11290584)
-- Name: pk_statembarque; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY statembarque
    ADD CONSTRAINT pk_statembarque PRIMARY KEY (codstatembarque);


--
-- TOC entry 6346 (class 2606 OID 11290586)
-- Name: pk_statocor; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY statocor
    ADD CONSTRAINT pk_statocor PRIMARY KEY (codstatocor);


--
-- TOC entry 6003 (class 2606 OID 11290588)
-- Name: pk_tblcarga_codcarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY carga
    ADD CONSTRAINT pk_tblcarga_codcarga PRIMARY KEY (codcarga);


--
-- TOC entry 6351 (class 2606 OID 11290590)
-- Name: pk_tecrastr; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tecrastr
    ADD CONSTRAINT pk_tecrastr PRIMARY KEY (codtecrastr);


--
-- TOC entry 6355 (class 2606 OID 11290592)
-- Name: pk_temp_parent; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY temp
    ADD CONSTRAINT pk_temp_parent PRIMARY KEY (codtemp);


--
-- TOC entry 6360 (class 2606 OID 11290594)
-- Name: pk_templateemail; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY templateemail
    ADD CONSTRAINT pk_templateemail PRIMARY KEY (codtemplateemail);


--
-- TOC entry 6364 (class 2606 OID 11290596)
-- Name: pk_tpcarga; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpcarga
    ADD CONSTRAINT pk_tpcarga PRIMARY KEY (codtpcarga);


--
-- TOC entry 6367 (class 2606 OID 11290598)
-- Name: pk_tpcarreta_codtpcarreta; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpcarreta
    ADD CONSTRAINT pk_tpcarreta_codtpcarreta PRIMARY KEY (codtpcarreta);


--
-- TOC entry 6370 (class 2606 OID 11290600)
-- Name: pk_tpconfig; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpconfig
    ADD CONSTRAINT pk_tpconfig PRIMARY KEY (codtpconfig);


--
-- TOC entry 6373 (class 2606 OID 11290602)
-- Name: pk_tpentidade; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpentidade
    ADD CONSTRAINT pk_tpentidade PRIMARY KEY (codtpentidade);


--
-- TOC entry 6405 (class 2606 OID 11290604)
-- Name: pk_tpmotivo; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpmotivo
    ADD CONSTRAINT pk_tpmotivo PRIMARY KEY (codtpmotivo);


--
-- TOC entry 6409 (class 2606 OID 11290606)
-- Name: pk_tpoper; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpoper
    ADD CONSTRAINT pk_tpoper PRIMARY KEY (codtpoper);


--
-- TOC entry 6414 (class 2606 OID 11290608)
-- Name: pk_tpprior; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpprior
    ADD CONSTRAINT pk_tpprior PRIMARY KEY (codtpprior);


--
-- TOC entry 6417 (class 2606 OID 11290610)
-- Name: pk_tpveic_codtpveic; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpveic
    ADD CONSTRAINT pk_tpveic_codtpveic PRIMARY KEY (codtpveic);


--
-- TOC entry 6426 (class 2606 OID 11290612)
-- Name: pk_usr_codusr; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usr
    ADD CONSTRAINT pk_usr_codusr PRIMARY KEY (codusr);


--
-- TOC entry 6434 (class 2606 OID 11290614)
-- Name: pk_veic; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY veic
    ADD CONSTRAINT pk_veic PRIMARY KEY (codveic);


--
-- TOC entry 6440 (class 2606 OID 11290616)
-- Name: pk_vincequiprastr; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY vincequiprastr
    ADD CONSTRAINT pk_vincequiprastr PRIMARY KEY (codtecrastr, idequiprastr, codtpentidade, codentidade, status);


--
-- TOC entry 6451 (class 2606 OID 11453268)
-- Name: pos_20150608_0614_w24_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos_20150608_0614_w24
    ADD CONSTRAINT pos_20150608_0614_w24_pkey PRIMARY KEY (codpos);


--
-- TOC entry 6457 (class 2606 OID 11583525)
-- Name: pos_20150615_0621_w25_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos_20150615_0621_w25
    ADD CONSTRAINT pos_20150615_0621_w25_pkey PRIMARY KEY (codpos);


--
-- TOC entry 6465 (class 2606 OID 12524292)
-- Name: pos_20150622_0628_w26_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos_20150622_0628_w26
    ADD CONSTRAINT pos_20150622_0628_w26_pkey PRIMARY KEY (codpos);


--
-- TOC entry 6513 (class 2606 OID 17997730)
-- Name: pos_20150817_0823_w34_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos_20150817_0823_w34
    ADD CONSTRAINT pos_20150817_0823_w34_pkey PRIMARY KEY (codpos);


--
-- TOC entry 6545 (class 2606 OID 18814016)
-- Name: pos_20150907_0913_w37_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY pos_20150907_0913_w37
    ADD CONSTRAINT pos_20150907_0913_w37_pkey PRIMARY KEY (codpos);


--
-- TOC entry 6317 (class 2606 OID 11290634)
-- Name: progcoleta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY progcoleta
    ADD CONSTRAINT progcoleta_pkey PRIMARY KEY (codprogcoleta);


--
-- TOC entry 6322 (class 2606 OID 11290636)
-- Name: progcoletacarga_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY progcoletacarga
    ADD CONSTRAINT progcoletacarga_pkey PRIMARY KEY (codprogcoletacarga);


--
-- TOC entry 6327 (class 2606 OID 11290638)
-- Name: relatorio_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY relatorio
    ADD CONSTRAINT relatorio_pkey PRIMARY KEY (codrelatorio);


--
-- TOC entry 6338 (class 2606 OID 11290640)
-- Name: spatial_ref_sys_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY spatial_ref_sys
    ADD CONSTRAINT spatial_ref_sys_pkey PRIMARY KEY (srid);


--
-- TOC entry 6554 (class 2606 OID 19650869)
-- Name: statleilao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY statleilao
    ADD CONSTRAINT statleilao_pkey PRIMARY KEY (codstatleilao);


--
-- TOC entry 6522 (class 2606 OID 18161847)
-- Name: statpedido_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY statpedido
    ADD CONSTRAINT statpedido_pkey PRIMARY KEY (codstatpedido);


--
-- TOC entry 6349 (class 2606 OID 11290642)
-- Name: statprogcoleta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY statprogcoleta
    ADD CONSTRAINT statprogcoleta_pkey PRIMARY KEY (codstatprogcoleta);


--
-- TOC entry 6358 (class 2606 OID 11290644)
-- Name: temp_20140505_0511_w19_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY temp_20140505_0511_w19
    ADD CONSTRAINT temp_20140505_0511_w19_pkey PRIMARY KEY (codtemp);


--
-- TOC entry 6362 (class 2606 OID 11290646)
-- Name: token_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY token
    ADD CONSTRAINT token_pkey PRIMARY KEY (token);


--
-- TOC entry 6383 (class 2606 OID 11290648)
-- Name: tpevento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpevento
    ADD CONSTRAINT tpevento_pkey PRIMARY KEY (codtpevento);


--
-- TOC entry 6386 (class 2606 OID 11290650)
-- Name: tpeventocjto_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpeventocjto
    ADD CONSTRAINT tpeventocjto_pkey PRIMARY KEY (codtpeventocjto);


--
-- TOC entry 6399 (class 2606 OID 11290652)
-- Name: tpeventoembarque_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpeventoembarque
    ADD CONSTRAINT tpeventoembarque_pkey PRIMARY KEY (codtpeventoembarque);


--
-- TOC entry 6445 (class 2606 OID 11291991)
-- Name: tpeventoemp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpeventoemp
    ADD CONSTRAINT tpeventoemp_pkey PRIMARY KEY (codtpeventoemp);


--
-- TOC entry 6401 (class 2606 OID 11290654)
-- Name: tpeventousr_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpeventousr
    ADD CONSTRAINT tpeventousr_pkey PRIMARY KEY (codtpevento, codusr, codemp);


--
-- TOC entry 6403 (class 2606 OID 11290656)
-- Name: tpferiado_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpferiado
    ADD CONSTRAINT tpferiado_pkey PRIMARY KEY (codtpferiado);


--
-- TOC entry 6412 (class 2606 OID 11290658)
-- Name: tppalete_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tppalete
    ADD CONSTRAINT tppalete_pkey PRIMARY KEY (codtppalete);


--
-- TOC entry 6422 (class 2606 OID 11290660)
-- Name: tpveicoper_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY tpveicoper
    ADD CONSTRAINT tpveicoper_pkey PRIMARY KEY (codtpveicoper);


--
-- TOC entry 6424 (class 2606 OID 11290662)
-- Name: traducao_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY traducao
    ADD CONSTRAINT traducao_pkey PRIMARY KEY (codpalavra, codidioma);


--
-- TOC entry 6430 (class 2606 OID 11290664)
-- Name: usrhistsenha_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usrhistsenha
    ADD CONSTRAINT usrhistsenha_pkey PRIMARY KEY (codusrhistsenha);


--
-- TOC entry 6432 (class 2606 OID 11290666)
-- Name: usrperfil_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY usrperfil
    ADD CONSTRAINT usrperfil_pkey PRIMARY KEY (codusr);


--
-- TOC entry 6437 (class 2606 OID 11290668)
-- Name: veicemp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY veicemp
    ADD CONSTRAINT veicemp_pkey PRIMARY KEY (codveic, codemp);


SET search_path = alteracoes, pg_catalog;

--
-- TOC entry 6446 (class 1259 OID 11296144)
-- Name: log_alteracoes_20150608_0614_w24_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150608_0614_w24_nome_chave_tabela_valor_chave ON log_alteracoes_20150608_0614_w24 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6452 (class 1259 OID 11581644)
-- Name: log_alteracoes_20150615_0621_w25_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150615_0621_w25_nome_chave_tabela_valor_chave ON log_alteracoes_20150615_0621_w25 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6460 (class 1259 OID 12237388)
-- Name: log_alteracoes_20150622_0628_w26_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150622_0628_w26_nome_chave_tabela_valor_chave ON log_alteracoes_20150622_0628_w26 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6466 (class 1259 OID 12714423)
-- Name: log_alteracoes_20150629_0705_w27_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150629_0705_w27_nome_chave_tabela_valor_chave ON log_alteracoes_20150629_0705_w27 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6469 (class 1259 OID 13399687)
-- Name: log_alteracoes_20150706_0712_w28_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150706_0712_w28_nome_chave_tabela_valor_chave ON log_alteracoes_20150706_0712_w28 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6472 (class 1259 OID 13978981)
-- Name: log_alteracoes_20150713_0719_w29_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150713_0719_w29_nome_chave_tabela_valor_chave ON log_alteracoes_20150713_0719_w29 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6475 (class 1259 OID 14535464)
-- Name: log_alteracoes_20150720_0726_w30_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150720_0726_w30_nome_chave_tabela_valor_chave ON log_alteracoes_20150720_0726_w30 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6478 (class 1259 OID 15058263)
-- Name: log_alteracoes_20150727_0802_w31_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150727_0802_w31_nome_chave_tabela_valor_chave ON log_alteracoes_20150727_0802_w31 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6498 (class 1259 OID 16896128)
-- Name: log_alteracoes_20150803_0809_w32_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150803_0809_w32_nome_chave_tabela_valor_chave ON log_alteracoes_20150803_0809_w32 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6505 (class 1259 OID 17311078)
-- Name: log_alteracoes_20150810_0816_w33_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150810_0816_w33_nome_chave_tabela_valor_chave ON log_alteracoes_20150810_0816_w33 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6508 (class 1259 OID 17740754)
-- Name: log_alteracoes_20150817_0823_w34_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150817_0823_w34_nome_chave_tabela_valor_chave ON log_alteracoes_20150817_0823_w34 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6514 (class 1259 OID 18083250)
-- Name: log_alteracoes_20150824_0830_w35_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150824_0830_w35_nome_chave_tabela_valor_chave ON log_alteracoes_20150824_0830_w35 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6533 (class 1259 OID 18472041)
-- Name: log_alteracoes_20150831_0906_w36_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150831_0906_w36_nome_chave_tabela_valor_chave ON log_alteracoes_20150831_0906_w36 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6540 (class 1259 OID 18802864)
-- Name: log_alteracoes_20150907_0913_w37_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150907_0913_w37_nome_chave_tabela_valor_chave ON log_alteracoes_20150907_0913_w37 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6546 (class 1259 OID 19119604)
-- Name: log_alteracoes_20150914_0920_w38_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150914_0920_w38_nome_chave_tabela_valor_chave ON log_alteracoes_20150914_0920_w38 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6549 (class 1259 OID 19643906)
-- Name: log_alteracoes_20150921_0927_w39_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150921_0927_w39_nome_chave_tabela_valor_chave ON log_alteracoes_20150921_0927_w39 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6580 (class 1259 OID 19960896)
-- Name: log_alteracoes_20150928_1004_w40_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20150928_1004_w40_nome_chave_tabela_valor_chave ON log_alteracoes_20150928_1004_w40 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6583 (class 1259 OID 20403707)
-- Name: log_alteracoes_20151005_1011_w41_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20151005_1011_w41_nome_chave_tabela_valor_chave ON log_alteracoes_20151005_1011_w41 USING btree (nome_chave, tabela, valor_chave);


--
-- TOC entry 6586 (class 1259 OID 20821959)
-- Name: log_alteracoes_20151012_1018_w42_nome_chave_tabela_valor_chave; Type: INDEX; Schema: alteracoes; Owner: postgres; Tablespace: 
--

CREATE INDEX log_alteracoes_20151012_1018_w42_nome_chave_tabela_valor_chave ON log_alteracoes_20151012_1018_w42 USING btree (nome_chave, tabela, valor_chave);


SET search_path = public, pg_catalog;

--
-- TOC entry 6297 (class 1259 OID 11291112)
-- Name: I_Chave; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "I_Chave" ON palavra USING btree (chave);


--
-- TOC entry 6298 (class 1259 OID 11291113)
-- Name: I_CodEntidade; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "I_CodEntidade" ON palavra USING btree (codentidade);


--
-- TOC entry 6299 (class 1259 OID 11291114)
-- Name: I_CodEntidade_CodTpEntidade; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "I_CodEntidade_CodTpEntidade" ON palavra USING btree (codentidade, codtpentidade);


--
-- TOC entry 6318 (class 1259 OID 11291115)
-- Name: I_ProgColetaCarga_CodCarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "I_ProgColetaCarga_CodCarga" ON progcoletacarga USING btree (codcarga);


--
-- TOC entry 6319 (class 1259 OID 11291116)
-- Name: I_ProgColetaCarga_CodProgColeta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "I_ProgColetaCarga_CodProgColeta" ON progcoletacarga USING btree (codprogcoleta);


--
-- TOC entry 6320 (class 1259 OID 11291117)
-- Name: I_ProgColetaCarga_CodProgColeta_CodCarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX "I_ProgColetaCarga_CodProgColeta_CodCarga" ON progcoletacarga USING btree (codcarga, codprogcoleta);


--
-- TOC entry 6004 (class 1259 OID 11291118)
-- Name: carga_codcargafluxo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX carga_codcargafluxo ON carga_antiga USING btree (codcargafluxo);


--
-- TOC entry 6104 (class 1259 OID 11291119)
-- Name: cargafluxo_codemporig; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cargafluxo_codemporig ON cargafluxo USING btree (codemporig);


--
-- TOC entry 6105 (class 1259 OID 11291120)
-- Name: cargafluxo_codultemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cargafluxo_codultemp ON cargafluxo USING btree (codultemp);


--
-- TOC entry 6106 (class 1259 OID 11291121)
-- Name: cargafluxo_codultemp_codemporig; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cargafluxo_codultemp_codemporig ON cargafluxo USING btree (codultemp, codemporig);


--
-- TOC entry 6107 (class 1259 OID 11291122)
-- Name: cargafluxo_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX cargafluxo_id ON cargafluxo USING btree (id);


--
-- TOC entry 6110 (class 1259 OID 11291123)
-- Name: cargafluxoemp_codcargafluxo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cargafluxoemp_codcargafluxo ON cargafluxoemp USING btree (codcargafluxo);


--
-- TOC entry 6111 (class 1259 OID 11291124)
-- Name: cargafluxoemp_codempdest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cargafluxoemp_codempdest ON cargafluxoemp USING btree (codempdest);


--
-- TOC entry 6112 (class 1259 OID 11291125)
-- Name: cargafluxoemp_codemporig; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cargafluxoemp_codemporig ON cargafluxoemp USING btree (codemporig);


--
-- TOC entry 6113 (class 1259 OID 11291126)
-- Name: cargafluxoemp_codemporig_codempdest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX cargafluxoemp_codemporig_codempdest ON cargafluxoemp USING btree (codemporig, codempdest);


--
-- TOC entry 6195 (class 1259 OID 11291127)
-- Name: fki_evento_codtpevento; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX fki_evento_codtpevento ON evento USING btree (codtpevento);


--
-- TOC entry 6140 (class 1259 OID 11291128)
-- Name: gi_embarque_rota_progpos; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX gi_embarque_rota_progpos ON embarque USING gist (rota_progpos);


--
-- TOC entry 6169 (class 1259 OID 11291129)
-- Name: gi_emp_pos_area; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX gi_emp_pos_area ON emp USING gist (pos_area);


--
-- TOC entry 6323 (class 1259 OID 11291130)
-- Name: gi_ptoref_coord; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX gi_ptoref_coord ON ptoref USING gist (coord);


--
-- TOC entry 6328 (class 1259 OID 11291131)
-- Name: gi_rota_progpos; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX gi_rota_progpos ON rota USING gist (progpos);


--
-- TOC entry 6056 (class 1259 OID 11291132)
-- Name: i_agenda_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agenda_codemp ON agenda USING btree (codemp);


--
-- TOC entry 6057 (class 1259 OID 11291133)
-- Name: i_agendahr_codagenda; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendahr_codagenda ON agenda USING btree (codagenda);


--
-- TOC entry 6058 (class 1259 OID 11291134)
-- Name: i_agendahr_codagenda_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendahr_codagenda_codemp ON agenda USING btree (codagenda, codemp);


--
-- TOC entry 6059 (class 1259 OID 11291135)
-- Name: i_agendahr_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendahr_codemp ON agenda USING btree (codemp);


--
-- TOC entry 6065 (class 1259 OID 11291136)
-- Name: i_agendamento_codagenda; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codagenda ON agendamento USING btree (codagenda);


--
-- TOC entry 6066 (class 1259 OID 11291137)
-- Name: i_agendamento_codagenda_codagendahr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codagenda_codagendahr ON agendamento USING btree (codagenda, codagendahr);


--
-- TOC entry 6067 (class 1259 OID 11291138)
-- Name: i_agendamento_codagendahr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codagendahr ON agendamento USING btree (codagendahr);


--
-- TOC entry 6068 (class 1259 OID 11291139)
-- Name: i_agendamento_codembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codembarque ON agendamento USING btree (codembarque);


--
-- TOC entry 6069 (class 1259 OID 11291140)
-- Name: i_agendamento_codembarque_codagenda; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codembarque_codagenda ON agendamento USING btree (codembarque, codagenda);


--
-- TOC entry 6070 (class 1259 OID 11291141)
-- Name: i_agendamento_codembarque_codagenda_codagendahr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codembarque_codagenda_codagendahr ON agendamento USING btree (codembarque, codagenda, codagendahr);


--
-- TOC entry 6071 (class 1259 OID 11291142)
-- Name: i_agendamento_codmotivocancelado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codmotivocancelado ON agendamento USING btree (codmotivocancelado);


--
-- TOC entry 6072 (class 1259 OID 11291143)
-- Name: i_agendamento_codusr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_codusr ON agendamento USING btree (codusrcancelado);


--
-- TOC entry 6073 (class 1259 OID 11291144)
-- Name: i_agendamento_dta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_dta ON agendamento USING btree (dta);


--
-- TOC entry 6074 (class 1259 OID 11291145)
-- Name: i_agendamento_dta_hrini_hrfim; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_dta_hrini_hrfim ON agendamento USING btree (dta, hrini, hrfim);


--
-- TOC entry 6075 (class 1259 OID 11291146)
-- Name: i_agendamento_dtahrcancelado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_dtahrcancelado ON agendamento USING btree (dtahrcancelado);


--
-- TOC entry 6076 (class 1259 OID 11291147)
-- Name: i_agendamento_extra; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_agendamento_extra ON agendamento USING btree (extra);


--
-- TOC entry 6081 (class 1259 OID 11291148)
-- Name: i_bid_ativo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_ativo ON bid USING btree (codbid) WHERE (ativo = true);


--
-- TOC entry 6082 (class 1259 OID 11291150)
-- Name: i_bid_codciduforigem; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_codciduforigem ON bid USING btree (codciduforigem);


--
-- TOC entry 6083 (class 1259 OID 11291152)
-- Name: i_bid_codtpcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_codtpcarga ON bid USING btree (codtpcarga);


--
-- TOC entry 6084 (class 1259 OID 11291153)
-- Name: i_bid_dtavigencia; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_dtavigencia ON bid USING btree (dtavigencia);


--
-- TOC entry 6536 (class 1259 OID 18487616)
-- Name: i_bid_hist_201509_codbid; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201509_codbid ON bid_hist_201509 USING btree (codbid);


--
-- TOC entry 6537 (class 1259 OID 18487617)
-- Name: i_bid_hist_201509_codbidtransp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201509_codbidtransp ON bid_hist_201509 USING btree (codbidtransp);


--
-- TOC entry 6538 (class 1259 OID 18487618)
-- Name: i_bid_hist_201509_dta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201509_dta ON bid_hist_201509 USING btree (dta);


--
-- TOC entry 6539 (class 1259 OID 18487619)
-- Name: i_bid_hist_201509_dtavigencia; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201509_dtavigencia ON bid_hist_201509 USING btree (dtavigencia);


--
-- TOC entry 6589 (class 1259 OID 20879598)
-- Name: i_bid_hist_201510_codbid; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201510_codbid ON bid_hist_201510 USING btree (codbid);


--
-- TOC entry 6590 (class 1259 OID 20879599)
-- Name: i_bid_hist_201510_codbidtransp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201510_codbidtransp ON bid_hist_201510 USING btree (codbidtransp);


--
-- TOC entry 6591 (class 1259 OID 20879600)
-- Name: i_bid_hist_201510_dta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201510_dta ON bid_hist_201510 USING btree (dta);


--
-- TOC entry 6592 (class 1259 OID 20879601)
-- Name: i_bid_hist_201510_dtavigencia; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bid_hist_201510_dtavigencia ON bid_hist_201510 USING btree (dtavigencia);


--
-- TOC entry 6085 (class 1259 OID 11291194)
-- Name: i_bidhist_codbid; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidhist_codbid ON bid_hist USING btree (codbid);


--
-- TOC entry 6086 (class 1259 OID 11291195)
-- Name: i_bidhist_codbidtransp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidhist_codbidtransp ON bid_hist USING btree (codbidtransp);


--
-- TOC entry 6087 (class 1259 OID 11291196)
-- Name: i_bidhist_dta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidhist_dta ON bid_hist USING btree (dta);


--
-- TOC entry 6088 (class 1259 OID 11291197)
-- Name: i_bidhist_dtavigencia; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidhist_dtavigencia ON bid_hist USING btree (dtavigencia);


--
-- TOC entry 6091 (class 1259 OID 11291198)
-- Name: i_bidspot_codcidufdestino; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidspot_codcidufdestino ON bid_spot USING btree (codcidufdestino);


--
-- TOC entry 6092 (class 1259 OID 11291199)
-- Name: i_bidspot_codciduforigem; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidspot_codciduforigem ON bid_spot USING btree (codciduforigem);


--
-- TOC entry 6093 (class 1259 OID 11291200)
-- Name: i_bidspot_codemptra; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidspot_codemptra ON bid_spot USING btree (codemptra);


--
-- TOC entry 6094 (class 1259 OID 11291201)
-- Name: i_bidspot_codemptra_codcidufdestino_codciduforigem; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidspot_codemptra_codcidufdestino_codciduforigem ON bid_spot USING btree (codemptra, codcidufdestino, codciduforigem);


--
-- TOC entry 6100 (class 1259 OID 11291202)
-- Name: i_bidtransp_codbid; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidtransp_codbid ON bid_transp USING btree (codbid);


--
-- TOC entry 6101 (class 1259 OID 11291203)
-- Name: i_bidtransp_codemptra; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_bidtransp_codemptra ON bid_transp USING btree (codemptra);


--
-- TOC entry 6005 (class 1259 OID 11291204)
-- Name: i_carga_agendamento_realizado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_agendamento_realizado ON carga_antiga USING btree (agendamento_realizado);


--
-- TOC entry 6006 (class 1259 OID 11291205)
-- Name: i_carga_codcargafluxoveic; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_codcargafluxoveic ON carga_antiga USING btree (codcargafluxoveic);


--
-- TOC entry 6007 (class 1259 OID 11291206)
-- Name: i_carga_codcargaorigem; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_codcargaorigem ON carga_antiga USING btree (codcargaorigem);


--
-- TOC entry 6008 (class 1259 OID 11291207)
-- Name: i_carga_codempjanela; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_codempjanela ON carga_antiga USING btree (codempjanela);


--
-- TOC entry 6009 (class 1259 OID 11291208)
-- Name: i_carga_codenderecodest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_codenderecodest ON carga_antiga USING btree (codenderecodest);


--
-- TOC entry 6010 (class 1259 OID 11291209)
-- Name: i_carga_codpriembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_codpriembarque ON carga_antiga USING btree (codpriembarque);


--
-- TOC entry 6011 (class 1259 OID 11291210)
-- Name: i_carga_codstatcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_codstatcarga ON carga_antiga USING btree (codstatcarga);


--
-- TOC entry 6012 (class 1259 OID 11291211)
-- Name: i_carga_codultembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_codultembarque ON carga_antiga USING btree (codultembarque);


--
-- TOC entry 6013 (class 1259 OID 11291212)
-- Name: i_carga_dtahratrasado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahratrasado ON carga_antiga USING btree (dtahratrasado);


--
-- TOC entry 6014 (class 1259 OID 11291213)
-- Name: i_carga_dtahrcancelado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrcancelado ON carga_antiga USING btree (dtahrcancelado);


--
-- TOC entry 6015 (class 1259 OID 11291214)
-- Name: i_carga_dtahrfim; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrfim ON carga_antiga USING btree (dtahrfim);


--
-- TOC entry 6016 (class 1259 OID 11291215)
-- Name: i_carga_dtahrfimcoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrfimcoleta ON carga_antiga USING btree (dtahrfimcoleta);


--
-- TOC entry 6017 (class 1259 OID 11291216)
-- Name: i_carga_dtahrfimentrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrfimentrega ON carga_antiga USING btree (dtahrfimentrega);


--
-- TOC entry 6018 (class 1259 OID 11291217)
-- Name: i_carga_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrini ON carga_antiga USING btree (dtahrini);


--
-- TOC entry 6019 (class 1259 OID 11291218)
-- Name: i_carga_dtahrinicoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrinicoleta ON carga_antiga USING btree (dtahrinicoleta);


--
-- TOC entry 6020 (class 1259 OID 11291219)
-- Name: i_carga_dtahrinientrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrinientrega ON carga_antiga USING btree (dtahrinientrega);


--
-- TOC entry 6021 (class 1259 OID 11291220)
-- Name: i_carga_dtahrnaoatrasado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrnaoatrasado ON carga_antiga USING btree (dtahrnaoatrasado);


--
-- TOC entry 6022 (class 1259 OID 11291221)
-- Name: i_carga_dtahrprevcoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrprevcoleta ON carga_antiga USING btree (dtahrprevcoleta);


--
-- TOC entry 6023 (class 1259 OID 11291222)
-- Name: i_carga_dtahrpreventrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrpreventrega ON carga_antiga USING btree (dtahrpreventrega);


--
-- TOC entry 6024 (class 1259 OID 11291223)
-- Name: i_carga_dtahrsinistrado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrsinistrado ON carga_antiga USING btree (dtahrsinistrado);


--
-- TOC entry 6025 (class 1259 OID 11291224)
-- Name: i_carga_dtahrsitcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrsitcarga ON carga_antiga USING btree (dtahrsitcarga);


--
-- TOC entry 6026 (class 1259 OID 11291225)
-- Name: i_carga_dtahrstatcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_dtahrstatcarga ON carga_antiga USING btree (dtahrstatcarga);


--
-- TOC entry 6027 (class 1259 OID 11291226)
-- Name: i_carga_empdest_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_empdest_id ON carga_antiga USING btree (empdest_id);


--
-- TOC entry 6028 (class 1259 OID 11291227)
-- Name: i_carga_empembar_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_empembar_id ON carga_antiga USING btree (empembar_id);


--
-- TOC entry 6029 (class 1259 OID 11291228)
-- Name: i_carga_emporig_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_emporig_id ON carga_antiga USING btree (emporig_id);


--
-- TOC entry 6030 (class 1259 OID 11291229)
-- Name: i_carga_emptra_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_emptra_id ON carga_antiga USING btree (emptra_id);


--
-- TOC entry 6031 (class 1259 OID 11291230)
-- Name: i_carga_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_id ON carga_antiga USING btree (id);


--
-- TOC entry 6032 (class 1259 OID 11291231)
-- Name: i_carga_numdoc; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_numdoc ON carga_antiga USING btree (numdoc);


--
-- TOC entry 6033 (class 1259 OID 11291235)
-- Name: i_carga_numnf; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_numnf ON carga_antiga USING btree (numnf);


--
-- TOC entry 6034 (class 1259 OID 11291236)
-- Name: i_carga_numped; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_numped ON carga_antiga USING btree (numped);


--
-- TOC entry 6035 (class 1259 OID 11291237)
-- Name: i_carga_tpcarga_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_carga_tpcarga_id ON carga_antiga USING btree (tpcarga_id);


--
-- TOC entry 6120 (class 1259 OID 11291238)
-- Name: i_cargagrupo_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_cargagrupo_id ON cargagrupo USING btree (id);


--
-- TOC entry 6141 (class 1259 OID 11291239)
-- Name: i_embarque_codtpevento; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_codtpevento ON embarque USING btree (codtpevento);


--
-- TOC entry 6142 (class 1259 OID 11291240)
-- Name: i_embarque_codtpevento_codempdest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_codtpevento_codempdest ON embarque USING btree (codtpevento, codempdest);


--
-- TOC entry 6143 (class 1259 OID 11291241)
-- Name: i_embarque_codtpevento_codempdest_codstatembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_codtpevento_codempdest_codstatembarque ON embarque USING btree (codtpevento, codempdest, codstatembarque);


--
-- TOC entry 6144 (class 1259 OID 11291242)
-- Name: i_embarque_codtpevento_codempembar; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_codtpevento_codempembar ON embarque USING btree (codtpevento, codempembar);


--
-- TOC entry 6145 (class 1259 OID 11291243)
-- Name: i_embarque_codtpevento_codempembar_codstatembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_codtpevento_codempembar_codstatembarque ON embarque USING btree (codtpevento, codempembar, codstatembarque);


--
-- TOC entry 6146 (class 1259 OID 11291244)
-- Name: i_embarque_codtpevento_codstatembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_codtpevento_codstatembarque ON embarque USING btree (codtpevento, codstatembarque);


--
-- TOC entry 6147 (class 1259 OID 11291245)
-- Name: i_embarque_dtaremessa; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_dtaremessa ON embarque USING btree (dtaremessa);


--
-- TOC entry 6148 (class 1259 OID 11291246)
-- Name: i_embarque_placacarreta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarque_placacarreta ON embarque USING btree (placacarreta);


--
-- TOC entry 6152 (class 1259 OID 11291250)
-- Name: i_embarquecarga_codcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_codcarga ON embarquecarga USING btree (codcarga);


--
-- TOC entry 6153 (class 1259 OID 11291254)
-- Name: i_embarquecarga_codembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_codembarque ON embarquecarga USING btree (codembarque);


--
-- TOC entry 6154 (class 1259 OID 11291255)
-- Name: i_embarquecarga_codempdest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_codempdest ON embarquecarga USING btree (codempdest);


--
-- TOC entry 6155 (class 1259 OID 11291256)
-- Name: i_embarquecarga_codempdest_codcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_codempdest_codcarga ON embarquecarga USING btree (codempdest, codcarga);


--
-- TOC entry 6156 (class 1259 OID 11291260)
-- Name: i_embarquecarga_codemporig; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_codemporig ON embarquecarga USING btree (codemporig);


--
-- TOC entry 6157 (class 1259 OID 11291261)
-- Name: i_embarquecarga_codemporig_codcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_codemporig_codcarga ON embarquecarga USING btree (codemporig, codcarga);


--
-- TOC entry 6158 (class 1259 OID 11291262)
-- Name: i_embarquecarga_codenderecodest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_codenderecodest ON embarquecarga USING btree (codenderecodest);


--
-- TOC entry 6159 (class 1259 OID 11291263)
-- Name: i_embarquecarga_dtahrfimentrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_dtahrfimentrega ON embarquecarga USING btree (dtahrfimentrega);


--
-- TOC entry 6160 (class 1259 OID 11291264)
-- Name: i_embarquecarga_dtahrinientrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_embarquecarga_dtahrinientrega ON embarquecarga USING btree (dtahrinientrega);


--
-- TOC entry 6170 (class 1259 OID 11291265)
-- Name: i_emp_cli; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_emp_cli ON emp USING btree (cli);


--
-- TOC entry 6171 (class 1259 OID 11291272)
-- Name: i_emp_codconta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_emp_codconta ON emp USING btree (codconta);


--
-- TOC entry 6172 (class 1259 OID 11291273)
-- Name: i_emp_embar; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_emp_embar ON emp USING btree (embar);


--
-- TOC entry 6173 (class 1259 OID 11291274)
-- Name: i_emp_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_emp_nome ON emp USING btree (nome);


--
-- TOC entry 6174 (class 1259 OID 11291276)
-- Name: i_emp_nome_trgm; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_emp_nome_trgm ON emp USING gist (nome gist_trgm_ops);


--
-- TOC entry 6175 (class 1259 OID 11291279)
-- Name: i_emp_transp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_emp_transp ON emp USING btree (transp);


--
-- TOC entry 6183 (class 1259 OID 11291280)
-- Name: i_empendereco_codciduf; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empendereco_codciduf ON empendereco USING btree (codciduf);


--
-- TOC entry 6184 (class 1259 OID 11291281)
-- Name: i_empendereco_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empendereco_codemp ON empendereco USING btree (codemp);


--
-- TOC entry 6185 (class 1259 OID 11291288)
-- Name: i_empendereco_codemp_codciduf; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empendereco_codemp_codciduf ON empendereco USING btree (codemp, codciduf);


--
-- TOC entry 6487 (class 1259 OID 15147094)
-- Name: i_empjanela_201507_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201507_codemp ON empjanela_201507 USING btree (codemp);


--
-- TOC entry 6488 (class 1259 OID 15147095)
-- Name: i_empjanela_201507_codempendereco; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201507_codempendereco ON empjanela_201507 USING btree (codempendereco);


--
-- TOC entry 6489 (class 1259 OID 15147093)
-- Name: i_empjanela_201507_codempjanela; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201507_codempjanela ON empjanela_201507 USING btree (codempjanela);


--
-- TOC entry 6490 (class 1259 OID 15147096)
-- Name: i_empjanela_201507_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201507_dtahrini ON empjanela_201507 USING btree (dtahrini);


--
-- TOC entry 6483 (class 1259 OID 15147077)
-- Name: i_empjanela_201508_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201508_codemp ON empjanela_201508 USING btree (codemp);


--
-- TOC entry 6484 (class 1259 OID 15147078)
-- Name: i_empjanela_201508_codempendereco; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201508_codempendereco ON empjanela_201508 USING btree (codempendereco);


--
-- TOC entry 6485 (class 1259 OID 15147076)
-- Name: i_empjanela_201508_codempjanela; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201508_codempjanela ON empjanela_201508 USING btree (codempjanela);


--
-- TOC entry 6486 (class 1259 OID 15147079)
-- Name: i_empjanela_201508_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201508_dtahrini ON empjanela_201508 USING btree (dtahrini);


--
-- TOC entry 6517 (class 1259 OID 18154797)
-- Name: i_empjanela_201509_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201509_codemp ON empjanela_201509 USING btree (codemp);


--
-- TOC entry 6518 (class 1259 OID 18154798)
-- Name: i_empjanela_201509_codempendereco; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201509_codempendereco ON empjanela_201509 USING btree (codempendereco);


--
-- TOC entry 6519 (class 1259 OID 18154796)
-- Name: i_empjanela_201509_codempjanela; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201509_codempjanela ON empjanela_201509 USING btree (codempjanela);


--
-- TOC entry 6520 (class 1259 OID 18154799)
-- Name: i_empjanela_201509_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201509_dtahrini ON empjanela_201509 USING btree (dtahrini);


--
-- TOC entry 6529 (class 1259 OID 18341781)
-- Name: i_empjanela_201510_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201510_codemp ON empjanela_201510 USING btree (codemp);


--
-- TOC entry 6530 (class 1259 OID 18341782)
-- Name: i_empjanela_201510_codempendereco; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201510_codempendereco ON empjanela_201510 USING btree (codempendereco);


--
-- TOC entry 6531 (class 1259 OID 18341780)
-- Name: i_empjanela_201510_codempjanela; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201510_codempjanela ON empjanela_201510 USING btree (codempjanela);


--
-- TOC entry 6532 (class 1259 OID 18341783)
-- Name: i_empjanela_201510_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201510_dtahrini ON empjanela_201510 USING btree (dtahrini);


--
-- TOC entry 6593 (class 1259 OID 20879714)
-- Name: i_empjanela_201511_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201511_codemp ON empjanela_201511 USING btree (codemp);


--
-- TOC entry 6594 (class 1259 OID 20879715)
-- Name: i_empjanela_201511_codempendereco; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201511_codempendereco ON empjanela_201511 USING btree (codempendereco);


--
-- TOC entry 6595 (class 1259 OID 20879713)
-- Name: i_empjanela_201511_codempjanela; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201511_codempjanela ON empjanela_201511 USING btree (codempjanela);


--
-- TOC entry 6596 (class 1259 OID 20879716)
-- Name: i_empjanela_201511_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_201511_dtahrini ON empjanela_201511 USING btree (dtahrini);


--
-- TOC entry 6188 (class 1259 OID 11291466)
-- Name: i_empjanela_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_codemp ON empjanela USING btree (codemp);


--
-- TOC entry 6189 (class 1259 OID 11291467)
-- Name: i_empjanela_codempendereco; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_codempendereco ON empjanela USING btree (codempendereco);


--
-- TOC entry 6190 (class 1259 OID 11291468)
-- Name: i_empjanela_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_empjanela_dtahrini ON empjanela USING btree (dtahrini);


--
-- TOC entry 6246 (class 1259 OID 11291469)
-- Name: i_histvincequiprastr_dtahrincl; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_histvincequiprastr_dtahrincl ON histvincequiprastr USING btree (dtahrincl, status);


--
-- TOC entry 6247 (class 1259 OID 11291470)
-- Name: i_histvincequiprastr_entidade; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_histvincequiprastr_entidade ON histvincequiprastr USING btree (codtpentidade, codentidade, status);


--
-- TOC entry 6248 (class 1259 OID 11291471)
-- Name: i_histvincequiprastr_status; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_histvincequiprastr_status ON histvincequiprastr USING btree (status);


--
-- TOC entry 6249 (class 1259 OID 11291472)
-- Name: i_histvincequiprastr_tecrastr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_histvincequiprastr_tecrastr ON histvincequiprastr USING btree (codtecrastr, idequiprastr, status);


--
-- TOC entry 6555 (class 1259 OID 19650921)
-- Name: i_leilao_codpedido; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilao_codpedido ON leilao USING btree (codpedido);


--
-- TOC entry 6556 (class 1259 OID 19650920)
-- Name: i_leilao_codstatleilao; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilao_codstatleilao ON leilao USING btree (codstatleilao);


--
-- TOC entry 6557 (class 1259 OID 19650923)
-- Name: i_leilao_dtahrabertura; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilao_dtahrabertura ON leilao USING btree (dtahrabertura);


--
-- TOC entry 6558 (class 1259 OID 19650922)
-- Name: i_leilao_dtahrstatus; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilao_dtahrstatus ON leilao USING btree (dtahrstatus);


--
-- TOC entry 6570 (class 1259 OID 19651002)
-- Name: i_leilaoaprovacao_codleilao; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaoaprovacao_codleilao ON leilaoaprovacao USING btree (codleilao);


--
-- TOC entry 6576 (class 1259 OID 19651053)
-- Name: i_leilaofrete_codciduforigem_codcidufdestino_codtpcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaofrete_codciduforigem_codcidufdestino_codtpcarga ON leilaofrete USING btree (codciduforigem, codcidufdestino, codtpcarga);


--
-- TOC entry 6577 (class 1259 OID 19651052)
-- Name: i_leilaofrete_dtavigencia; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaofrete_dtavigencia ON leilaofrete USING btree (dtavigencia);


--
-- TOC entry 6566 (class 1259 OID 19650982)
-- Name: i_leilaolance_codemptra; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaolance_codemptra ON leilaolance USING btree (codemptra);


--
-- TOC entry 6567 (class 1259 OID 19650983)
-- Name: i_leilaolance_codleilao; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaolance_codleilao ON leilaolance USING btree (codleilao);


--
-- TOC entry 6561 (class 1259 OID 19650953)
-- Name: i_leilaotransp_codemptra; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaotransp_codemptra ON leilaotransp USING btree (codemptra);


--
-- TOC entry 6562 (class 1259 OID 19650954)
-- Name: i_leilaotransp_codemptra_codleilao; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaotransp_codemptra_codleilao ON leilaotransp USING btree (codemptra, codleilao);


--
-- TOC entry 6563 (class 1259 OID 19650952)
-- Name: i_leilaotransp_codleilao; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_leilaotransp_codleilao ON leilaotransp USING btree (codleilao);


--
-- TOC entry 6039 (class 1259 OID 11291473)
-- Name: i_log_alteracoes; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_log_alteracoes ON log_alteracoes USING btree (tabela, nome_chave, valor_chave);


--
-- TOC entry 6270 (class 1259 OID 11291474)
-- Name: i_mot_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_mot_nome ON mot USING btree (nome);


--
-- TOC entry 6283 (class 1259 OID 11291475)
-- Name: i_ocor_codentidade_codtpentidade; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_ocor_codentidade_codtpentidade ON ocor USING btree (codentidade, codtpentidade);


--
-- TOC entry 6284 (class 1259 OID 11291476)
-- Name: i_ocor_codmotivo_codentidade_codtpentidade; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_ocor_codmotivo_codentidade_codtpentidade ON ocor USING btree (codmotivo, codentidade, codtpentidade);


--
-- TOC entry 6285 (class 1259 OID 11291477)
-- Name: i_ocor_codmotivo_codentidade_codtpentidade_dtahrincl; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_ocor_codmotivo_codentidade_codtpentidade_dtahrincl ON ocor USING btree (codmotivo, codentidade, codtpentidade, dtahrincl);


--
-- TOC entry 6286 (class 1259 OID 11291478)
-- Name: i_ocor_dtahrincl; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_ocor_dtahrincl ON ocor USING btree (dtahrincl);


--
-- TOC entry 6289 (class 1259 OID 11291479)
-- Name: i_painelcontrole_codempembar; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_painelcontrole_codempembar ON painelcontrole USING btree (codempembar);


--
-- TOC entry 6290 (class 1259 OID 11291480)
-- Name: i_painelcontrole_codemptra; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_painelcontrole_codemptra ON painelcontrole USING btree (codemptra);


--
-- TOC entry 6291 (class 1259 OID 11291481)
-- Name: i_painelcontrole_codstatcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_painelcontrole_codstatcarga ON painelcontrole USING btree (codstatcarga);


--
-- TOC entry 6302 (class 1259 OID 11291482)
-- Name: i_pos_parent; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_pos_parent ON pos USING btree (dtahr, codtecrastr, idequiprastr);


--
-- TOC entry 6305 (class 1259 OID 11291483)
-- Name: i_prazotransito_codciduforig_codcidufdest_tipo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_prazotransito_codciduforig_codcidufdest_tipo ON prazotransito USING btree (codciduforig, codcidufdest, tipo);


--
-- TOC entry 6309 (class 1259 OID 11291484)
-- Name: i_progcoleta_codempembar; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_progcoleta_codempembar ON progcoleta USING btree (codempembar);


--
-- TOC entry 6310 (class 1259 OID 11291485)
-- Name: i_progcoleta_codemptra; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_progcoleta_codemptra ON progcoleta USING btree (codemptra);


--
-- TOC entry 6311 (class 1259 OID 18572444)
-- Name: i_progcoleta_codpedido; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_progcoleta_codpedido ON progcoleta USING btree (codpedido);


--
-- TOC entry 6312 (class 1259 OID 11291486)
-- Name: i_progcoleta_codstatprogcoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_progcoleta_codstatprogcoleta ON progcoleta USING btree (codstatprogcoleta);


--
-- TOC entry 6313 (class 1259 OID 11291487)
-- Name: i_progcoleta_dtaremessa; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_progcoleta_dtaremessa ON progcoleta USING btree (dtaremessa);


--
-- TOC entry 6552 (class 1259 OID 19650875)
-- Name: i_statleilao_chave; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_statleilao_chave ON statleilao USING btree (id);


--
-- TOC entry 5969 (class 1259 OID 11291488)
-- Name: i_tblcarga_agendamento_realizado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_agendamento_realizado ON carga USING btree (agendamento_realizado);


--
-- TOC entry 5970 (class 1259 OID 11291489)
-- Name: i_tblcarga_codcargafluxo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codcargafluxo ON carga USING btree (codcargafluxo);


--
-- TOC entry 5971 (class 1259 OID 11291490)
-- Name: i_tblcarga_codcargafluxoveic; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codcargafluxoveic ON carga USING btree (codcargafluxoveic);


--
-- TOC entry 5972 (class 1259 OID 11291491)
-- Name: i_tblcarga_codcargaorigem; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codcargaorigem ON carga USING btree (codcargaorigem);


--
-- TOC entry 5973 (class 1259 OID 11291492)
-- Name: i_tblcarga_codempjanela; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codempjanela ON carga USING btree (codempjanela);


--
-- TOC entry 5974 (class 1259 OID 11291493)
-- Name: i_tblcarga_codenderecodest; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codenderecodest ON carga USING btree (codenderecodest);


--
-- TOC entry 5975 (class 1259 OID 11291494)
-- Name: i_tblcarga_codenderecoorig_codtpoper; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codenderecoorig_codtpoper ON carga USING btree (codenderecoorig, codtpoper);


--
-- TOC entry 5976 (class 1259 OID 11291495)
-- Name: i_tblcarga_codpriembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codpriembarque ON carga USING btree (codpriembarque);


--
-- TOC entry 5977 (class 1259 OID 11291496)
-- Name: i_tblcarga_codstatcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codstatcarga ON carga USING btree (codstatcarga);


--
-- TOC entry 5978 (class 1259 OID 11291497)
-- Name: i_tblcarga_codultembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_codultembarque ON carga USING btree (codultembarque);


--
-- TOC entry 5979 (class 1259 OID 11291498)
-- Name: i_tblcarga_dtahratrasado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahratrasado ON carga USING btree (dtahratrasado);


--
-- TOC entry 5980 (class 1259 OID 11291499)
-- Name: i_tblcarga_dtahrcancelado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrcancelado ON carga USING btree (dtahrcancelado);


--
-- TOC entry 5981 (class 1259 OID 11291500)
-- Name: i_tblcarga_dtahrfim; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrfim ON carga USING btree (dtahrfim);


--
-- TOC entry 5982 (class 1259 OID 11291501)
-- Name: i_tblcarga_dtahrfimcoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrfimcoleta ON carga USING btree (dtahrfimcoleta);


--
-- TOC entry 5983 (class 1259 OID 11291502)
-- Name: i_tblcarga_dtahrfimentrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrfimentrega ON carga USING btree (dtahrfimentrega);


--
-- TOC entry 5984 (class 1259 OID 11291503)
-- Name: i_tblcarga_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrini ON carga USING btree (dtahrini);


--
-- TOC entry 5985 (class 1259 OID 11291504)
-- Name: i_tblcarga_dtahrinicoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrinicoleta ON carga USING btree (dtahrinicoleta);


--
-- TOC entry 5986 (class 1259 OID 11291505)
-- Name: i_tblcarga_dtahrinientrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrinientrega ON carga USING btree (dtahrinientrega);


--
-- TOC entry 5987 (class 1259 OID 11291506)
-- Name: i_tblcarga_dtahrnaoatrasado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrnaoatrasado ON carga USING btree (dtahrnaoatrasado);


--
-- TOC entry 5988 (class 1259 OID 11291507)
-- Name: i_tblcarga_dtahrprevcoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrprevcoleta ON carga USING btree (dtahrprevcoleta);


--
-- TOC entry 5989 (class 1259 OID 11291508)
-- Name: i_tblcarga_dtahrpreventrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrpreventrega ON carga USING btree (dtahrpreventrega);


--
-- TOC entry 5990 (class 1259 OID 11291509)
-- Name: i_tblcarga_dtahrsinistrado; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrsinistrado ON carga USING btree (dtahrsinistrado);


--
-- TOC entry 5991 (class 1259 OID 11291510)
-- Name: i_tblcarga_dtahrsitcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrsitcarga ON carga USING btree (dtahrsitcarga);


--
-- TOC entry 5992 (class 1259 OID 11291511)
-- Name: i_tblcarga_dtahrstatcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_dtahrstatcarga ON carga USING btree (dtahrstatcarga);


--
-- TOC entry 5993 (class 1259 OID 11291512)
-- Name: i_tblcarga_empdest_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_empdest_id ON carga USING btree (empdest_id);


--
-- TOC entry 5994 (class 1259 OID 11291513)
-- Name: i_tblcarga_empembar_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_empembar_id ON carga USING btree (empembar_id);


--
-- TOC entry 5995 (class 1259 OID 11291514)
-- Name: i_tblcarga_emporig_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_emporig_id ON carga USING btree (emporig_id);


--
-- TOC entry 5996 (class 1259 OID 11291515)
-- Name: i_tblcarga_emptra_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_emptra_id ON carga USING btree (emptra_id);


--
-- TOC entry 5997 (class 1259 OID 11291516)
-- Name: i_tblcarga_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_id ON carga USING btree (id);


--
-- TOC entry 5998 (class 1259 OID 11291517)
-- Name: i_tblcarga_numdoc; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_numdoc ON carga USING btree (numdoc);


--
-- TOC entry 5999 (class 1259 OID 11291518)
-- Name: i_tblcarga_numnf; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_numnf ON carga USING btree (numnf);


--
-- TOC entry 6000 (class 1259 OID 11291519)
-- Name: i_tblcarga_numped; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_numped ON carga USING btree (numped);


--
-- TOC entry 6001 (class 1259 OID 11291520)
-- Name: i_tblcarga_tpcarga_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tblcarga_tpcarga_id ON carga USING btree (tpcarga_id);


--
-- TOC entry 6353 (class 1259 OID 11291521)
-- Name: i_temp_parent; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_temp_parent ON temp USING btree (dtahr, codtecrastr, idequiprastr, sensor);


--
-- TOC entry 6375 (class 1259 OID 11291522)
-- Name: i_tpevento_codmodulo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpevento_codmodulo ON tpevento USING btree (codmodulo);


--
-- TOC entry 6376 (class 1259 OID 11291523)
-- Name: i_tpevento_codtpeventocjto; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpevento_codtpeventocjto ON tpevento USING btree (codtpeventocjto);


--
-- TOC entry 6377 (class 1259 OID 11291524)
-- Name: i_tpevento_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpevento_nome ON tpevento USING btree (nome);


--
-- TOC entry 6378 (class 1259 OID 11291525)
-- Name: i_tpevento_ordemexec; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpevento_ordemexec ON tpevento USING btree (ordemexec);


--
-- TOC entry 6379 (class 1259 OID 11291526)
-- Name: i_tpevento_proxcodstatcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpevento_proxcodstatcarga ON tpevento USING btree (proxcodstatcarga);


--
-- TOC entry 6380 (class 1259 OID 11291527)
-- Name: i_tpevento_proxcodstatembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpevento_proxcodstatembarque ON tpevento USING btree (proxcodstatembarque);


--
-- TOC entry 6381 (class 1259 OID 11291528)
-- Name: i_tpevento_tempomedio; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpevento_tempomedio ON tpevento USING btree (tempomedio);


--
-- TOC entry 6384 (class 1259 OID 11291529)
-- Name: i_tpeventocjto_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventocjto_nome ON tpeventocjto USING btree (nome);


--
-- TOC entry 6387 (class 1259 OID 11291530)
-- Name: i_tpeventoembarque_codembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_codembarque ON tpeventoembarque USING btree (codembarque);


--
-- TOC entry 6388 (class 1259 OID 11291531)
-- Name: i_tpeventoembarque_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_codemp ON tpeventoembarque USING btree (codemp);


--
-- TOC entry 6389 (class 1259 OID 11291532)
-- Name: i_tpeventoembarque_codtpevento; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_codtpevento ON tpeventoembarque USING btree (codtpevento);


--
-- TOC entry 6390 (class 1259 OID 11291533)
-- Name: i_tpeventoembarque_codtpeventocjto; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_codtpeventocjto ON tpeventoembarque USING btree (codtpeventocjto);


--
-- TOC entry 6391 (class 1259 OID 11291534)
-- Name: i_tpeventoembarque_codusr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_codusr ON tpeventoembarque USING btree (codusr);


--
-- TOC entry 6392 (class 1259 OID 11291535)
-- Name: i_tpeventoembarque_dtahrfim; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_dtahrfim ON tpeventoembarque USING btree (dtahrfim);


--
-- TOC entry 6393 (class 1259 OID 11291536)
-- Name: i_tpeventoembarque_dtahrini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_dtahrini ON tpeventoembarque USING btree (dtahrini);


--
-- TOC entry 6394 (class 1259 OID 11291537)
-- Name: i_tpeventoembarque_dtahrini_dtahrfim; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_dtahrini_dtahrfim ON tpeventoembarque USING btree (dtahrini, dtahrfim);


--
-- TOC entry 6395 (class 1259 OID 11291538)
-- Name: i_tpeventoembarque_dtahrprevfim; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_dtahrprevfim ON tpeventoembarque USING btree (dtahrprevfim);


--
-- TOC entry 6396 (class 1259 OID 11291539)
-- Name: i_tpeventoembarque_dtahrprevini; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_dtahrprevini ON tpeventoembarque USING btree (dtahrprevini);


--
-- TOC entry 6397 (class 1259 OID 11291540)
-- Name: i_tpeventoembarque_dtahrprevini_dtahrprevfim; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoembarque_dtahrprevini_dtahrprevfim ON tpeventoembarque USING btree (dtahrprevini, dtahrprevfim);


--
-- TOC entry 6441 (class 1259 OID 11292012)
-- Name: i_tpeventoemp_codemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoemp_codemp ON tpeventoemp USING btree (codemp);


--
-- TOC entry 6442 (class 1259 OID 11292014)
-- Name: i_tpeventoemp_codemp_codtpevento; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoemp_codemp_codtpevento ON tpeventoemp USING btree (codemp, codtpevento);


--
-- TOC entry 6443 (class 1259 OID 11292013)
-- Name: i_tpeventoemp_codtpevento; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpeventoemp_codtpevento ON tpeventoemp USING btree (codtpevento);


--
-- TOC entry 6407 (class 1259 OID 18799263)
-- Name: i_tpoper_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpoper_id ON tpoper USING btree (id);


--
-- TOC entry 6419 (class 1259 OID 11291541)
-- Name: i_tpveicoper_codigoexterno; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpveicoper_codigoexterno ON tpveicoper USING btree (codigoexterno);


--
-- TOC entry 6420 (class 1259 OID 11291542)
-- Name: i_tpveicoper_codigoexterno_codtpcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_tpveicoper_codigoexterno_codtpcarga ON tpveicoper USING btree (codigoexterno, codtpcarga);


--
-- TOC entry 6428 (class 1259 OID 11291543)
-- Name: i_usrhistsenha_codusr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_usrhistsenha_codusr ON usrhistsenha USING btree (codusr);


--
-- TOC entry 6438 (class 1259 OID 11291544)
-- Name: i_vincequiprastr_dtahrstatus; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX i_vincequiprastr_dtahrstatus ON vincequiprastr USING btree (dtahrstatus);


--
-- TOC entry 6095 (class 1259 OID 11291545)
-- Name: idx_bid_spot_codembarque; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_bid_spot_codembarque ON bid_spot USING btree (codembarque);


--
-- TOC entry 6096 (class 1259 OID 11291546)
-- Name: idx_bid_spot_codprogcoleta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_bid_spot_codprogcoleta ON bid_spot USING btree (codprogcoleta);


--
-- TOC entry 6097 (class 1259 OID 11291547)
-- Name: idx_bid_spot_dtaoferta; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_bid_spot_dtaoferta ON bid_spot USING btree (dtaoferta);


--
-- TOC entry 6036 (class 1259 OID 11291548)
-- Name: idx_carga_codenderecoorig_codtpoper; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_carga_codenderecoorig_codtpoper ON carga_antiga USING btree (codenderecoorig, codtpoper);


--
-- TOC entry 6149 (class 1259 OID 11291549)
-- Name: idx_embarque_cargaagendada; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_embarque_cargaagendada ON embarque USING btree (cargaagendada);


--
-- TOC entry 6176 (class 1259 OID 11291550)
-- Name: idx_emp_forn; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_emp_forn ON emp USING btree (codemp) WHERE (forn = true);


--
-- TOC entry 6177 (class 1259 OID 11291551)
-- Name: idx_emp_unid; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_emp_unid ON emp USING btree (unid);


--
-- TOC entry 6224 (class 1259 OID 11291552)
-- Name: idx_histcompl_codcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_histcompl_codcarga ON histcompl USING btree (codcarga);


--
-- TOC entry 6225 (class 1259 OID 11291553)
-- Name: idx_histcompl_codtpentidade_codentidade; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_histcompl_codtpentidade_codentidade ON histcompl USING btree (codtpentidade, codentidade);


--
-- TOC entry 6226 (class 1259 OID 11291554)
-- Name: idx_histcompl_dtahrincl; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_histcompl_dtahrincl ON histcompl USING btree (dtahrincl);


--
-- TOC entry 6227 (class 1259 OID 11291555)
-- Name: idx_histcompl_tpoper; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_histcompl_tpoper ON histcompl USING btree (tpoper);


--
-- TOC entry 6252 (class 1259 OID 11291556)
-- Name: idx_kpiciclocircuito_codcircuito_noprazo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_kpiciclocircuito_codcircuito_noprazo ON kpiciclocircuito USING btree (codcircuito, noprazo);


--
-- TOC entry 6253 (class 1259 OID 11291557)
-- Name: idx_kpiciclocircuito_embarcadores; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_kpiciclocircuito_embarcadores ON kpiciclocircuito USING gin (embarcadores);


--
-- TOC entry 6254 (class 1259 OID 11291558)
-- Name: idx_kpiciclocircuito_embarques; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_kpiciclocircuito_embarques ON kpiciclocircuito USING gin (embarques);


--
-- TOC entry 6255 (class 1259 OID 11291559)
-- Name: idx_kpiciclocircuito_transportadoras; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_kpiciclocircuito_transportadoras ON kpiciclocircuito USING gin (transportadoras);


--
-- TOC entry 6306 (class 1259 OID 11291560)
-- Name: idx_prazotransito_ativo; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_prazotransito_ativo ON prazotransito USING btree (ativo);


--
-- TOC entry 6314 (class 1259 OID 11291561)
-- Name: idx_progcoleta_cargaagendada; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_progcoleta_cargaagendada ON progcoleta USING btree (cargaagendada);


--
-- TOC entry 6315 (class 1259 OID 11291562)
-- Name: idx_progcoleta_dtahrpreventrega; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX idx_progcoleta_dtahrpreventrega ON progcoleta USING btree (dtahrpreventrega);


--
-- TOC entry 6260 (class 1259 OID 11291563)
-- Name: idx_unique_codigoexterno; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX idx_unique_codigoexterno ON locexped USING btree (codigoexterno);


SET default_tablespace = "int";

--
-- TOC entry 6449 (class 1259 OID 11453266)
-- Name: pos_20150608_0614_w24_codtecrastr_dtahr_idequiprastr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: int
--

CREATE INDEX pos_20150608_0614_w24_codtecrastr_dtahr_idequiprastr ON pos_20150608_0614_w24 USING btree (codtecrastr, dtahr, idequiprastr);


--
-- TOC entry 6455 (class 1259 OID 11583523)
-- Name: pos_20150615_0621_w25_codtecrastr_dtahr_idequiprastr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: int
--

CREATE INDEX pos_20150615_0621_w25_codtecrastr_dtahr_idequiprastr ON pos_20150615_0621_w25 USING btree (codtecrastr, dtahr, idequiprastr);


--
-- TOC entry 6463 (class 1259 OID 12524290)
-- Name: pos_20150622_0628_w26_codtecrastr_dtahr_idequiprastr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: int
--

CREATE INDEX pos_20150622_0628_w26_codtecrastr_dtahr_idequiprastr ON pos_20150622_0628_w26 USING btree (codtecrastr, dtahr, idequiprastr);


--
-- TOC entry 6511 (class 1259 OID 17997728)
-- Name: pos_20150817_0823_w34_codtecrastr_dtahr_idequiprastr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: int
--

CREATE INDEX pos_20150817_0823_w34_codtecrastr_dtahr_idequiprastr ON pos_20150817_0823_w34 USING btree (codtecrastr, dtahr, idequiprastr);


--
-- TOC entry 6543 (class 1259 OID 18814014)
-- Name: pos_20150907_0913_w37_codtecrastr_dtahr_idequiprastr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: int
--

CREATE INDEX pos_20150907_0913_w37_codtecrastr_dtahr_idequiprastr ON pos_20150907_0913_w37 USING btree (codtecrastr, dtahr, idequiprastr);


SET default_tablespace = '';

--
-- TOC entry 6356 (class 1259 OID 11291572)
-- Name: temp_20140505_0511_w19_codtecrastr_idequiprastr_dtahr_sensor; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX temp_20140505_0511_w19_codtecrastr_idequiprastr_dtahr_sensor ON temp_20140505_0511_w19 USING btree (codtecrastr, idequiprastr, dtahr, sensor);


--
-- TOC entry 6060 (class 1259 OID 11291573)
-- Name: ui_agenda_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_agenda_id ON agenda USING btree (id);


--
-- TOC entry 6123 (class 1259 OID 11291574)
-- Name: ui_carreta_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_carreta_id ON carreta USING btree (id);


--
-- TOC entry 6126 (class 1259 OID 11291575)
-- Name: ui_cfgdash_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_cfgdash_nome ON cfgdash USING btree (nome);


--
-- TOC entry 6129 (class 1259 OID 11291576)
-- Name: ui_ciduf_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_ciduf_nome ON ciduf USING btree (nome);


--
-- TOC entry 6163 (class 1259 OID 11291577)
-- Name: ui_embarquecarga_codembarque_codcarga; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_embarquecarga_codembarque_codcarga ON embarquecarga USING btree (codembarque, codcarga);


--
-- TOC entry 6166 (class 1259 OID 11291578)
-- Name: ui_embarquecarreta_codembarque_carreta_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_embarquecarreta_codembarque_carreta_id ON embarquecarreta USING btree (codembarque, carreta_id);


--
-- TOC entry 6180 (class 1259 OID 11291579)
-- Name: ui_emp_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_emp_id ON emp USING btree (id);


--
-- TOC entry 6208 (class 1259 OID 11291580)
-- Name: ui_filapos_codpos; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_filapos_codpos ON filapos USING btree (codpos);


--
-- TOC entry 6209 (class 1259 OID 11291581)
-- Name: ui_filatemp_codtemp; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_filatemp_codtemp ON filatemp USING btree (codtemp);


--
-- TOC entry 6214 (class 1259 OID 11291582)
-- Name: ui_grp_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_grp_nome ON grp USING btree (nome);


--
-- TOC entry 6219 (class 1259 OID 11291583)
-- Name: ui_grpusr_codgrpcodusr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_grpusr_codgrpcodusr ON grpusr USING btree (codgrp, codusr);


--
-- TOC entry 6575 (class 1259 OID 19651017)
-- Name: ui_leilaotpfrete_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_leilaotpfrete_id ON leilaotpfrete USING btree (id);


--
-- TOC entry 6269 (class 1259 OID 11291584)
-- Name: ui_moeda_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_moeda_descr ON moeda USING btree (descr);


--
-- TOC entry 6273 (class 1259 OID 11291585)
-- Name: ui_mot_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_mot_id ON mot USING btree (id);


--
-- TOC entry 6278 (class 1259 OID 11291586)
-- Name: ui_motivo_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_motivo_descr ON motivo USING btree (descr);


--
-- TOC entry 6296 (class 1259 OID 11291587)
-- Name: ui_pais_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_pais_nome ON pais USING btree (nome);


--
-- TOC entry 6333 (class 1259 OID 11291588)
-- Name: ui_sitcarga_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_sitcarga_descr ON sitcarga USING btree (descr);


--
-- TOC entry 6336 (class 1259 OID 11291589)
-- Name: ui_sitembarque_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_sitembarque_descr ON sitembarque USING btree (descr);


--
-- TOC entry 6497 (class 1259 OID 17016854)
-- Name: ui_statagendadescarga_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_statagendadescarga_descr ON statagendadescarga USING btree (descr);


--
-- TOC entry 6341 (class 1259 OID 11291590)
-- Name: ui_statcarga_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_statcarga_descr ON statcarga USING btree (descr);


--
-- TOC entry 6344 (class 1259 OID 11291591)
-- Name: ui_statembarque_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_statembarque_descr ON statembarque USING btree (descr);


--
-- TOC entry 6347 (class 1259 OID 11291592)
-- Name: ui_statocor_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_statocor_descr ON statocor USING btree (descr);


--
-- TOC entry 6352 (class 1259 OID 11291593)
-- Name: ui_tecrastr_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tecrastr_nome ON tecrastr USING btree (nome);


--
-- TOC entry 6365 (class 1259 OID 11291594)
-- Name: ui_tpcarga_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpcarga_descr ON tpcarga USING btree (descr);


--
-- TOC entry 6368 (class 1259 OID 11291595)
-- Name: ui_tpcarreta_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpcarreta_nome ON tpcarreta USING btree (nome);


--
-- TOC entry 6371 (class 1259 OID 11291596)
-- Name: ui_tpconfig_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpconfig_descr ON tpconfig USING btree (descr);


--
-- TOC entry 6374 (class 1259 OID 11291597)
-- Name: ui_tpentidade_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpentidade_descr ON tpentidade USING btree (descr);


--
-- TOC entry 6406 (class 1259 OID 11291598)
-- Name: ui_tpmotivo_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpmotivo_descr ON tpmotivo USING btree (descr);


--
-- TOC entry 6410 (class 1259 OID 11291599)
-- Name: ui_tpoper_descr; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpoper_descr ON tpoper USING btree (descr);


--
-- TOC entry 6415 (class 1259 OID 11291600)
-- Name: ui_tpprior_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpprior_nome ON tpprior USING btree (nome);


--
-- TOC entry 6418 (class 1259 OID 11291601)
-- Name: ui_tpveic_nome; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_tpveic_nome ON tpveic USING btree (nome);


--
-- TOC entry 6427 (class 1259 OID 11291602)
-- Name: ui_usr_nomeacesso; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_usr_nomeacesso ON usr USING btree (nomeacesso);


--
-- TOC entry 6435 (class 1259 OID 11291603)
-- Name: ui_veic_id; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX ui_veic_id ON veic USING btree (id);


--
-- TOC entry 6962 (class 2618 OID 11291604)
-- Name: emailtosend_ignore_cron; Type: RULE; Schema: public; Owner: postgres
--

CREATE RULE emailtosend_ignore_cron AS ON INSERT TO emailtosend WHERE ((new.subject)::text = 'Galileu - CRON Nao executada'::text) DO INSTEAD NOTHING;


--
-- TOC entry 6963 (class 2618 OID 11291605)
-- Name: emailtosend_ignore_cron1; Type: RULE; Schema: public; Owner: postgres
--

CREATE RULE emailtosend_ignore_cron1 AS ON INSERT TO emailtosend WHERE ((new.subject)::text = 'Variacao Critica de Temperatura'::text) DO INSTEAD NOTHING;


--
-- TOC entry 6730 (class 2620 OID 11291628)
-- Name: t_acao_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_acao_after_autolog AFTER INSERT OR DELETE OR UPDATE ON acao FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6761 (class 2620 OID 11291629)
-- Name: t_after_i_embarquecarga_rotograma; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_i_embarquecarga_rotograma AFTER INSERT ON embarquecarga FOR EACH ROW EXECUTE PROCEDURE tf_after_i_embarquecarga_rotograma();


--
-- TOC entry 6762 (class 2620 OID 11291630)
-- Name: t_after_id_embarquecarga_cargasid; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_id_embarquecarga_cargasid AFTER INSERT OR DELETE ON embarquecarga FOR EACH ROW EXECUTE PROCEDURE tf_after_id_embarquecarga_cargasid();


--
-- TOC entry 6779 (class 2620 OID 11291631)
-- Name: t_after_id_extrainfo; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_id_extrainfo AFTER INSERT OR DELETE ON extrainfo FOR EACH ROW EXECUTE PROCEDURE tf_after_id_extrainfo();


--
-- TOC entry 6802 (class 2620 OID 11291632)
-- Name: t_after_id_progcoletacarga_cargasid; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_id_progcoletacarga_cargasid AFTER INSERT OR DELETE ON progcoletacarga FOR EACH ROW EXECUTE PROCEDURE tf_after_id_progcoletacarga_cargasid();


--
-- TOC entry 6843 (class 2620 OID 17019155)
-- Name: t_after_iu_agendadescarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iu_agendadescarga AFTER INSERT OR UPDATE ON agendadescarga FOR EACH ROW EXECUTE PROCEDURE tf_after_iu_agendadescarga();


--
-- TOC entry 6753 (class 2620 OID 11291633)
-- Name: t_after_iu_embarque; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iu_embarque AFTER INSERT OR UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_after_iu_embarque();


--
-- TOC entry 6754 (class 2620 OID 11291634)
-- Name: t_after_iu_embarque_emailtecrastr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iu_embarque_emailtecrastr AFTER INSERT OR UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_after_iu_embarque_emailtecrastr('\\\\x');


--
-- TOC entry 6853 (class 2620 OID 19651059)
-- Name: t_after_iu_leilaolance; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iu_leilaolance AFTER INSERT OR UPDATE ON leilaolance FOR EACH ROW EXECUTE PROCEDURE tf_after_iu_leilaolance();


--
-- TOC entry 6847 (class 2620 OID 18216404)
-- Name: t_after_iu_pedido; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iu_pedido AFTER INSERT OR UPDATE ON pedido FOR EACH ROW EXECUTE PROCEDURE tf_after_iu_pedido();


--
-- TOC entry 6848 (class 2620 OID 18217599)
-- Name: t_after_iud_bidregiao_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_bidregiao_autolog AFTER INSERT OR DELETE OR UPDATE ON bid_regiao FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6763 (class 2620 OID 11291636)
-- Name: t_after_iud_embarquecarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_embarquecarga AFTER INSERT OR DELETE OR UPDATE ON embarquecarga FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_embarquecarga();


--
-- TOC entry 6764 (class 2620 OID 11291637)
-- Name: t_after_iud_embarquecarga_tpcarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_embarquecarga_tpcarga AFTER INSERT OR UPDATE ON embarquecarga FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_embarquecarga_tpcarga();


--
-- TOC entry 6851 (class 2620 OID 19651056)
-- Name: t_after_iud_leilao; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_leilao AFTER INSERT OR DELETE OR UPDATE ON leilao FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6854 (class 2620 OID 19651058)
-- Name: t_after_iud_leilaoaprovacao; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_leilaoaprovacao AFTER INSERT OR DELETE OR UPDATE ON leilaoaprovacao FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6852 (class 2620 OID 19651057)
-- Name: t_after_iud_leilaotransp; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_leilaotransp AFTER INSERT OR DELETE OR UPDATE ON leilaotransp FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6787 (class 2620 OID 11291638)
-- Name: t_after_iud_lembrete; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_lembrete AFTER INSERT OR DELETE OR UPDATE ON lembrete FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_lembrete();


--
-- TOC entry 6794 (class 2620 OID 11291639)
-- Name: t_after_iud_ocor; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_ocor AFTER INSERT OR DELETE OR UPDATE ON ocor FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_ocor();


--
-- TOC entry 6846 (class 2620 OID 18161908)
-- Name: t_after_iud_pedido_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_pedido_autolog AFTER INSERT OR DELETE OR UPDATE ON pedido FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6803 (class 2620 OID 11291640)
-- Name: t_after_iud_progcoletacarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_progcoletacarga AFTER INSERT OR DELETE OR UPDATE ON progcoletacarga FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_progcoletacarga();


--
-- TOC entry 6804 (class 2620 OID 11291641)
-- Name: t_after_iud_progcoletacarga_dtaremessa; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_progcoletacarga_dtaremessa AFTER INSERT OR DELETE OR UPDATE ON progcoletacarga FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_progcoletacarga_dtaremessa();


--
-- TOC entry 6805 (class 2620 OID 11291642)
-- Name: t_after_iud_progcoletacarga_tpcarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_progcoletacarga_tpcarga AFTER INSERT OR UPDATE ON progcoletacarga FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_progcoletacarga_tpcarga();


--
-- TOC entry 6850 (class 2620 OID 19651055)
-- Name: t_after_iud_statleilao; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_statleilao AFTER INSERT OR DELETE OR UPDATE ON statleilao FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6845 (class 2620 OID 18161907)
-- Name: t_after_iud_statpedido_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_statpedido_autolog AFTER INSERT OR DELETE OR UPDATE ON statpedido FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6726 (class 2620 OID 11291643)
-- Name: t_after_iud_tblcarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_tblcarga AFTER INSERT OR DELETE OR UPDATE ON carga FOR EACH ROW EXECUTE PROCEDURE dados_carga.tf_after_iud_carga_child();


--
-- TOC entry 6835 (class 2620 OID 11291644)
-- Name: t_after_iud_veic; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_iud_veic AFTER INSERT OR DELETE OR UPDATE ON veic FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_veic();


--
-- TOC entry 6755 (class 2620 OID 11291645)
-- Name: t_after_u_embarque_atualizagrupos; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_u_embarque_atualizagrupos AFTER UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_after_u_embarque_atualizagrupos();


--
-- TOC entry 6756 (class 2620 OID 11291646)
-- Name: t_after_u_embarque_atualizarKpiCicloCircuito; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER "t_after_u_embarque_atualizarKpiCicloCircuito" AFTER UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_after_u_embarque_atualizarkpiciclocircuito();


--
-- TOC entry 6752 (class 2620 OID 12712785)
-- Name: t_after_u_embarque_programado; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_u_embarque_programado AFTER UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_after_u_embarque_programado();


--
-- TOC entry 6757 (class 2620 OID 11291647)
-- Name: t_after_u_embarque_rotograma; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_u_embarque_rotograma AFTER UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_after_u_embarque_rotograma();


--
-- TOC entry 6799 (class 2620 OID 11291648)
-- Name: t_after_u_progcoleta_atualizagrupos; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_after_u_progcoleta_atualizagrupos AFTER UPDATE ON progcoleta FOR EACH ROW EXECUTE PROCEDURE tf_after_u_progcoleta_atualizagrupos();


--
-- TOC entry 6731 (class 2620 OID 11291649)
-- Name: t_agenda_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_agenda_after_autolog AFTER INSERT OR DELETE OR UPDATE ON agenda FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6732 (class 2620 OID 11291650)
-- Name: t_agendahr_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_agendahr_after_autolog AFTER INSERT OR DELETE OR UPDATE ON agendahr FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6733 (class 2620 OID 11291651)
-- Name: t_agendamento_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_agendamento_after_autolog AFTER INSERT OR DELETE OR UPDATE ON agendamento FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6734 (class 2620 OID 11291652)
-- Name: t_ajuda_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_ajuda_after_autolog AFTER INSERT OR DELETE OR UPDATE ON ajuda FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6738 (class 2620 OID 11291653)
-- Name: t_before_i_bid_transp; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_bid_transp BEFORE INSERT ON bid_transp FOR EACH ROW EXECUTE PROCEDURE tf_before_i_bid_transp();


--
-- TOC entry 6736 (class 2620 OID 11291654)
-- Name: t_before_i_bidhist; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_bidhist BEFORE INSERT ON bid_hist FOR EACH ROW EXECUTE PROCEDURE tf_before_i_bidhist();


--
-- TOC entry 6728 (class 2620 OID 11291655)
-- Name: t_before_i_carga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_carga BEFORE INSERT ON carga_antiga FOR EACH ROW EXECUTE PROCEDURE tf_before_i_carga();


--
-- TOC entry 6840 (class 2620 OID 11597007)
-- Name: t_before_i_dados_integracao; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_dados_integracao BEFORE INSERT ON dados_integracao FOR EACH ROW EXECUTE PROCEDURE tf_before_i_dados_integracao();


--
-- TOC entry 6751 (class 2620 OID 12712783)
-- Name: t_before_i_embarque_programado; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_embarque_programado BEFORE INSERT ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_before_i_embarque_programado();


--
-- TOC entry 6774 (class 2620 OID 11291656)
-- Name: t_before_i_empjanela; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_empjanela BEFORE INSERT ON empjanela FOR EACH ROW EXECUTE PROCEDURE tf_before_i_empjanela();


--
-- TOC entry 6729 (class 2620 OID 11291657)
-- Name: t_before_i_log_alteracoes; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_log_alteracoes BEFORE INSERT ON log_alteracoes FOR EACH ROW EXECUTE PROCEDURE tf_before_i_log_alteracoes();


--
-- TOC entry 6838 (class 2620 OID 11453265)
-- Name: t_before_i_pos_20150608_0614_w24; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_pos_20150608_0614_w24 BEFORE INSERT ON pos_20150608_0614_w24 FOR EACH ROW EXECUTE PROCEDURE tf_before_i_pos_child();


--
-- TOC entry 6839 (class 2620 OID 11583522)
-- Name: t_before_i_pos_20150615_0621_w25; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_pos_20150615_0621_w25 BEFORE INSERT ON pos_20150615_0621_w25 FOR EACH ROW EXECUTE PROCEDURE tf_before_i_pos_child();


--
-- TOC entry 6841 (class 2620 OID 12524289)
-- Name: t_before_i_pos_20150622_0628_w26; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_pos_20150622_0628_w26 BEFORE INSERT ON pos_20150622_0628_w26 FOR EACH ROW EXECUTE PROCEDURE tf_before_i_pos_child();


--
-- TOC entry 6844 (class 2620 OID 17997727)
-- Name: t_before_i_pos_20150817_0823_w34; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_pos_20150817_0823_w34 BEFORE INSERT ON pos_20150817_0823_w34 FOR EACH ROW EXECUTE PROCEDURE tf_before_i_pos_child();


--
-- TOC entry 6849 (class 2620 OID 18814013)
-- Name: t_before_i_pos_20150907_0913_w37; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_pos_20150907_0913_w37 BEFORE INSERT ON pos_20150907_0913_w37 FOR EACH ROW EXECUTE PROCEDURE tf_before_i_pos_child();


--
-- TOC entry 6797 (class 2620 OID 11291666)
-- Name: t_before_i_pos_parent; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_pos_parent BEFORE INSERT ON pos FOR EACH ROW EXECUTE PROCEDURE tf_before_i_pos_parent();


--
-- TOC entry 6817 (class 2620 OID 11291667)
-- Name: t_before_i_temp_20140505_0511_w19; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_temp_20140505_0511_w19 BEFORE INSERT ON temp_20140505_0511_w19 FOR EACH ROW EXECUTE PROCEDURE tf_before_i_temp_child();


--
-- TOC entry 6816 (class 2620 OID 11291668)
-- Name: t_before_i_temp_parent; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_i_temp_parent BEFORE INSERT ON temp FOR EACH ROW EXECUTE PROCEDURE tf_before_i_temp_parent();


--
-- TOC entry 6758 (class 2620 OID 11291669)
-- Name: t_before_iu_embarque; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iu_embarque BEFORE INSERT OR UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_before_iu_embarque();


--
-- TOC entry 6765 (class 2620 OID 11291670)
-- Name: t_before_iu_embarquecarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iu_embarquecarga BEFORE INSERT OR UPDATE ON embarquecarga FOR EACH ROW EXECUTE PROCEDURE tf_before_iu_embarquecarga();


--
-- TOC entry 6770 (class 2620 OID 11291671)
-- Name: t_before_iu_emp; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iu_emp BEFORE INSERT OR UPDATE ON emp FOR EACH ROW EXECUTE PROCEDURE tf_before_iu_emp();


--
-- TOC entry 6772 (class 2620 OID 11291672)
-- Name: t_before_iu_empendereco; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iu_empendereco BEFORE INSERT OR UPDATE ON empendereco FOR EACH ROW EXECUTE PROCEDURE tf_before_iu_empendereco();


--
-- TOC entry 6775 (class 2620 OID 11291673)
-- Name: t_before_iu_empjanelapeso; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iu_empjanelapeso BEFORE INSERT OR UPDATE ON empjanelapeso FOR EACH ROW EXECUTE PROCEDURE tf_before_iu_empjanelapeso();


--
-- TOC entry 6800 (class 2620 OID 11291674)
-- Name: t_before_iu_progcoleta; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iu_progcoleta BEFORE INSERT OR UPDATE ON progcoleta FOR EACH ROW EXECUTE PROCEDURE tf_before_iu_progcoleta();


--
-- TOC entry 6837 (class 2620 OID 11291675)
-- Name: t_before_iu_vincequiprastr; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iu_vincequiprastr BEFORE INSERT OR UPDATE ON vincequiprastr FOR EACH ROW EXECUTE PROCEDURE tf_before_iu_vincequiprastr();


--
-- TOC entry 6727 (class 2620 OID 11291676)
-- Name: t_before_iud_tblcarga; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_iud_tblcarga BEFORE INSERT OR DELETE OR UPDATE ON carga FOR EACH ROW EXECUTE PROCEDURE dados_carga.tf_before_iud_carga_child();


--
-- TOC entry 6759 (class 2620 OID 11291677)
-- Name: t_before_u_embarque_rotograma; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_before_u_embarque_rotograma BEFORE UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_before_u_embarque_rotograma();


--
-- TOC entry 6735 (class 2620 OID 11291678)
-- Name: t_bid_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_bid_after_autolog AFTER INSERT OR DELETE OR UPDATE ON bid FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6737 (class 2620 OID 11291679)
-- Name: t_bid_spot_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_bid_spot_after_autolog AFTER INSERT OR DELETE OR UPDATE ON bid_spot FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6739 (class 2620 OID 11291680)
-- Name: t_bid_transp_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_bid_transp_after_autolog AFTER INSERT OR DELETE OR UPDATE ON bid_transp FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6740 (class 2620 OID 11291681)
-- Name: t_cargafluxo_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_cargafluxo_after_autolog AFTER INSERT OR DELETE OR UPDATE ON cargafluxo FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6741 (class 2620 OID 11291682)
-- Name: t_cargafluxoemp_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_cargafluxoemp_after_autolog AFTER INSERT OR DELETE OR UPDATE ON cargafluxoemp FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6742 (class 2620 OID 11291683)
-- Name: t_cargafluxoveic_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_cargafluxoveic_after_autolog AFTER INSERT OR DELETE OR UPDATE ON cargafluxoveic FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6743 (class 2620 OID 11291684)
-- Name: t_cargagrupo_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_cargagrupo_after_autolog AFTER INSERT OR DELETE OR UPDATE ON cargagrupo FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6744 (class 2620 OID 11291685)
-- Name: t_carreta_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_carreta_after_autolog AFTER INSERT OR DELETE OR UPDATE ON carreta FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6745 (class 2620 OID 11291686)
-- Name: t_cfgdash_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_cfgdash_after_autolog AFTER INSERT OR DELETE OR UPDATE ON cfgdash FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6746 (class 2620 OID 11291687)
-- Name: t_ciduf_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_ciduf_after_autolog AFTER INSERT OR DELETE OR UPDATE ON ciduf FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6747 (class 2620 OID 11291688)
-- Name: t_config_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_config_after_autolog AFTER INSERT OR DELETE OR UPDATE ON config FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6748 (class 2620 OID 11291689)
-- Name: t_conta_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_conta_after_autolog AFTER INSERT OR DELETE OR UPDATE ON conta FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6749 (class 2620 OID 11291690)
-- Name: t_contato_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_contato_after_autolog AFTER INSERT OR DELETE OR UPDATE ON contato FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6750 (class 2620 OID 11291691)
-- Name: t_emailregra_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_emailregra_after_autolog AFTER INSERT OR DELETE OR UPDATE ON emailregra FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6760 (class 2620 OID 11291692)
-- Name: t_embarque_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_embarque_after_autolog AFTER INSERT OR DELETE OR UPDATE ON embarque FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6766 (class 2620 OID 11291693)
-- Name: t_embarquecarga_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_embarquecarga_after_autolog AFTER INSERT OR DELETE OR UPDATE ON embarquecarga FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6768 (class 2620 OID 11291697)
-- Name: t_embarquecarreta_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_embarquecarreta_after_autolog AFTER INSERT OR DELETE OR UPDATE ON embarquecarreta FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6769 (class 2620 OID 11291698)
-- Name: t_embartransp_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_embartransp_after_autolog AFTER INSERT OR DELETE OR UPDATE ON embartransp FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6771 (class 2620 OID 11291699)
-- Name: t_emp_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_emp_after_autolog AFTER INSERT OR DELETE OR UPDATE ON emp FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6773 (class 2620 OID 11291700)
-- Name: t_empendereco_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_empendereco_after_autolog AFTER INSERT OR DELETE OR UPDATE ON empendereco FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6776 (class 2620 OID 11291701)
-- Name: t_evento_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_evento_after_autolog AFTER INSERT OR DELETE OR UPDATE ON evento FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6777 (class 2620 OID 11291702)
-- Name: t_expediente_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_expediente_after_autolog AFTER INSERT OR DELETE OR UPDATE ON expediente FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6778 (class 2620 OID 11291706)
-- Name: t_expedientehorario_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_expedientehorario_after_autolog AFTER INSERT OR DELETE OR UPDATE ON expedientehorario FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6780 (class 2620 OID 11291707)
-- Name: t_extrainfo_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_extrainfo_after_autolog AFTER INSERT OR DELETE OR UPDATE ON extrainfo FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6781 (class 2620 OID 11291711)
-- Name: t_faq_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_faq_after_autolog AFTER INSERT OR DELETE OR UPDATE ON faq FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6782 (class 2620 OID 11291712)
-- Name: t_feriado_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_feriado_after_autolog AFTER INSERT OR DELETE OR UPDATE ON feriado FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6783 (class 2620 OID 11291713)
-- Name: t_grp_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_grp_after_autolog AFTER INSERT OR DELETE OR UPDATE ON grp FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6784 (class 2620 OID 11291714)
-- Name: t_grpemp_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_grpemp_after_autolog AFTER INSERT OR DELETE OR UPDATE ON grpemp FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6785 (class 2620 OID 11291715)
-- Name: t_grpusr_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_grpusr_after_autolog AFTER INSERT OR DELETE OR UPDATE ON grpusr FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6786 (class 2620 OID 11291716)
-- Name: t_idioma_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_idioma_after_autolog AFTER INSERT OR DELETE OR UPDATE ON idioma FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6788 (class 2620 OID 11291717)
-- Name: t_locexped_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_locexped_after_autolog AFTER INSERT OR DELETE OR UPDATE ON locexped FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6789 (class 2620 OID 11291718)
-- Name: t_modulo_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_modulo_after_autolog AFTER INSERT OR DELETE OR UPDATE ON modulo FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6790 (class 2620 OID 11291719)
-- Name: t_moeda_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_moeda_after_autolog AFTER INSERT OR DELETE OR UPDATE ON moeda FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6791 (class 2620 OID 11291720)
-- Name: t_mot_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_mot_after_autolog AFTER INSERT OR DELETE OR UPDATE ON mot FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6792 (class 2620 OID 11291721)
-- Name: t_motivo_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_motivo_after_autolog AFTER INSERT OR DELETE OR UPDATE ON motivo FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6793 (class 2620 OID 11291722)
-- Name: t_nf_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_nf_after_autolog AFTER INSERT OR DELETE OR UPDATE ON nf FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6795 (class 2620 OID 11291723)
-- Name: t_pais_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_pais_after_autolog AFTER INSERT OR DELETE OR UPDATE ON pais FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6796 (class 2620 OID 11291724)
-- Name: t_palavra_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_palavra_after_autolog AFTER INSERT OR DELETE OR UPDATE ON palavra FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6798 (class 2620 OID 11291725)
-- Name: t_prazotransito_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_prazotransito_after_autolog AFTER INSERT OR DELETE OR UPDATE ON prazotransito FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6801 (class 2620 OID 11291726)
-- Name: t_progcoleta_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_progcoleta_after_autolog AFTER INSERT OR DELETE OR UPDATE ON progcoleta FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6806 (class 2620 OID 11291727)
-- Name: t_progcoletacarga_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_progcoletacarga_after_autolog AFTER INSERT OR DELETE OR UPDATE ON progcoletacarga FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6807 (class 2620 OID 11291728)
-- Name: t_rastrmovel_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_rastrmovel_after_autolog AFTER INSERT OR DELETE OR UPDATE ON rastrmovel FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6808 (class 2620 OID 11291729)
-- Name: t_rota_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_rota_after_autolog AFTER INSERT OR DELETE OR UPDATE ON rota FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6809 (class 2620 OID 11291730)
-- Name: t_sitcarga_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_sitcarga_after_autolog AFTER INSERT OR DELETE OR UPDATE ON sitcarga FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6810 (class 2620 OID 11291731)
-- Name: t_sitembarque_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_sitembarque_after_autolog AFTER INSERT OR DELETE OR UPDATE ON sitembarque FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6842 (class 2620 OID 16894575)
-- Name: t_statagendadescarga_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_statagendadescarga_after_autolog AFTER INSERT OR DELETE OR UPDATE ON statagendadescarga FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6811 (class 2620 OID 11291732)
-- Name: t_statcarga_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_statcarga_after_autolog AFTER INSERT OR DELETE OR UPDATE ON statcarga FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6812 (class 2620 OID 11291733)
-- Name: t_statembarque_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_statembarque_after_autolog AFTER INSERT OR DELETE OR UPDATE ON statembarque FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6813 (class 2620 OID 11291734)
-- Name: t_statocor_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_statocor_after_autolog AFTER INSERT OR DELETE OR UPDATE ON statocor FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6814 (class 2620 OID 11291735)
-- Name: t_statprogcoleta_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_statprogcoleta_after_autolog AFTER INSERT OR DELETE OR UPDATE ON statprogcoleta FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6815 (class 2620 OID 11291736)
-- Name: t_tecrastr_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tecrastr_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tecrastr FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6818 (class 2620 OID 11291737)
-- Name: t_templateemail_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_templateemail_after_autolog AFTER INSERT OR DELETE OR UPDATE ON templateemail FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6819 (class 2620 OID 11291738)
-- Name: t_tpcarga_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpcarga_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpcarga FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6820 (class 2620 OID 11291739)
-- Name: t_tpcarreta_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpcarreta_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpcarreta FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6821 (class 2620 OID 11291740)
-- Name: t_tpconfig_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpconfig_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpconfig FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6822 (class 2620 OID 11291741)
-- Name: t_tpentidade_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpentidade_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpentidade FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6823 (class 2620 OID 11291742)
-- Name: t_tpevento_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpevento_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpevento FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6824 (class 2620 OID 11291743)
-- Name: t_tpeventocjto_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpeventocjto_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpeventocjto FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6825 (class 2620 OID 11291744)
-- Name: t_tpeventoembarque_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpeventoembarque_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpeventoembarque FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6826 (class 2620 OID 11291745)
-- Name: t_tpferiado_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpferiado_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpferiado FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6827 (class 2620 OID 11291746)
-- Name: t_tpmotivo_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpmotivo_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpmotivo FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6828 (class 2620 OID 11291747)
-- Name: t_tpoper_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpoper_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpoper FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6829 (class 2620 OID 11291748)
-- Name: t_tppalete_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tppalete_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tppalete FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6830 (class 2620 OID 11291749)
-- Name: t_tpprior_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpprior_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpprior FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6831 (class 2620 OID 11291750)
-- Name: t_tpveic_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpveic_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpveic FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6832 (class 2620 OID 11291751)
-- Name: t_tpveicoper_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_tpveicoper_after_autolog AFTER INSERT OR DELETE OR UPDATE ON tpveicoper FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6833 (class 2620 OID 11291752)
-- Name: t_usr_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_usr_after_autolog AFTER INSERT OR DELETE OR UPDATE ON usr FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6834 (class 2620 OID 11291753)
-- Name: t_usrperfil_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_usrperfil_after_autolog AFTER INSERT OR DELETE OR UPDATE ON usrperfil FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6836 (class 2620 OID 11291754)
-- Name: t_veic_after_autolog; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_veic_after_autolog AFTER INSERT OR DELETE OR UPDATE ON veic FOR EACH ROW EXECUTE PROCEDURE tf_auto_log();


--
-- TOC entry 6767 (class 2620 OID 11291755)
-- Name: tf_after_iud_embarquecarga_dtaremessa; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tf_after_iud_embarquecarga_dtaremessa AFTER INSERT OR DELETE OR UPDATE ON embarquecarga FOR EACH ROW EXECUTE PROCEDURE tf_after_iud_embarquecarga_dtaremessa();


SET search_path = dashboard, pg_catalog;

--
-- TOC entry 6607 (class 2606 OID 11291756)
-- Name: agendadashboard_codgrp_fkey; Type: FK CONSTRAINT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY agendadashboard
    ADD CONSTRAINT agendadashboard_codgrp_fkey FOREIGN KEY (codgrp) REFERENCES public.grp(codgrp) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 6608 (class 2606 OID 11291761)
-- Name: agendalayout_codagendadashboard_fkey; Type: FK CONSTRAINT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY agendalayout
    ADD CONSTRAINT agendalayout_codagendadashboard_fkey FOREIGN KEY (codagendadashboard) REFERENCES agendadashboard(codagendadashboard) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 6609 (class 2606 OID 11291766)
-- Name: agendalayout_codlayoutdashboard_fkey; Type: FK CONSTRAINT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY agendalayout
    ADD CONSTRAINT agendalayout_codlayoutdashboard_fkey FOREIGN KEY (codlayoutdashboard) REFERENCES layoutdashboard(codlayoutdashboard) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 6610 (class 2606 OID 11291771)
-- Name: fontedadosparam_codfontedados_fkey; Type: FK CONSTRAINT; Schema: dashboard; Owner: postgres
--

ALTER TABLE ONLY fontedadosparam
    ADD CONSTRAINT fontedadosparam_codfontedados_fkey FOREIGN KEY (codfontedados) REFERENCES fontedados(codfontedados) ON UPDATE RESTRICT ON DELETE RESTRICT;


SET search_path = public, pg_catalog;

--
-- TOC entry 6611 (class 2606 OID 11291776)
-- Name: agenda_codemp_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agenda
    ADD CONSTRAINT agenda_codemp_fkey FOREIGN KEY (codemp) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6612 (class 2606 OID 11291781)
-- Name: agendahr_codagenda_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendahr
    ADD CONSTRAINT agendahr_codagenda_fkey FOREIGN KEY (codagenda) REFERENCES agenda(codagenda) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6613 (class 2606 OID 11291786)
-- Name: agendahr_codemp_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendahr
    ADD CONSTRAINT agendahr_codemp_fkey FOREIGN KEY (codemp) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6614 (class 2606 OID 11291791)
-- Name: agendamento_codagenda_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendamento
    ADD CONSTRAINT agendamento_codagenda_fkey FOREIGN KEY (codagenda) REFERENCES agenda(codagenda) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6615 (class 2606 OID 11291796)
-- Name: agendamento_codagendahr_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendamento
    ADD CONSTRAINT agendamento_codagendahr_fkey FOREIGN KEY (codagendahr) REFERENCES agendahr(codagendahr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6616 (class 2606 OID 11291801)
-- Name: agendamento_codmotivocancelado_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendamento
    ADD CONSTRAINT agendamento_codmotivocancelado_fkey FOREIGN KEY (codmotivocancelado) REFERENCES motivo(codmotivo) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6617 (class 2606 OID 11291806)
-- Name: agendamento_codusrcancelado_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendamento
    ADD CONSTRAINT agendamento_codusrcancelado_fkey FOREIGN KEY (codusrcancelado) REFERENCES usr(codusr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6618 (class 2606 OID 11291811)
-- Name: ajuda_codmodulo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ajuda
    ADD CONSTRAINT ajuda_codmodulo_fkey FOREIGN KEY (codmodulo) REFERENCES modulo(codmodulo) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6619 (class 2606 OID 11291816)
-- Name: ajuda_codpai_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ajuda
    ADD CONSTRAINT ajuda_codpai_fkey FOREIGN KEY (codpai) REFERENCES ajuda(codajuda) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 6620 (class 2606 OID 18217675)
-- Name: bid_codbidregiao_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid
    ADD CONSTRAINT bid_codbidregiao_fkey FOREIGN KEY (codbidregiao) REFERENCES bid_regiao(codbidregiao);


--
-- TOC entry 6621 (class 2606 OID 11291826)
-- Name: bid_codciduforigem_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid
    ADD CONSTRAINT bid_codciduforigem_fkey FOREIGN KEY (codciduforigem) REFERENCES ciduf(codciduf) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6622 (class 2606 OID 11291831)
-- Name: bid_codtpcarga_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid
    ADD CONSTRAINT bid_codtpcarga_fkey FOREIGN KEY (codtpcarga) REFERENCES tpcarga(codtpcarga) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6623 (class 2606 OID 11291836)
-- Name: bid_codusralter_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid
    ADD CONSTRAINT bid_codusralter_fkey FOREIGN KEY (codusralter) REFERENCES usr(codusr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6624 (class 2606 OID 11291841)
-- Name: bid_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid
    ADD CONSTRAINT bid_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6700 (class 2606 OID 18217591)
-- Name: bid_regiao_codemporig_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_regiao
    ADD CONSTRAINT bid_regiao_codemporig_fkey FOREIGN KEY (codemporig) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6625 (class 2606 OID 11291846)
-- Name: bid_spot_codcidufdestino_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_spot
    ADD CONSTRAINT bid_spot_codcidufdestino_fkey FOREIGN KEY (codcidufdestino) REFERENCES ciduf(codciduf) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6626 (class 2606 OID 11291851)
-- Name: bid_spot_codciduforigem_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_spot
    ADD CONSTRAINT bid_spot_codciduforigem_fkey FOREIGN KEY (codciduforigem) REFERENCES ciduf(codciduf) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6627 (class 2606 OID 11291856)
-- Name: bid_spot_codembarque_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_spot
    ADD CONSTRAINT bid_spot_codembarque_fkey FOREIGN KEY (codembarque) REFERENCES embarque(codembarque) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6628 (class 2606 OID 11291861)
-- Name: bid_spot_codemptra_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_spot
    ADD CONSTRAINT bid_spot_codemptra_fkey FOREIGN KEY (codemptra) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6629 (class 2606 OID 11291866)
-- Name: bid_spot_codprogcoleta_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_spot
    ADD CONSTRAINT bid_spot_codprogcoleta_fkey FOREIGN KEY (codprogcoleta) REFERENCES progcoleta(codprogcoleta) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6630 (class 2606 OID 11291871)
-- Name: bid_spot_codtpcarga_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_spot
    ADD CONSTRAINT bid_spot_codtpcarga_fkey FOREIGN KEY (codtpcarga) REFERENCES tpcarga(codtpcarga) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6631 (class 2606 OID 11291876)
-- Name: bid_transp_codbid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_transp
    ADD CONSTRAINT bid_transp_codbid_fkey FOREIGN KEY (codbid) REFERENCES bid(codbid) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6632 (class 2606 OID 11291881)
-- Name: bid_transp_codemptra_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bid_transp
    ADD CONSTRAINT bid_transp_codemptra_fkey FOREIGN KEY (codemptra) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6598 (class 2606 OID 11291886)
-- Name: carga_codcargafluxo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codcargafluxo_fkey FOREIGN KEY (codcargafluxo) REFERENCES cargafluxo(codcargafluxo) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6599 (class 2606 OID 11291891)
-- Name: carga_codcargafluxoveic_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codcargafluxoveic_fkey FOREIGN KEY (codcargafluxoveic) REFERENCES cargafluxoveic(codcargafluxoveic) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 6600 (class 2606 OID 11291896)
-- Name: carga_codcargagrupo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codcargagrupo_fkey FOREIGN KEY (codcargagrupo) REFERENCES cargagrupo(codcargagrupo) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- TOC entry 6601 (class 2606 OID 11291901)
-- Name: carga_codemptnf_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codemptnf_fkey FOREIGN KEY (codemptnf) REFERENCES emp(codemp) ON UPDATE SET NULL ON DELETE SET NULL;


--
-- TOC entry 6602 (class 2606 OID 11291906)
-- Name: carga_codenderecodest_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codenderecodest_fkey FOREIGN KEY (codenderecodest) REFERENCES empendereco(codempendereco) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6603 (class 2606 OID 11291911)
-- Name: carga_codenderecoorig_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codenderecoorig_fkey FOREIGN KEY (codenderecoorig) REFERENCES empendereco(codempendereco) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 6604 (class 2606 OID 11291916)
-- Name: carga_codmotivo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codmotivo_fkey FOREIGN KEY (codmotivo) REFERENCES motivo(codmotivo) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6605 (class 2606 OID 11291921)
-- Name: carga_codtpevento_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codtpevento_fkey FOREIGN KEY (codtpevento) REFERENCES tpevento(codtpevento) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6606 (class 2606 OID 11291926)
-- Name: carga_codtppalete_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga_antiga
    ADD CONSTRAINT carga_codtppalete_fkey FOREIGN KEY (codtppalete) REFERENCES tppalete(codtppalete) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 6633 (class 2606 OID 11291931)
-- Name: cargafluxo_codpriemp_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxo
    ADD CONSTRAINT cargafluxo_codpriemp_fkey FOREIGN KEY (codemporig) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6634 (class 2606 OID 11291936)
-- Name: cargafluxo_codultemp_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxo
    ADD CONSTRAINT cargafluxo_codultemp_fkey FOREIGN KEY (codultemp) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6635 (class 2606 OID 11291941)
-- Name: cargafluxoemp_codcargafluxo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxoemp
    ADD CONSTRAINT cargafluxoemp_codcargafluxo_fkey FOREIGN KEY (codcargafluxo) REFERENCES cargafluxo(codcargafluxo) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6636 (class 2606 OID 11291946)
-- Name: cargafluxoemp_codempdest_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxoemp
    ADD CONSTRAINT cargafluxoemp_codempdest_fkey FOREIGN KEY (codempdest) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6637 (class 2606 OID 11291951)
-- Name: cargafluxoemp_codemporig_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxoemp
    ADD CONSTRAINT cargafluxoemp_codemporig_fkey FOREIGN KEY (codemporig) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6638 (class 2606 OID 11291956)
-- Name: cargafluxoveic_codcargafluxo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cargafluxoveic
    ADD CONSTRAINT cargafluxoveic_codcargafluxo_fkey FOREIGN KEY (codcargafluxo) REFERENCES cargafluxo(codcargafluxo) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 6640 (class 2606 OID 19966463)
-- Name: embarque_codemptnf_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT embarque_codemptnf_fkey FOREIGN KEY (codemptnf) REFERENCES emp(codemp) ON UPDATE SET NULL ON DELETE SET NULL;


--
-- TOC entry 6639 (class 2606 OID 18485177)
-- Name: embarque_codprogcoleta_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT embarque_codprogcoleta_fkey FOREIGN KEY (codprogcoleta) REFERENCES progcoleta(codprogcoleta);


--
-- TOC entry 6641 (class 2606 OID 19966468)
-- Name: embarque_codtpevento_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT embarque_codtpevento_fkey FOREIGN KEY (codtpevento) REFERENCES tpevento(codtpevento) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6642 (class 2606 OID 19966473)
-- Name: embarque_codtpoper_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT embarque_codtpoper_fkey FOREIGN KEY (codtpoper) REFERENCES tpoper(codtpoper) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6678 (class 2606 OID 17019110)
-- Name: fk_agendadescarga_codstatagendadescarga; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_agendadescarga_codstatagendadescarga FOREIGN KEY (codstatagendadescarga) REFERENCES statagendadescarga(codstatagendadescarga) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6597 (class 2606 OID 17389022)
-- Name: fk_carga_codproduto; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY carga
    ADD CONSTRAINT fk_carga_codproduto FOREIGN KEY (codproduto) REFERENCES produto(codproduto) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6679 (class 2606 OID 17019115)
-- Name: fk_embarque_codembarque; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_embarque_codembarque FOREIGN KEY (codembarque) REFERENCES embarque(codembarque) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6643 (class 2606 OID 19966478)
-- Name: fk_embarque_codempdest; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codempdest FOREIGN KEY (codempdest) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6644 (class 2606 OID 19966483)
-- Name: fk_embarque_codempembar; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codempembar FOREIGN KEY (codempembar) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6645 (class 2606 OID 19966488)
-- Name: fk_embarque_codemporig; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codemporig FOREIGN KEY (codemporig) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6646 (class 2606 OID 19966493)
-- Name: fk_embarque_codemptra; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codemptra FOREIGN KEY (codemptra) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6647 (class 2606 OID 19966498)
-- Name: fk_embarque_codmoeda; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codmoeda FOREIGN KEY (codmoeda) REFERENCES moeda(codmoeda) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6648 (class 2606 OID 19966503)
-- Name: fk_embarque_codmot1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codmot1 FOREIGN KEY (codmot1) REFERENCES mot(codmot) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6649 (class 2606 OID 19966508)
-- Name: fk_embarque_codmot2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codmot2 FOREIGN KEY (codmot2) REFERENCES mot(codmot) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6650 (class 2606 OID 19966513)
-- Name: fk_embarque_codrastrmovel; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codrastrmovel FOREIGN KEY (codrastrmovel) REFERENCES rastrmovel(codrastrmovel) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6651 (class 2606 OID 19966518)
-- Name: fk_embarque_codrota; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codrota FOREIGN KEY (codrota) REFERENCES rota(codrota) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6652 (class 2606 OID 19966523)
-- Name: fk_embarque_codsitembarque; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codsitembarque FOREIGN KEY (codsitembarque) REFERENCES sitembarque(codsitembarque) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6653 (class 2606 OID 19966528)
-- Name: fk_embarque_codstatembarque; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codstatembarque FOREIGN KEY (codstatembarque) REFERENCES statembarque(codstatembarque) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6654 (class 2606 OID 19966533)
-- Name: fk_embarque_codtppriotsitembarque; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codtppriotsitembarque FOREIGN KEY (codtppriorsitembarque) REFERENCES tpprior(codtpprior) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6655 (class 2606 OID 19966538)
-- Name: fk_embarque_codusralter; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codusralter FOREIGN KEY (codusralter) REFERENCES usr(codusr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6656 (class 2606 OID 19966543)
-- Name: fk_embarque_codusrincl; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codusrincl FOREIGN KEY (codusrincl) REFERENCES usr(codusr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6657 (class 2606 OID 19966548)
-- Name: fk_embarque_codusrsitembarque; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codusrsitembarque FOREIGN KEY (codusrsitembarque) REFERENCES usr(codusr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6658 (class 2606 OID 19966553)
-- Name: fk_embarque_codusrstatembarque; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codusrstatembarque FOREIGN KEY (codusrstatembarque) REFERENCES usr(codusr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6659 (class 2606 OID 19966558)
-- Name: fk_embarque_codveic; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_codveic FOREIGN KEY (codveic) REFERENCES veic(codveic) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6660 (class 2606 OID 19966563)
-- Name: fk_embarque_empdest_codciduf; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_empdest_codciduf FOREIGN KEY (empdest_codciduf) REFERENCES ciduf(codciduf) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6661 (class 2606 OID 19966568)
-- Name: fk_embarque_empembar_codciduf; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_empembar_codciduf FOREIGN KEY (empembar_codciduf) REFERENCES ciduf(codciduf) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6662 (class 2606 OID 19966573)
-- Name: fk_embarque_emporig_codciduf; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_emporig_codciduf FOREIGN KEY (emporig_codciduf) REFERENCES ciduf(codciduf) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6663 (class 2606 OID 19966578)
-- Name: fk_embarque_emptra_codciduf; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_emptra_codciduf FOREIGN KEY (emptra_codciduf) REFERENCES ciduf(codciduf) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6664 (class 2606 OID 19966583)
-- Name: fk_embarque_rastrmovel_codtecrastr; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_rastrmovel_codtecrastr FOREIGN KEY (rastrmovel_codtecrastr) REFERENCES tecrastr(codtecrastr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6665 (class 2606 OID 19966588)
-- Name: fk_embarque_veic_codtecrastr; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY embarque
    ADD CONSTRAINT fk_embarque_veic_codtecrastr FOREIGN KEY (veic_codtecrastr) REFERENCES tecrastr(codtecrastr) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6680 (class 2606 OID 17019120)
-- Name: fk_emp_codempdest; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_emp_codempdest FOREIGN KEY (codempdest) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6681 (class 2606 OID 17019125)
-- Name: fk_emp_codemporig; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_emp_codemporig FOREIGN KEY (codemporig) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6682 (class 2606 OID 17019130)
-- Name: fk_emp_codemptra; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_emp_codemptra FOREIGN KEY (codemptra) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6683 (class 2606 OID 17019135)
-- Name: fk_empcfgjanela_codempcfgjanela; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_empcfgjanela_codempcfgjanela FOREIGN KEY (codempcfgjanela) REFERENCES empcfgjanela(codempcfgjanela) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6674 (class 2606 OID 15153976)
-- Name: fk_empcfgjanela_conta; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empcfgjanela
    ADD CONSTRAINT fk_empcfgjanela_conta FOREIGN KEY (codconta) REFERENCES conta(codconta) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6676 (class 2606 OID 16903049)
-- Name: fk_empcfgjanela_empdest; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empcfgjanela
    ADD CONSTRAINT fk_empcfgjanela_empdest FOREIGN KEY (codempdest) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6677 (class 2606 OID 16903054)
-- Name: fk_empcfgjanela_emporigem; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empcfgjanela
    ADD CONSTRAINT fk_empcfgjanela_emporigem FOREIGN KEY (codemporigem) REFERENCES emp(codemp) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6675 (class 2606 OID 15153986)
-- Name: fk_empcfgjanela_tpcarga; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY empcfgjanela
    ADD CONSTRAINT fk_empcfgjanela_tpcarga FOREIGN KEY (codtpcarga) REFERENCES tpcarga(codtpcarga) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6684 (class 2606 OID 17019140)
-- Name: fk_empcfgturno_codempcfgturno; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_empcfgturno_codempcfgturno FOREIGN KEY (codempcfgturno) REFERENCES empcfgturno(codempcfgturno) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6685 (class 2606 OID 17019145)
-- Name: fk_mot_codmot; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_mot_codmot FOREIGN KEY (codmot) REFERENCES mot(codmot) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6673 (class 2606 OID 15155299)
-- Name: fk_produto_tpcarga; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY produto
    ADD CONSTRAINT fk_produto_tpcarga FOREIGN KEY (codtpcarga) REFERENCES tpcarga(codtpcarga) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6686 (class 2606 OID 17019150)
-- Name: fk_veic_codveic; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY agendadescarga
    ADD CONSTRAINT fk_veic_codveic FOREIGN KEY (codveic) REFERENCES veic(codveic) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- TOC entry 6698 (class 2606 OID 18215214)
-- Name: histstatpedido_codpedido_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histstatpedido
    ADD CONSTRAINT histstatpedido_codpedido_fkey FOREIGN KEY (codpedido) REFERENCES pedido(codpedido);


--
-- TOC entry 6697 (class 2606 OID 18215209)
-- Name: histstatpedido_codstatpedido_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histstatpedido
    ADD CONSTRAINT histstatpedido_codstatpedido_fkey FOREIGN KEY (codstatpedido) REFERENCES statpedido(codstatpedido);


--
-- TOC entry 6699 (class 2606 OID 18215219)
-- Name: histstatpedido_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY histstatpedido
    ADD CONSTRAINT histstatpedido_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6708 (class 2606 OID 19650900)
-- Name: leilao_codbid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codbid_fkey FOREIGN KEY (codbid) REFERENCES bid(codbid);


--
-- TOC entry 6702 (class 2606 OID 20269548)
-- Name: leilao_codcidufdestino_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codcidufdestino_fkey FOREIGN KEY (codcidufdestino) REFERENCES ciduf(codciduf);


--
-- TOC entry 6703 (class 2606 OID 20269553)
-- Name: leilao_codcidufdestino_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codcidufdestino_fkey1 FOREIGN KEY (codcidufdestino) REFERENCES ciduf(codciduf);


--
-- TOC entry 6706 (class 2606 OID 19650890)
-- Name: leilao_codpedido_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codpedido_fkey FOREIGN KEY (codpedido) REFERENCES pedido(codpedido);


--
-- TOC entry 6707 (class 2606 OID 19650895)
-- Name: leilao_codstatleilao_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codstatleilao_fkey FOREIGN KEY (codstatleilao) REFERENCES statleilao(codstatleilao);


--
-- TOC entry 6704 (class 2606 OID 20269558)
-- Name: leilao_codtpcarga_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codtpcarga_fkey FOREIGN KEY (codtpcarga) REFERENCES tpcarga(codtpcarga);


--
-- TOC entry 6705 (class 2606 OID 20561916)
-- Name: leilao_codtranspminlance_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codtranspminlance_fkey FOREIGN KEY (codtranspminlance) REFERENCES emp(codemp);


--
-- TOC entry 6711 (class 2606 OID 19650915)
-- Name: leilao_codtranspultlance_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codtranspultlance_fkey FOREIGN KEY (codtranspultlance) REFERENCES emp(codemp);


--
-- TOC entry 6710 (class 2606 OID 19650910)
-- Name: leilao_codusralter_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codusralter_fkey FOREIGN KEY (codusralter) REFERENCES usr(codusr);


--
-- TOC entry 6709 (class 2606 OID 19650905)
-- Name: leilao_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilao
    ADD CONSTRAINT leilao_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6719 (class 2606 OID 19650997)
-- Name: leilaoaprovacao_codleilao_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaoaprovacao
    ADD CONSTRAINT leilaoaprovacao_codleilao_fkey FOREIGN KEY (codleilao) REFERENCES leilao(codleilao);


--
-- TOC entry 6718 (class 2606 OID 19650992)
-- Name: leilaoaprovacao_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaoaprovacao
    ADD CONSTRAINT leilaoaprovacao_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6724 (class 2606 OID 19651042)
-- Name: leilaofrete_codcidufdestino_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaofrete
    ADD CONSTRAINT leilaofrete_codcidufdestino_fkey FOREIGN KEY (codcidufdestino) REFERENCES ciduf(codciduf);


--
-- TOC entry 6723 (class 2606 OID 19651037)
-- Name: leilaofrete_codciduforigem_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaofrete
    ADD CONSTRAINT leilaofrete_codciduforigem_fkey FOREIGN KEY (codciduforigem) REFERENCES ciduf(codciduf);


--
-- TOC entry 6722 (class 2606 OID 19651032)
-- Name: leilaofrete_codleilaotpfrete_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaofrete
    ADD CONSTRAINT leilaofrete_codleilaotpfrete_fkey FOREIGN KEY (codleilaotpfrete) REFERENCES leilaotpfrete(codleilaotpfrete);


--
-- TOC entry 6725 (class 2606 OID 19651047)
-- Name: leilaofrete_codtpcarga_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaofrete
    ADD CONSTRAINT leilaofrete_codtpcarga_fkey FOREIGN KEY (codtpcarga) REFERENCES tpcarga(codtpcarga);


--
-- TOC entry 6721 (class 2606 OID 19651027)
-- Name: leilaofrete_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaofrete
    ADD CONSTRAINT leilaofrete_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6717 (class 2606 OID 19650977)
-- Name: leilaolance_codleilao_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaolance
    ADD CONSTRAINT leilaolance_codleilao_fkey FOREIGN KEY (codleilao) REFERENCES leilao(codleilao);


--
-- TOC entry 6716 (class 2606 OID 19650972)
-- Name: leilaolance_codleilaotransp_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaolance
    ADD CONSTRAINT leilaolance_codleilaotransp_fkey FOREIGN KEY (codleilaotransp) REFERENCES leilaotransp(codleilaotransp);


--
-- TOC entry 6715 (class 2606 OID 19650967)
-- Name: leilaolance_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaolance
    ADD CONSTRAINT leilaolance_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6720 (class 2606 OID 19651012)
-- Name: leilaotpfrete_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaotpfrete
    ADD CONSTRAINT leilaotpfrete_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6713 (class 2606 OID 19650942)
-- Name: leilaotransp_codemptra_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaotransp
    ADD CONSTRAINT leilaotransp_codemptra_fkey FOREIGN KEY (codemptra) REFERENCES emp(codemp);


--
-- TOC entry 6714 (class 2606 OID 19650947)
-- Name: leilaotransp_codleilao_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaotransp
    ADD CONSTRAINT leilaotransp_codleilao_fkey FOREIGN KEY (codleilao) REFERENCES leilao(codleilao);


--
-- TOC entry 6712 (class 2606 OID 19650937)
-- Name: leilaotransp_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY leilaotransp
    ADD CONSTRAINT leilaotransp_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6690 (class 2606 OID 18161882)
-- Name: pedido_codempdest_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codempdest_fkey FOREIGN KEY (codempdest) REFERENCES emp(codemp);


--
-- TOC entry 6689 (class 2606 OID 18161877)
-- Name: pedido_codempempbar_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codempempbar_fkey FOREIGN KEY (codempembar) REFERENCES emp(codemp);


--
-- TOC entry 6696 (class 2606 OID 18510541)
-- Name: pedido_codpedidooriginal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codpedidooriginal_fkey FOREIGN KEY (codpedidooriginal) REFERENCES pedido(codpedido);


--
-- TOC entry 6691 (class 2606 OID 18161887)
-- Name: pedido_codstatpedido_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codstatpedido_fkey FOREIGN KEY (codstatpedido) REFERENCES statpedido(codstatpedido);


--
-- TOC entry 6692 (class 2606 OID 18161892)
-- Name: pedido_codtpcarga_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codtpcarga_fkey FOREIGN KEY (codtpcarga) REFERENCES tpcarga(codtpcarga);


--
-- TOC entry 6695 (class 2606 OID 18474023)
-- Name: pedido_codtpoper_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codtpoper_fkey FOREIGN KEY (codtpoper) REFERENCES tpoper(codtpoper);


--
-- TOC entry 6694 (class 2606 OID 18161902)
-- Name: pedido_codusralter_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codusralter_fkey FOREIGN KEY (codusralter) REFERENCES usr(codusr);


--
-- TOC entry 6693 (class 2606 OID 18161897)
-- Name: pedido_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pedido
    ADD CONSTRAINT pedido_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6667 (class 2606 OID 18477326)
-- Name: progcoleta_codempdest_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY progcoleta
    ADD CONSTRAINT progcoleta_codempdest_fkey FOREIGN KEY (codempdest) REFERENCES emp(codemp);


--
-- TOC entry 6666 (class 2606 OID 18473094)
-- Name: progcoleta_codpedido_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY progcoleta
    ADD CONSTRAINT progcoleta_codpedido_fkey FOREIGN KEY (codpedido) REFERENCES pedido(codpedido);


--
-- TOC entry 6668 (class 2606 OID 18573418)
-- Name: progcoleta_codprogcoletaoriginal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY progcoleta
    ADD CONSTRAINT progcoleta_codprogcoletaoriginal_fkey FOREIGN KEY (codprogcoletaoriginal) REFERENCES progcoleta(codprogcoleta);


--
-- TOC entry 6701 (class 2606 OID 19650870)
-- Name: statleilao_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY statleilao
    ADD CONSTRAINT statleilao_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6688 (class 2606 OID 18161853)
-- Name: statpedido_codusralter_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY statpedido
    ADD CONSTRAINT statpedido_codusralter_fkey FOREIGN KEY (codusralter) REFERENCES usr(codusr);


--
-- TOC entry 6687 (class 2606 OID 18161848)
-- Name: statpedido_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY statpedido
    ADD CONSTRAINT statpedido_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6671 (class 2606 OID 11292002)
-- Name: tpeventoemp_codemp_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpeventoemp
    ADD CONSTRAINT tpeventoemp_codemp_fkey FOREIGN KEY (codemp) REFERENCES emp(codemp);


--
-- TOC entry 6672 (class 2606 OID 11292007)
-- Name: tpeventoemp_codtpevento_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpeventoemp
    ADD CONSTRAINT tpeventoemp_codtpevento_fkey FOREIGN KEY (codtpevento) REFERENCES tpevento(codtpevento);


--
-- TOC entry 6670 (class 2606 OID 11291997)
-- Name: tpeventoemp_codusralter_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpeventoemp
    ADD CONSTRAINT tpeventoemp_codusralter_fkey FOREIGN KEY (codusralter) REFERENCES usr(codusr);


--
-- TOC entry 6669 (class 2606 OID 11291992)
-- Name: tpeventoemp_codusrincl_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tpeventoemp
    ADD CONSTRAINT tpeventoemp_codusrincl_fkey FOREIGN KEY (codusrincl) REFERENCES usr(codusr);


--
-- TOC entry 6970 (class 0 OID 0)
-- Dependencies: 14
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2015-10-14 16:25:27

--
-- PostgreSQL database dump complete
--

